/* automatically generated by rust-bindgen 0.70.1 */

pub const xmlSecKeyDataUsageUnknown: u32 = 0;
pub const xmlSecKeyDataUsageKeyInfoNodeRead: u32 = 1;
pub const xmlSecKeyDataUsageKeyInfoNodeWrite: u32 = 2;
pub const xmlSecKeyDataUsageKeyValueNodeRead: u32 = 4;
pub const xmlSecKeyDataUsageKeyValueNodeWrite: u32 = 8;
pub const xmlSecKeyDataUsageRetrievalMethodNodeXml: u32 = 16;
pub const xmlSecKeyDataUsageRetrievalMethodNodeBin: u32 = 32;
pub const xmlSecKeyDataUsageReadFromFile: u32 = 64;
pub const xmlSecKeyDataUsageAny: u32 = 1048575;
pub const xmlSecKeyDataUsageKeyInfoNode: u32 = 3;
pub const xmlSecKeyDataUsageKeyValueNode: u32 = 12;
pub const xmlSecKeyDataUsageRetrievalMethodNode: u32 = 48;
pub const xmlSecKeyDataTypeUnknown: u32 = 0;
pub const xmlSecKeyDataTypeNone: u32 = 0;
pub const xmlSecKeyDataTypePublic: u32 = 1;
pub const xmlSecKeyDataTypePrivate: u32 = 2;
pub const xmlSecKeyDataTypeSymmetric: u32 = 4;
pub const xmlSecKeyDataTypeSession: u32 = 8;
pub const xmlSecKeyDataTypePermanent: u32 = 16;
pub const xmlSecKeyDataTypeTrusted: u32 = 256;
pub const xmlSecKeyDataTypeAny: u32 = 65535;
pub const xmlSecKeyUsageSign: u32 = 1;
pub const xmlSecKeyUsageVerify: u32 = 2;
pub const xmlSecKeyUsageEncrypt: u32 = 4;
pub const xmlSecKeyUsageDecrypt: u32 = 8;
pub const xmlSecKeyUsageKeyExchange: u32 = 16;
pub const xmlSecKeyUsageKeyDerive: u32 = 32;
pub const xmlSecKeyUsageKeyAgreement: u32 = 64;
pub const xmlSecKeyUsageAny: u32 = 4294967295;
pub const xmlSecTransformUriTypeNone: u32 = 0;
pub const xmlSecTransformUriTypeEmpty: u32 = 1;
pub const xmlSecTransformUriTypeSameDocument: u32 = 2;
pub const xmlSecTransformUriTypeLocal: u32 = 4;
pub const xmlSecTransformUriTypeRemote: u32 = 8;
pub const xmlSecTransformUriTypeAny: u32 = 65535;
pub const xmlSecTransformDataTypeUnknown: u32 = 0;
pub const xmlSecTransformDataTypeBin: u32 = 1;
pub const xmlSecTransformDataTypeXml: u32 = 2;
pub const xmlSecTransformUsageUnknown: u32 = 0;
pub const xmlSecTransformUsageDSigTransform: u32 = 1;
pub const xmlSecTransformUsageC14NMethod: u32 = 2;
pub const xmlSecTransformUsageDigestMethod: u32 = 4;
pub const xmlSecTransformUsageSignatureMethod: u32 = 8;
pub const xmlSecTransformUsageEncryptionMethod: u32 = 16;
pub const xmlSecTransformUsageKeyDerivationMethod: u32 = 32;
pub const xmlSecTransformUsageAgreementMethod: u32 = 64;
pub const xmlSecTransformUsageAny: u32 = 65535;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_off_t = __int64_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
#[doc = " xmlChar:\n\n This is a basic byte in an UTF-8 encoded string.\n It's unsigned allowing to pinpoint case where char * are assigned\n to xmlChar * (possibly making serialization back impossible)."]
pub type xmlChar = ::std::os::raw::c_uchar;
pub type xmlParserInputBuffer = _xmlParserInputBuffer;
pub type xmlParserInputBufferPtr = *mut xmlParserInputBuffer;
pub type xmlOutputBuffer = _xmlOutputBuffer;
pub type xmlOutputBufferPtr = *mut xmlOutputBuffer;
#[doc = " DOC_DISABLE"]
pub type xmlParserInput = _xmlParserInput;
pub type xmlParserInputPtr = *mut xmlParserInput;
#[doc = " xmlParserCtxt:\n\n The parser context.\n NOTE This doesn't completely define the parser state, the (current ?)\n      design of the parser uses recursive function calls since this allow\n      and easy mapping from the production rules of the specification\n      to the actual code. The drawback is that the actual function call\n      also reflect the parser state. However most of the parsing routines\n      takes as the only argument the parser context pointer, so migrating\n      to a state based parser for progressive parsing shouldn't be too hard."]
pub type xmlParserCtxt = _xmlParserCtxt;
pub type xmlParserCtxtPtr = *mut xmlParserCtxt;
#[doc = " xmlSAXLocator:\n\n A SAX Locator."]
pub type xmlSAXLocator = _xmlSAXLocator;
pub type xmlSAXLocatorPtr = *mut xmlSAXLocator;
pub type xmlEntity = _xmlEntity;
pub type xmlEntityPtr = *mut xmlEntity;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlBuf {
    _unused: [u8; 0],
}
#[doc = " xmlBuf:\n\n A buffer structure, new one, the actual structure internals are not public"]
pub type xmlBuf = _xmlBuf;
#[doc = " xmlBufPtr:\n\n A pointer to a buffer structure, the actual structure internals are not\n public"]
pub type xmlBufPtr = *mut xmlBuf;
pub const xmlElementType_XML_ELEMENT_NODE: xmlElementType = 1;
pub const xmlElementType_XML_ATTRIBUTE_NODE: xmlElementType = 2;
pub const xmlElementType_XML_TEXT_NODE: xmlElementType = 3;
pub const xmlElementType_XML_CDATA_SECTION_NODE: xmlElementType = 4;
pub const xmlElementType_XML_ENTITY_REF_NODE: xmlElementType = 5;
pub const xmlElementType_XML_ENTITY_NODE: xmlElementType = 6;
pub const xmlElementType_XML_PI_NODE: xmlElementType = 7;
pub const xmlElementType_XML_COMMENT_NODE: xmlElementType = 8;
pub const xmlElementType_XML_DOCUMENT_NODE: xmlElementType = 9;
pub const xmlElementType_XML_DOCUMENT_TYPE_NODE: xmlElementType = 10;
pub const xmlElementType_XML_DOCUMENT_FRAG_NODE: xmlElementType = 11;
pub const xmlElementType_XML_NOTATION_NODE: xmlElementType = 12;
pub const xmlElementType_XML_HTML_DOCUMENT_NODE: xmlElementType = 13;
pub const xmlElementType_XML_DTD_NODE: xmlElementType = 14;
pub const xmlElementType_XML_ELEMENT_DECL: xmlElementType = 15;
pub const xmlElementType_XML_ATTRIBUTE_DECL: xmlElementType = 16;
pub const xmlElementType_XML_ENTITY_DECL: xmlElementType = 17;
pub const xmlElementType_XML_NAMESPACE_DECL: xmlElementType = 18;
pub const xmlElementType_XML_XINCLUDE_START: xmlElementType = 19;
pub const xmlElementType_XML_XINCLUDE_END: xmlElementType = 20;
pub type xmlElementType = ::std::os::raw::c_uint;
pub const xmlAttributeType_XML_ATTRIBUTE_CDATA: xmlAttributeType = 1;
pub const xmlAttributeType_XML_ATTRIBUTE_ID: xmlAttributeType = 2;
pub const xmlAttributeType_XML_ATTRIBUTE_IDREF: xmlAttributeType = 3;
pub const xmlAttributeType_XML_ATTRIBUTE_IDREFS: xmlAttributeType = 4;
pub const xmlAttributeType_XML_ATTRIBUTE_ENTITY: xmlAttributeType = 5;
pub const xmlAttributeType_XML_ATTRIBUTE_ENTITIES: xmlAttributeType = 6;
pub const xmlAttributeType_XML_ATTRIBUTE_NMTOKEN: xmlAttributeType = 7;
pub const xmlAttributeType_XML_ATTRIBUTE_NMTOKENS: xmlAttributeType = 8;
pub const xmlAttributeType_XML_ATTRIBUTE_ENUMERATION: xmlAttributeType = 9;
pub const xmlAttributeType_XML_ATTRIBUTE_NOTATION: xmlAttributeType = 10;
#[doc = " xmlAttributeType:\n\n A DTD Attribute type definition."]
pub type xmlAttributeType = ::std::os::raw::c_uint;
#[doc = " xmlEnumeration:\n\n List structure used when there is an enumeration in DTDs."]
pub type xmlEnumeration = _xmlEnumeration;
pub type xmlEnumerationPtr = *mut xmlEnumeration;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlEnumeration {
    pub next: *mut _xmlEnumeration,
    pub name: *const xmlChar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlEnumeration"][::std::mem::size_of::<_xmlEnumeration>() - 16usize];
    ["Alignment of _xmlEnumeration"][::std::mem::align_of::<_xmlEnumeration>() - 8usize];
    ["Offset of field: _xmlEnumeration::next"]
        [::std::mem::offset_of!(_xmlEnumeration, next) - 0usize];
    ["Offset of field: _xmlEnumeration::name"]
        [::std::mem::offset_of!(_xmlEnumeration, name) - 8usize];
};
pub const xmlElementContentType_XML_ELEMENT_CONTENT_PCDATA: xmlElementContentType = 1;
pub const xmlElementContentType_XML_ELEMENT_CONTENT_ELEMENT: xmlElementContentType = 2;
pub const xmlElementContentType_XML_ELEMENT_CONTENT_SEQ: xmlElementContentType = 3;
pub const xmlElementContentType_XML_ELEMENT_CONTENT_OR: xmlElementContentType = 4;
#[doc = " xmlElementContentType:\n\n Possible definitions of element content types."]
pub type xmlElementContentType = ::std::os::raw::c_uint;
pub const xmlElementContentOccur_XML_ELEMENT_CONTENT_ONCE: xmlElementContentOccur = 1;
pub const xmlElementContentOccur_XML_ELEMENT_CONTENT_OPT: xmlElementContentOccur = 2;
pub const xmlElementContentOccur_XML_ELEMENT_CONTENT_MULT: xmlElementContentOccur = 3;
pub const xmlElementContentOccur_XML_ELEMENT_CONTENT_PLUS: xmlElementContentOccur = 4;
#[doc = " xmlElementContentOccur:\n\n Possible definitions of element content occurrences."]
pub type xmlElementContentOccur = ::std::os::raw::c_uint;
#[doc = " xmlElementContent:\n\n An XML Element content as stored after parsing an element definition\n in a DTD."]
pub type xmlElementContent = _xmlElementContent;
pub type xmlElementContentPtr = *mut xmlElementContent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlElementContent {
    pub type_: xmlElementContentType,
    pub ocur: xmlElementContentOccur,
    pub name: *const xmlChar,
    pub c1: *mut _xmlElementContent,
    pub c2: *mut _xmlElementContent,
    pub parent: *mut _xmlElementContent,
    pub prefix: *const xmlChar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlElementContent"][::std::mem::size_of::<_xmlElementContent>() - 48usize];
    ["Alignment of _xmlElementContent"][::std::mem::align_of::<_xmlElementContent>() - 8usize];
    ["Offset of field: _xmlElementContent::type_"]
        [::std::mem::offset_of!(_xmlElementContent, type_) - 0usize];
    ["Offset of field: _xmlElementContent::ocur"]
        [::std::mem::offset_of!(_xmlElementContent, ocur) - 4usize];
    ["Offset of field: _xmlElementContent::name"]
        [::std::mem::offset_of!(_xmlElementContent, name) - 8usize];
    ["Offset of field: _xmlElementContent::c1"]
        [::std::mem::offset_of!(_xmlElementContent, c1) - 16usize];
    ["Offset of field: _xmlElementContent::c2"]
        [::std::mem::offset_of!(_xmlElementContent, c2) - 24usize];
    ["Offset of field: _xmlElementContent::parent"]
        [::std::mem::offset_of!(_xmlElementContent, parent) - 32usize];
    ["Offset of field: _xmlElementContent::prefix"]
        [::std::mem::offset_of!(_xmlElementContent, prefix) - 40usize];
};
pub use self::xmlElementType as xmlNsType;
#[doc = " xmlNs:\n\n An XML namespace.\n Note that prefix == NULL is valid, it defines the default namespace\n within the subtree (until overridden).\n\n xmlNsType is unified with xmlElementType."]
pub type xmlNs = _xmlNs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlNs {
    pub next: *mut _xmlNs,
    pub type_: xmlNsType,
    pub href: *const xmlChar,
    pub prefix: *const xmlChar,
    pub _private: *mut ::std::os::raw::c_void,
    pub context: *mut _xmlDoc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlNs"][::std::mem::size_of::<_xmlNs>() - 48usize];
    ["Alignment of _xmlNs"][::std::mem::align_of::<_xmlNs>() - 8usize];
    ["Offset of field: _xmlNs::next"][::std::mem::offset_of!(_xmlNs, next) - 0usize];
    ["Offset of field: _xmlNs::type_"][::std::mem::offset_of!(_xmlNs, type_) - 8usize];
    ["Offset of field: _xmlNs::href"][::std::mem::offset_of!(_xmlNs, href) - 16usize];
    ["Offset of field: _xmlNs::prefix"][::std::mem::offset_of!(_xmlNs, prefix) - 24usize];
    ["Offset of field: _xmlNs::_private"][::std::mem::offset_of!(_xmlNs, _private) - 32usize];
    ["Offset of field: _xmlNs::context"][::std::mem::offset_of!(_xmlNs, context) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlDtd {
    pub _private: *mut ::std::os::raw::c_void,
    pub type_: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDoc,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub notations: *mut ::std::os::raw::c_void,
    pub elements: *mut ::std::os::raw::c_void,
    pub attributes: *mut ::std::os::raw::c_void,
    pub entities: *mut ::std::os::raw::c_void,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub pentities: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlDtd"][::std::mem::size_of::<_xmlDtd>() - 128usize];
    ["Alignment of _xmlDtd"][::std::mem::align_of::<_xmlDtd>() - 8usize];
    ["Offset of field: _xmlDtd::_private"][::std::mem::offset_of!(_xmlDtd, _private) - 0usize];
    ["Offset of field: _xmlDtd::type_"][::std::mem::offset_of!(_xmlDtd, type_) - 8usize];
    ["Offset of field: _xmlDtd::name"][::std::mem::offset_of!(_xmlDtd, name) - 16usize];
    ["Offset of field: _xmlDtd::children"][::std::mem::offset_of!(_xmlDtd, children) - 24usize];
    ["Offset of field: _xmlDtd::last"][::std::mem::offset_of!(_xmlDtd, last) - 32usize];
    ["Offset of field: _xmlDtd::parent"][::std::mem::offset_of!(_xmlDtd, parent) - 40usize];
    ["Offset of field: _xmlDtd::next"][::std::mem::offset_of!(_xmlDtd, next) - 48usize];
    ["Offset of field: _xmlDtd::prev"][::std::mem::offset_of!(_xmlDtd, prev) - 56usize];
    ["Offset of field: _xmlDtd::doc"][::std::mem::offset_of!(_xmlDtd, doc) - 64usize];
    ["Offset of field: _xmlDtd::notations"][::std::mem::offset_of!(_xmlDtd, notations) - 72usize];
    ["Offset of field: _xmlDtd::elements"][::std::mem::offset_of!(_xmlDtd, elements) - 80usize];
    ["Offset of field: _xmlDtd::attributes"][::std::mem::offset_of!(_xmlDtd, attributes) - 88usize];
    ["Offset of field: _xmlDtd::entities"][::std::mem::offset_of!(_xmlDtd, entities) - 96usize];
    ["Offset of field: _xmlDtd::ExternalID"]
        [::std::mem::offset_of!(_xmlDtd, ExternalID) - 104usize];
    ["Offset of field: _xmlDtd::SystemID"][::std::mem::offset_of!(_xmlDtd, SystemID) - 112usize];
    ["Offset of field: _xmlDtd::pentities"][::std::mem::offset_of!(_xmlDtd, pentities) - 120usize];
};
#[doc = " xmlAttr:\n\n An attribute on an XML node."]
pub type xmlAttr = _xmlAttr;
pub type xmlAttrPtr = *mut xmlAttr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlAttr {
    pub _private: *mut ::std::os::raw::c_void,
    pub type_: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlAttr,
    pub prev: *mut _xmlAttr,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub atype: xmlAttributeType,
    pub psvi: *mut ::std::os::raw::c_void,
    pub id: *mut _xmlID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlAttr"][::std::mem::size_of::<_xmlAttr>() - 104usize];
    ["Alignment of _xmlAttr"][::std::mem::align_of::<_xmlAttr>() - 8usize];
    ["Offset of field: _xmlAttr::_private"][::std::mem::offset_of!(_xmlAttr, _private) - 0usize];
    ["Offset of field: _xmlAttr::type_"][::std::mem::offset_of!(_xmlAttr, type_) - 8usize];
    ["Offset of field: _xmlAttr::name"][::std::mem::offset_of!(_xmlAttr, name) - 16usize];
    ["Offset of field: _xmlAttr::children"][::std::mem::offset_of!(_xmlAttr, children) - 24usize];
    ["Offset of field: _xmlAttr::last"][::std::mem::offset_of!(_xmlAttr, last) - 32usize];
    ["Offset of field: _xmlAttr::parent"][::std::mem::offset_of!(_xmlAttr, parent) - 40usize];
    ["Offset of field: _xmlAttr::next"][::std::mem::offset_of!(_xmlAttr, next) - 48usize];
    ["Offset of field: _xmlAttr::prev"][::std::mem::offset_of!(_xmlAttr, prev) - 56usize];
    ["Offset of field: _xmlAttr::doc"][::std::mem::offset_of!(_xmlAttr, doc) - 64usize];
    ["Offset of field: _xmlAttr::ns"][::std::mem::offset_of!(_xmlAttr, ns) - 72usize];
    ["Offset of field: _xmlAttr::atype"][::std::mem::offset_of!(_xmlAttr, atype) - 80usize];
    ["Offset of field: _xmlAttr::psvi"][::std::mem::offset_of!(_xmlAttr, psvi) - 88usize];
    ["Offset of field: _xmlAttr::id"][::std::mem::offset_of!(_xmlAttr, id) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlID {
    pub next: *mut _xmlID,
    pub value: *const xmlChar,
    pub attr: xmlAttrPtr,
    pub name: *const xmlChar,
    pub lineno: ::std::os::raw::c_int,
    pub doc: *mut _xmlDoc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlID"][::std::mem::size_of::<_xmlID>() - 48usize];
    ["Alignment of _xmlID"][::std::mem::align_of::<_xmlID>() - 8usize];
    ["Offset of field: _xmlID::next"][::std::mem::offset_of!(_xmlID, next) - 0usize];
    ["Offset of field: _xmlID::value"][::std::mem::offset_of!(_xmlID, value) - 8usize];
    ["Offset of field: _xmlID::attr"][::std::mem::offset_of!(_xmlID, attr) - 16usize];
    ["Offset of field: _xmlID::name"][::std::mem::offset_of!(_xmlID, name) - 24usize];
    ["Offset of field: _xmlID::lineno"][::std::mem::offset_of!(_xmlID, lineno) - 32usize];
    ["Offset of field: _xmlID::doc"][::std::mem::offset_of!(_xmlID, doc) - 40usize];
};
#[doc = " xmlNode:\n\n A node in an XML tree."]
pub type xmlNode = _xmlNode;
pub type xmlNodePtr = *mut xmlNode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlNode {
    pub _private: *mut ::std::os::raw::c_void,
    pub type_: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub content: *mut xmlChar,
    pub properties: *mut _xmlAttr,
    pub nsDef: *mut xmlNs,
    pub psvi: *mut ::std::os::raw::c_void,
    pub line: ::std::os::raw::c_ushort,
    pub extra: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlNode"][::std::mem::size_of::<_xmlNode>() - 120usize];
    ["Alignment of _xmlNode"][::std::mem::align_of::<_xmlNode>() - 8usize];
    ["Offset of field: _xmlNode::_private"][::std::mem::offset_of!(_xmlNode, _private) - 0usize];
    ["Offset of field: _xmlNode::type_"][::std::mem::offset_of!(_xmlNode, type_) - 8usize];
    ["Offset of field: _xmlNode::name"][::std::mem::offset_of!(_xmlNode, name) - 16usize];
    ["Offset of field: _xmlNode::children"][::std::mem::offset_of!(_xmlNode, children) - 24usize];
    ["Offset of field: _xmlNode::last"][::std::mem::offset_of!(_xmlNode, last) - 32usize];
    ["Offset of field: _xmlNode::parent"][::std::mem::offset_of!(_xmlNode, parent) - 40usize];
    ["Offset of field: _xmlNode::next"][::std::mem::offset_of!(_xmlNode, next) - 48usize];
    ["Offset of field: _xmlNode::prev"][::std::mem::offset_of!(_xmlNode, prev) - 56usize];
    ["Offset of field: _xmlNode::doc"][::std::mem::offset_of!(_xmlNode, doc) - 64usize];
    ["Offset of field: _xmlNode::ns"][::std::mem::offset_of!(_xmlNode, ns) - 72usize];
    ["Offset of field: _xmlNode::content"][::std::mem::offset_of!(_xmlNode, content) - 80usize];
    ["Offset of field: _xmlNode::properties"]
        [::std::mem::offset_of!(_xmlNode, properties) - 88usize];
    ["Offset of field: _xmlNode::nsDef"][::std::mem::offset_of!(_xmlNode, nsDef) - 96usize];
    ["Offset of field: _xmlNode::psvi"][::std::mem::offset_of!(_xmlNode, psvi) - 104usize];
    ["Offset of field: _xmlNode::line"][::std::mem::offset_of!(_xmlNode, line) - 112usize];
    ["Offset of field: _xmlNode::extra"][::std::mem::offset_of!(_xmlNode, extra) - 114usize];
};
#[doc = " xmlDoc:\n\n An XML document."]
pub type xmlDoc = _xmlDoc;
pub type xmlDocPtr = *mut xmlDoc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlDoc {
    pub _private: *mut ::std::os::raw::c_void,
    pub type_: xmlElementType,
    pub name: *mut ::std::os::raw::c_char,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub compression: ::std::os::raw::c_int,
    pub standalone: ::std::os::raw::c_int,
    pub intSubset: *mut _xmlDtd,
    pub extSubset: *mut _xmlDtd,
    pub oldNs: *mut _xmlNs,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub ids: *mut ::std::os::raw::c_void,
    pub refs: *mut ::std::os::raw::c_void,
    pub URL: *const xmlChar,
    pub charset: ::std::os::raw::c_int,
    pub dict: *mut _xmlDict,
    pub psvi: *mut ::std::os::raw::c_void,
    pub parseFlags: ::std::os::raw::c_int,
    pub properties: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlDoc"][::std::mem::size_of::<_xmlDoc>() - 176usize];
    ["Alignment of _xmlDoc"][::std::mem::align_of::<_xmlDoc>() - 8usize];
    ["Offset of field: _xmlDoc::_private"][::std::mem::offset_of!(_xmlDoc, _private) - 0usize];
    ["Offset of field: _xmlDoc::type_"][::std::mem::offset_of!(_xmlDoc, type_) - 8usize];
    ["Offset of field: _xmlDoc::name"][::std::mem::offset_of!(_xmlDoc, name) - 16usize];
    ["Offset of field: _xmlDoc::children"][::std::mem::offset_of!(_xmlDoc, children) - 24usize];
    ["Offset of field: _xmlDoc::last"][::std::mem::offset_of!(_xmlDoc, last) - 32usize];
    ["Offset of field: _xmlDoc::parent"][::std::mem::offset_of!(_xmlDoc, parent) - 40usize];
    ["Offset of field: _xmlDoc::next"][::std::mem::offset_of!(_xmlDoc, next) - 48usize];
    ["Offset of field: _xmlDoc::prev"][::std::mem::offset_of!(_xmlDoc, prev) - 56usize];
    ["Offset of field: _xmlDoc::doc"][::std::mem::offset_of!(_xmlDoc, doc) - 64usize];
    ["Offset of field: _xmlDoc::compression"]
        [::std::mem::offset_of!(_xmlDoc, compression) - 72usize];
    ["Offset of field: _xmlDoc::standalone"][::std::mem::offset_of!(_xmlDoc, standalone) - 76usize];
    ["Offset of field: _xmlDoc::intSubset"][::std::mem::offset_of!(_xmlDoc, intSubset) - 80usize];
    ["Offset of field: _xmlDoc::extSubset"][::std::mem::offset_of!(_xmlDoc, extSubset) - 88usize];
    ["Offset of field: _xmlDoc::oldNs"][::std::mem::offset_of!(_xmlDoc, oldNs) - 96usize];
    ["Offset of field: _xmlDoc::version"][::std::mem::offset_of!(_xmlDoc, version) - 104usize];
    ["Offset of field: _xmlDoc::encoding"][::std::mem::offset_of!(_xmlDoc, encoding) - 112usize];
    ["Offset of field: _xmlDoc::ids"][::std::mem::offset_of!(_xmlDoc, ids) - 120usize];
    ["Offset of field: _xmlDoc::refs"][::std::mem::offset_of!(_xmlDoc, refs) - 128usize];
    ["Offset of field: _xmlDoc::URL"][::std::mem::offset_of!(_xmlDoc, URL) - 136usize];
    ["Offset of field: _xmlDoc::charset"][::std::mem::offset_of!(_xmlDoc, charset) - 144usize];
    ["Offset of field: _xmlDoc::dict"][::std::mem::offset_of!(_xmlDoc, dict) - 152usize];
    ["Offset of field: _xmlDoc::psvi"][::std::mem::offset_of!(_xmlDoc, psvi) - 160usize];
    ["Offset of field: _xmlDoc::parseFlags"]
        [::std::mem::offset_of!(_xmlDoc, parseFlags) - 168usize];
    ["Offset of field: _xmlDoc::properties"]
        [::std::mem::offset_of!(_xmlDoc, properties) - 172usize];
};
pub type xmlDict = _xmlDict;
pub type xmlDictPtr = *mut xmlDict;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlHashTable {
    _unused: [u8; 0],
}
pub type xmlHashTable = _xmlHashTable;
pub type xmlHashTablePtr = *mut xmlHashTable;
pub const xmlErrorLevel_XML_ERR_NONE: xmlErrorLevel = 0;
pub const xmlErrorLevel_XML_ERR_WARNING: xmlErrorLevel = 1;
pub const xmlErrorLevel_XML_ERR_ERROR: xmlErrorLevel = 2;
pub const xmlErrorLevel_XML_ERR_FATAL: xmlErrorLevel = 3;
#[doc = " xmlErrorLevel:\n\n Indicates the level of an error"]
pub type xmlErrorLevel = ::std::os::raw::c_uint;
#[doc = " xmlError:\n\n An XML Error instance."]
pub type xmlError = _xmlError;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlError {
    pub domain: ::std::os::raw::c_int,
    pub code: ::std::os::raw::c_int,
    pub message: *mut ::std::os::raw::c_char,
    pub level: xmlErrorLevel,
    pub file: *mut ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_int,
    pub str1: *mut ::std::os::raw::c_char,
    pub str2: *mut ::std::os::raw::c_char,
    pub str3: *mut ::std::os::raw::c_char,
    pub int1: ::std::os::raw::c_int,
    pub int2: ::std::os::raw::c_int,
    pub ctxt: *mut ::std::os::raw::c_void,
    pub node: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlError"][::std::mem::size_of::<_xmlError>() - 88usize];
    ["Alignment of _xmlError"][::std::mem::align_of::<_xmlError>() - 8usize];
    ["Offset of field: _xmlError::domain"][::std::mem::offset_of!(_xmlError, domain) - 0usize];
    ["Offset of field: _xmlError::code"][::std::mem::offset_of!(_xmlError, code) - 4usize];
    ["Offset of field: _xmlError::message"][::std::mem::offset_of!(_xmlError, message) - 8usize];
    ["Offset of field: _xmlError::level"][::std::mem::offset_of!(_xmlError, level) - 16usize];
    ["Offset of field: _xmlError::file"][::std::mem::offset_of!(_xmlError, file) - 24usize];
    ["Offset of field: _xmlError::line"][::std::mem::offset_of!(_xmlError, line) - 32usize];
    ["Offset of field: _xmlError::str1"][::std::mem::offset_of!(_xmlError, str1) - 40usize];
    ["Offset of field: _xmlError::str2"][::std::mem::offset_of!(_xmlError, str2) - 48usize];
    ["Offset of field: _xmlError::str3"][::std::mem::offset_of!(_xmlError, str3) - 56usize];
    ["Offset of field: _xmlError::int1"][::std::mem::offset_of!(_xmlError, int1) - 64usize];
    ["Offset of field: _xmlError::int2"][::std::mem::offset_of!(_xmlError, int2) - 68usize];
    ["Offset of field: _xmlError::ctxt"][::std::mem::offset_of!(_xmlError, ctxt) - 72usize];
    ["Offset of field: _xmlError::node"][::std::mem::offset_of!(_xmlError, node) - 80usize];
};
#[doc = " xmlStructuredErrorFunc:\n @userData:  user provided data for the error callback\n @error:  the error being raised.\n\n Signature of the function to use when there is an error and\n the module handles the new error reporting mechanism."]
pub type xmlStructuredErrorFunc = ::std::option::Option<
    unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void, error: *const xmlError),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlAutomata {
    _unused: [u8; 0],
}
#[doc = " xmlAutomataPtr:\n\n A libxml automata description, It can be compiled into a regexp"]
pub type xmlAutomata = _xmlAutomata;
pub type xmlAutomataPtr = *mut xmlAutomata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlAutomataState {
    _unused: [u8; 0],
}
#[doc = " xmlAutomataStatePtr:\n\n A state int the automata description,"]
pub type xmlAutomataState = _xmlAutomataState;
pub type xmlAutomataStatePtr = *mut xmlAutomataState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlValidState {
    _unused: [u8; 0],
}
pub type xmlValidState = _xmlValidState;
#[doc = " xmlValidityErrorFunc:\n @ctx:  usually an xmlValidCtxtPtr to a validity error context,\n        but comes from ctxt->userData (which normally contains such\n        a pointer); ctxt->userData can be changed by the user.\n @msg:  the string to format *printf like vararg\n @...:  remaining arguments to the format\n\n Callback called when a validity error is found. This is a message\n oriented function similar to an *printf function."]
pub type xmlValidityErrorFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, msg: *const ::std::os::raw::c_char, ...),
>;
#[doc = " xmlValidityWarningFunc:\n @ctx:  usually an xmlValidCtxtPtr to a validity error context,\n        but comes from ctxt->userData (which normally contains such\n        a pointer); ctxt->userData can be changed by the user.\n @msg:  the string to format *printf like vararg\n @...:  remaining arguments to the format\n\n Callback called when a validity warning is found. This is a message\n oriented function similar to an *printf function."]
pub type xmlValidityWarningFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, msg: *const ::std::os::raw::c_char, ...),
>;
pub type xmlValidCtxt = _xmlValidCtxt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlValidCtxt {
    pub userData: *mut ::std::os::raw::c_void,
    pub error: xmlValidityErrorFunc,
    pub warning: xmlValidityWarningFunc,
    pub node: xmlNodePtr,
    pub nodeNr: ::std::os::raw::c_int,
    pub nodeMax: ::std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
    pub flags: ::std::os::raw::c_uint,
    pub doc: xmlDocPtr,
    pub valid: ::std::os::raw::c_int,
    pub vstate: *mut xmlValidState,
    pub vstateNr: ::std::os::raw::c_int,
    pub vstateMax: ::std::os::raw::c_int,
    pub vstateTab: *mut xmlValidState,
    pub am: xmlAutomataPtr,
    pub state: xmlAutomataStatePtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlValidCtxt"][::std::mem::size_of::<_xmlValidCtxt>() - 112usize];
    ["Alignment of _xmlValidCtxt"][::std::mem::align_of::<_xmlValidCtxt>() - 8usize];
    ["Offset of field: _xmlValidCtxt::userData"]
        [::std::mem::offset_of!(_xmlValidCtxt, userData) - 0usize];
    ["Offset of field: _xmlValidCtxt::error"]
        [::std::mem::offset_of!(_xmlValidCtxt, error) - 8usize];
    ["Offset of field: _xmlValidCtxt::warning"]
        [::std::mem::offset_of!(_xmlValidCtxt, warning) - 16usize];
    ["Offset of field: _xmlValidCtxt::node"][::std::mem::offset_of!(_xmlValidCtxt, node) - 24usize];
    ["Offset of field: _xmlValidCtxt::nodeNr"]
        [::std::mem::offset_of!(_xmlValidCtxt, nodeNr) - 32usize];
    ["Offset of field: _xmlValidCtxt::nodeMax"]
        [::std::mem::offset_of!(_xmlValidCtxt, nodeMax) - 36usize];
    ["Offset of field: _xmlValidCtxt::nodeTab"]
        [::std::mem::offset_of!(_xmlValidCtxt, nodeTab) - 40usize];
    ["Offset of field: _xmlValidCtxt::flags"]
        [::std::mem::offset_of!(_xmlValidCtxt, flags) - 48usize];
    ["Offset of field: _xmlValidCtxt::doc"][::std::mem::offset_of!(_xmlValidCtxt, doc) - 56usize];
    ["Offset of field: _xmlValidCtxt::valid"]
        [::std::mem::offset_of!(_xmlValidCtxt, valid) - 64usize];
    ["Offset of field: _xmlValidCtxt::vstate"]
        [::std::mem::offset_of!(_xmlValidCtxt, vstate) - 72usize];
    ["Offset of field: _xmlValidCtxt::vstateNr"]
        [::std::mem::offset_of!(_xmlValidCtxt, vstateNr) - 80usize];
    ["Offset of field: _xmlValidCtxt::vstateMax"]
        [::std::mem::offset_of!(_xmlValidCtxt, vstateMax) - 84usize];
    ["Offset of field: _xmlValidCtxt::vstateTab"]
        [::std::mem::offset_of!(_xmlValidCtxt, vstateTab) - 88usize];
    ["Offset of field: _xmlValidCtxt::am"][::std::mem::offset_of!(_xmlValidCtxt, am) - 96usize];
    ["Offset of field: _xmlValidCtxt::state"]
        [::std::mem::offset_of!(_xmlValidCtxt, state) - 104usize];
};
pub const xmlEntityType_XML_INTERNAL_GENERAL_ENTITY: xmlEntityType = 1;
pub const xmlEntityType_XML_EXTERNAL_GENERAL_PARSED_ENTITY: xmlEntityType = 2;
pub const xmlEntityType_XML_EXTERNAL_GENERAL_UNPARSED_ENTITY: xmlEntityType = 3;
pub const xmlEntityType_XML_INTERNAL_PARAMETER_ENTITY: xmlEntityType = 4;
pub const xmlEntityType_XML_EXTERNAL_PARAMETER_ENTITY: xmlEntityType = 5;
pub const xmlEntityType_XML_INTERNAL_PREDEFINED_ENTITY: xmlEntityType = 6;
pub type xmlEntityType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlEntity {
    pub _private: *mut ::std::os::raw::c_void,
    pub type_: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDtd,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub orig: *mut xmlChar,
    pub content: *mut xmlChar,
    pub length: ::std::os::raw::c_int,
    pub etype: xmlEntityType,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub nexte: *mut _xmlEntity,
    pub URI: *const xmlChar,
    pub owner: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub expandedSize: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlEntity"][::std::mem::size_of::<_xmlEntity>() - 144usize];
    ["Alignment of _xmlEntity"][::std::mem::align_of::<_xmlEntity>() - 8usize];
    ["Offset of field: _xmlEntity::_private"]
        [::std::mem::offset_of!(_xmlEntity, _private) - 0usize];
    ["Offset of field: _xmlEntity::type_"][::std::mem::offset_of!(_xmlEntity, type_) - 8usize];
    ["Offset of field: _xmlEntity::name"][::std::mem::offset_of!(_xmlEntity, name) - 16usize];
    ["Offset of field: _xmlEntity::children"]
        [::std::mem::offset_of!(_xmlEntity, children) - 24usize];
    ["Offset of field: _xmlEntity::last"][::std::mem::offset_of!(_xmlEntity, last) - 32usize];
    ["Offset of field: _xmlEntity::parent"][::std::mem::offset_of!(_xmlEntity, parent) - 40usize];
    ["Offset of field: _xmlEntity::next"][::std::mem::offset_of!(_xmlEntity, next) - 48usize];
    ["Offset of field: _xmlEntity::prev"][::std::mem::offset_of!(_xmlEntity, prev) - 56usize];
    ["Offset of field: _xmlEntity::doc"][::std::mem::offset_of!(_xmlEntity, doc) - 64usize];
    ["Offset of field: _xmlEntity::orig"][::std::mem::offset_of!(_xmlEntity, orig) - 72usize];
    ["Offset of field: _xmlEntity::content"][::std::mem::offset_of!(_xmlEntity, content) - 80usize];
    ["Offset of field: _xmlEntity::length"][::std::mem::offset_of!(_xmlEntity, length) - 88usize];
    ["Offset of field: _xmlEntity::etype"][::std::mem::offset_of!(_xmlEntity, etype) - 92usize];
    ["Offset of field: _xmlEntity::ExternalID"]
        [::std::mem::offset_of!(_xmlEntity, ExternalID) - 96usize];
    ["Offset of field: _xmlEntity::SystemID"]
        [::std::mem::offset_of!(_xmlEntity, SystemID) - 104usize];
    ["Offset of field: _xmlEntity::nexte"][::std::mem::offset_of!(_xmlEntity, nexte) - 112usize];
    ["Offset of field: _xmlEntity::URI"][::std::mem::offset_of!(_xmlEntity, URI) - 120usize];
    ["Offset of field: _xmlEntity::owner"][::std::mem::offset_of!(_xmlEntity, owner) - 128usize];
    ["Offset of field: _xmlEntity::flags"][::std::mem::offset_of!(_xmlEntity, flags) - 132usize];
    ["Offset of field: _xmlEntity::expandedSize"]
        [::std::mem::offset_of!(_xmlEntity, expandedSize) - 136usize];
};
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __tag_iconv_t {
    _unused: [u8; 0],
}
pub type iconv_t = *mut __tag_iconv_t;
#[doc = " xmlCharEncodingInputFunc:\n @out:  a pointer to an array of bytes to store the UTF-8 result\n @outlen:  the length of @out\n @in:  a pointer to an array of chars in the original encoding\n @inlen:  the length of @in\n\n Take a block of chars in the original encoding and try to convert\n it to an UTF-8 block of chars out.\n\n Returns the number of bytes written, -1 if lack of space, or -2\n     if the transcoding failed.\n The value of @inlen after return is the number of octets consumed\n     if the return value is positive, else unpredictiable.\n The value of @outlen after return is the number of octets consumed."]
pub type xmlCharEncodingInputFunc = ::std::option::Option<
    unsafe extern "C" fn(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_int,
        in_: *const ::std::os::raw::c_uchar,
        inlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlCharEncodingOutputFunc:\n @out:  a pointer to an array of bytes to store the result\n @outlen:  the length of @out\n @in:  a pointer to an array of UTF-8 chars\n @inlen:  the length of @in\n\n Take a block of UTF-8 chars in and try to convert it to another\n encoding.\n Note: a first call designed to produce heading info is called with\n in = NULL. If stateful this should also initialize the encoder state.\n\n Returns the number of bytes written, -1 if lack of space, or -2\n     if the transcoding failed.\n The value of @inlen after return is the number of octets consumed\n     if the return value is positive, else unpredictiable.\n The value of @outlen after return is the number of octets produced."]
pub type xmlCharEncodingOutputFunc = ::std::option::Option<
    unsafe extern "C" fn(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_int,
        in_: *const ::std::os::raw::c_uchar,
        inlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type xmlCharEncodingHandler = _xmlCharEncodingHandler;
pub type xmlCharEncodingHandlerPtr = *mut xmlCharEncodingHandler;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlCharEncodingHandler {
    pub name: *mut ::std::os::raw::c_char,
    pub input: xmlCharEncodingInputFunc,
    pub output: xmlCharEncodingOutputFunc,
    pub iconv_in: iconv_t,
    pub iconv_out: iconv_t,
    pub uconv_in: *mut _uconv_t,
    pub uconv_out: *mut _uconv_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlCharEncodingHandler"][::std::mem::size_of::<_xmlCharEncodingHandler>() - 56usize];
    ["Alignment of _xmlCharEncodingHandler"]
        [::std::mem::align_of::<_xmlCharEncodingHandler>() - 8usize];
    ["Offset of field: _xmlCharEncodingHandler::name"]
        [::std::mem::offset_of!(_xmlCharEncodingHandler, name) - 0usize];
    ["Offset of field: _xmlCharEncodingHandler::input"]
        [::std::mem::offset_of!(_xmlCharEncodingHandler, input) - 8usize];
    ["Offset of field: _xmlCharEncodingHandler::output"]
        [::std::mem::offset_of!(_xmlCharEncodingHandler, output) - 16usize];
    ["Offset of field: _xmlCharEncodingHandler::iconv_in"]
        [::std::mem::offset_of!(_xmlCharEncodingHandler, iconv_in) - 24usize];
    ["Offset of field: _xmlCharEncodingHandler::iconv_out"]
        [::std::mem::offset_of!(_xmlCharEncodingHandler, iconv_out) - 32usize];
    ["Offset of field: _xmlCharEncodingHandler::uconv_in"]
        [::std::mem::offset_of!(_xmlCharEncodingHandler, uconv_in) - 40usize];
    ["Offset of field: _xmlCharEncodingHandler::uconv_out"]
        [::std::mem::offset_of!(_xmlCharEncodingHandler, uconv_out) - 48usize];
};
#[doc = " xmlInputReadCallback:\n @context:  an Input context\n @buffer:  the buffer to store data read\n @len:  the length of the buffer in bytes\n\n Callback used in the I/O Input API to read the resource\n\n Returns the number of bytes read or -1 in case of error"]
pub type xmlInputReadCallback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlInputCloseCallback:\n @context:  an Input context\n\n Callback used in the I/O Input API to close the resource\n\n Returns 0 or -1 in case of error"]
pub type xmlInputCloseCallback = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[doc = " xmlOutputWriteCallback:\n @context:  an Output context\n @buffer:  the buffer of data to write\n @len:  the length of the buffer in bytes\n\n Callback used in the I/O Output API to write to the resource\n\n Returns the number of bytes written or -1 in case of error"]
pub type xmlOutputWriteCallback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlOutputCloseCallback:\n @context:  an Output context\n\n Callback used in the I/O Output API to close the resource\n\n Returns 0 or -1 in case of error"]
pub type xmlOutputCloseCallback = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlParserInputBuffer {
    pub context: *mut ::std::os::raw::c_void,
    pub readcallback: xmlInputReadCallback,
    pub closecallback: xmlInputCloseCallback,
    pub encoder: xmlCharEncodingHandlerPtr,
    pub buffer: xmlBufPtr,
    pub raw: xmlBufPtr,
    pub compressed: ::std::os::raw::c_int,
    pub error: ::std::os::raw::c_int,
    pub rawconsumed: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlParserInputBuffer"][::std::mem::size_of::<_xmlParserInputBuffer>() - 64usize];
    ["Alignment of _xmlParserInputBuffer"]
        [::std::mem::align_of::<_xmlParserInputBuffer>() - 8usize];
    ["Offset of field: _xmlParserInputBuffer::context"]
        [::std::mem::offset_of!(_xmlParserInputBuffer, context) - 0usize];
    ["Offset of field: _xmlParserInputBuffer::readcallback"]
        [::std::mem::offset_of!(_xmlParserInputBuffer, readcallback) - 8usize];
    ["Offset of field: _xmlParserInputBuffer::closecallback"]
        [::std::mem::offset_of!(_xmlParserInputBuffer, closecallback) - 16usize];
    ["Offset of field: _xmlParserInputBuffer::encoder"]
        [::std::mem::offset_of!(_xmlParserInputBuffer, encoder) - 24usize];
    ["Offset of field: _xmlParserInputBuffer::buffer"]
        [::std::mem::offset_of!(_xmlParserInputBuffer, buffer) - 32usize];
    ["Offset of field: _xmlParserInputBuffer::raw"]
        [::std::mem::offset_of!(_xmlParserInputBuffer, raw) - 40usize];
    ["Offset of field: _xmlParserInputBuffer::compressed"]
        [::std::mem::offset_of!(_xmlParserInputBuffer, compressed) - 48usize];
    ["Offset of field: _xmlParserInputBuffer::error"]
        [::std::mem::offset_of!(_xmlParserInputBuffer, error) - 52usize];
    ["Offset of field: _xmlParserInputBuffer::rawconsumed"]
        [::std::mem::offset_of!(_xmlParserInputBuffer, rawconsumed) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlOutputBuffer {
    pub context: *mut ::std::os::raw::c_void,
    pub writecallback: xmlOutputWriteCallback,
    pub closecallback: xmlOutputCloseCallback,
    pub encoder: xmlCharEncodingHandlerPtr,
    pub buffer: xmlBufPtr,
    pub conv: xmlBufPtr,
    pub written: ::std::os::raw::c_int,
    pub error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlOutputBuffer"][::std::mem::size_of::<_xmlOutputBuffer>() - 56usize];
    ["Alignment of _xmlOutputBuffer"][::std::mem::align_of::<_xmlOutputBuffer>() - 8usize];
    ["Offset of field: _xmlOutputBuffer::context"]
        [::std::mem::offset_of!(_xmlOutputBuffer, context) - 0usize];
    ["Offset of field: _xmlOutputBuffer::writecallback"]
        [::std::mem::offset_of!(_xmlOutputBuffer, writecallback) - 8usize];
    ["Offset of field: _xmlOutputBuffer::closecallback"]
        [::std::mem::offset_of!(_xmlOutputBuffer, closecallback) - 16usize];
    ["Offset of field: _xmlOutputBuffer::encoder"]
        [::std::mem::offset_of!(_xmlOutputBuffer, encoder) - 24usize];
    ["Offset of field: _xmlOutputBuffer::buffer"]
        [::std::mem::offset_of!(_xmlOutputBuffer, buffer) - 32usize];
    ["Offset of field: _xmlOutputBuffer::conv"]
        [::std::mem::offset_of!(_xmlOutputBuffer, conv) - 40usize];
    ["Offset of field: _xmlOutputBuffer::written"]
        [::std::mem::offset_of!(_xmlOutputBuffer, written) - 48usize];
    ["Offset of field: _xmlOutputBuffer::error"]
        [::std::mem::offset_of!(_xmlOutputBuffer, error) - 52usize];
};
#[doc = " xmlParserInputDeallocate:\n @str:  the string to deallocate\n\n Callback for freeing some parser input allocations."]
pub type xmlParserInputDeallocate = ::std::option::Option<unsafe extern "C" fn(str_: *mut xmlChar)>;
#[doc = " DOC_DISABLE"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlParserInput {
    pub buf: xmlParserInputBufferPtr,
    pub filename: *const ::std::os::raw::c_char,
    pub directory: *const ::std::os::raw::c_char,
    pub base: *const xmlChar,
    pub cur: *const xmlChar,
    pub end: *const xmlChar,
    pub length: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub col: ::std::os::raw::c_int,
    pub consumed: ::std::os::raw::c_ulong,
    pub free: xmlParserInputDeallocate,
    pub encoding: *const xmlChar,
    pub version: *const xmlChar,
    pub flags: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
    pub parentConsumed: ::std::os::raw::c_ulong,
    pub entity: xmlEntityPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlParserInput"][::std::mem::size_of::<_xmlParserInput>() - 120usize];
    ["Alignment of _xmlParserInput"][::std::mem::align_of::<_xmlParserInput>() - 8usize];
    ["Offset of field: _xmlParserInput::buf"]
        [::std::mem::offset_of!(_xmlParserInput, buf) - 0usize];
    ["Offset of field: _xmlParserInput::filename"]
        [::std::mem::offset_of!(_xmlParserInput, filename) - 8usize];
    ["Offset of field: _xmlParserInput::directory"]
        [::std::mem::offset_of!(_xmlParserInput, directory) - 16usize];
    ["Offset of field: _xmlParserInput::base"]
        [::std::mem::offset_of!(_xmlParserInput, base) - 24usize];
    ["Offset of field: _xmlParserInput::cur"]
        [::std::mem::offset_of!(_xmlParserInput, cur) - 32usize];
    ["Offset of field: _xmlParserInput::end"]
        [::std::mem::offset_of!(_xmlParserInput, end) - 40usize];
    ["Offset of field: _xmlParserInput::length"]
        [::std::mem::offset_of!(_xmlParserInput, length) - 48usize];
    ["Offset of field: _xmlParserInput::line"]
        [::std::mem::offset_of!(_xmlParserInput, line) - 52usize];
    ["Offset of field: _xmlParserInput::col"]
        [::std::mem::offset_of!(_xmlParserInput, col) - 56usize];
    ["Offset of field: _xmlParserInput::consumed"]
        [::std::mem::offset_of!(_xmlParserInput, consumed) - 64usize];
    ["Offset of field: _xmlParserInput::free"]
        [::std::mem::offset_of!(_xmlParserInput, free) - 72usize];
    ["Offset of field: _xmlParserInput::encoding"]
        [::std::mem::offset_of!(_xmlParserInput, encoding) - 80usize];
    ["Offset of field: _xmlParserInput::version"]
        [::std::mem::offset_of!(_xmlParserInput, version) - 88usize];
    ["Offset of field: _xmlParserInput::flags"]
        [::std::mem::offset_of!(_xmlParserInput, flags) - 96usize];
    ["Offset of field: _xmlParserInput::id"]
        [::std::mem::offset_of!(_xmlParserInput, id) - 100usize];
    ["Offset of field: _xmlParserInput::parentConsumed"]
        [::std::mem::offset_of!(_xmlParserInput, parentConsumed) - 104usize];
    ["Offset of field: _xmlParserInput::entity"]
        [::std::mem::offset_of!(_xmlParserInput, entity) - 112usize];
};
#[doc = " xmlParserNodeInfo:\n\n The parser can be asked to collect Node information, i.e. at what\n place in the file they were detected.\n NOTE: This is off by default and not very well tested."]
pub type xmlParserNodeInfo = _xmlParserNodeInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlParserNodeInfo {
    pub node: *const _xmlNode,
    pub begin_pos: ::std::os::raw::c_ulong,
    pub begin_line: ::std::os::raw::c_ulong,
    pub end_pos: ::std::os::raw::c_ulong,
    pub end_line: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlParserNodeInfo"][::std::mem::size_of::<_xmlParserNodeInfo>() - 40usize];
    ["Alignment of _xmlParserNodeInfo"][::std::mem::align_of::<_xmlParserNodeInfo>() - 8usize];
    ["Offset of field: _xmlParserNodeInfo::node"]
        [::std::mem::offset_of!(_xmlParserNodeInfo, node) - 0usize];
    ["Offset of field: _xmlParserNodeInfo::begin_pos"]
        [::std::mem::offset_of!(_xmlParserNodeInfo, begin_pos) - 8usize];
    ["Offset of field: _xmlParserNodeInfo::begin_line"]
        [::std::mem::offset_of!(_xmlParserNodeInfo, begin_line) - 16usize];
    ["Offset of field: _xmlParserNodeInfo::end_pos"]
        [::std::mem::offset_of!(_xmlParserNodeInfo, end_pos) - 24usize];
    ["Offset of field: _xmlParserNodeInfo::end_line"]
        [::std::mem::offset_of!(_xmlParserNodeInfo, end_line) - 32usize];
};
pub type xmlParserNodeInfoSeq = _xmlParserNodeInfoSeq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlParserNodeInfoSeq {
    pub maximum: ::std::os::raw::c_ulong,
    pub length: ::std::os::raw::c_ulong,
    pub buffer: *mut xmlParserNodeInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlParserNodeInfoSeq"][::std::mem::size_of::<_xmlParserNodeInfoSeq>() - 24usize];
    ["Alignment of _xmlParserNodeInfoSeq"]
        [::std::mem::align_of::<_xmlParserNodeInfoSeq>() - 8usize];
    ["Offset of field: _xmlParserNodeInfoSeq::maximum"]
        [::std::mem::offset_of!(_xmlParserNodeInfoSeq, maximum) - 0usize];
    ["Offset of field: _xmlParserNodeInfoSeq::length"]
        [::std::mem::offset_of!(_xmlParserNodeInfoSeq, length) - 8usize];
    ["Offset of field: _xmlParserNodeInfoSeq::buffer"]
        [::std::mem::offset_of!(_xmlParserNodeInfoSeq, buffer) - 16usize];
};
pub const xmlParserInputState_XML_PARSER_EOF: xmlParserInputState = -1;
pub const xmlParserInputState_XML_PARSER_START: xmlParserInputState = 0;
pub const xmlParserInputState_XML_PARSER_MISC: xmlParserInputState = 1;
pub const xmlParserInputState_XML_PARSER_PI: xmlParserInputState = 2;
pub const xmlParserInputState_XML_PARSER_DTD: xmlParserInputState = 3;
pub const xmlParserInputState_XML_PARSER_PROLOG: xmlParserInputState = 4;
pub const xmlParserInputState_XML_PARSER_COMMENT: xmlParserInputState = 5;
pub const xmlParserInputState_XML_PARSER_START_TAG: xmlParserInputState = 6;
pub const xmlParserInputState_XML_PARSER_CONTENT: xmlParserInputState = 7;
pub const xmlParserInputState_XML_PARSER_CDATA_SECTION: xmlParserInputState = 8;
pub const xmlParserInputState_XML_PARSER_END_TAG: xmlParserInputState = 9;
pub const xmlParserInputState_XML_PARSER_ENTITY_DECL: xmlParserInputState = 10;
pub const xmlParserInputState_XML_PARSER_ENTITY_VALUE: xmlParserInputState = 11;
pub const xmlParserInputState_XML_PARSER_ATTRIBUTE_VALUE: xmlParserInputState = 12;
pub const xmlParserInputState_XML_PARSER_SYSTEM_LITERAL: xmlParserInputState = 13;
pub const xmlParserInputState_XML_PARSER_EPILOG: xmlParserInputState = 14;
pub const xmlParserInputState_XML_PARSER_IGNORE: xmlParserInputState = 15;
pub const xmlParserInputState_XML_PARSER_PUBLIC_LITERAL: xmlParserInputState = 16;
pub const xmlParserInputState_XML_PARSER_XML_DECL: xmlParserInputState = 17;
#[doc = " xmlParserInputState:\n\n The parser is now working also as a state based parser.\n The recursive one use the state info for entities processing."]
pub type xmlParserInputState = ::std::os::raw::c_int;
pub const xmlParserMode_XML_PARSE_UNKNOWN: xmlParserMode = 0;
pub const xmlParserMode_XML_PARSE_DOM: xmlParserMode = 1;
pub const xmlParserMode_XML_PARSE_SAX: xmlParserMode = 2;
pub const xmlParserMode_XML_PARSE_PUSH_DOM: xmlParserMode = 3;
pub const xmlParserMode_XML_PARSE_PUSH_SAX: xmlParserMode = 4;
pub const xmlParserMode_XML_PARSE_READER: xmlParserMode = 5;
#[doc = " xmlParserMode:\n\n A parser can operate in various modes"]
pub type xmlParserMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlStartTag {
    _unused: [u8; 0],
}
pub type xmlStartTag = _xmlStartTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlParserNsData {
    _unused: [u8; 0],
}
pub type xmlParserNsData = _xmlParserNsData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlAttrHashBucket {
    _unused: [u8; 0],
}
pub type xmlAttrHashBucket = _xmlAttrHashBucket;
#[doc = " xmlParserCtxt:\n\n The parser context.\n NOTE This doesn't completely define the parser state, the (current ?)\n      design of the parser uses recursive function calls since this allow\n      and easy mapping from the production rules of the specification\n      to the actual code. The drawback is that the actual function call\n      also reflect the parser state. However most of the parsing routines\n      takes as the only argument the parser context pointer, so migrating\n      to a state based parser for progressive parsing shouldn't be too hard."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlParserCtxt {
    pub sax: *mut _xmlSAXHandler,
    pub userData: *mut ::std::os::raw::c_void,
    pub myDoc: xmlDocPtr,
    pub wellFormed: ::std::os::raw::c_int,
    pub replaceEntities: ::std::os::raw::c_int,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub standalone: ::std::os::raw::c_int,
    pub html: ::std::os::raw::c_int,
    pub input: xmlParserInputPtr,
    pub inputNr: ::std::os::raw::c_int,
    pub inputMax: ::std::os::raw::c_int,
    pub inputTab: *mut xmlParserInputPtr,
    pub node: xmlNodePtr,
    pub nodeNr: ::std::os::raw::c_int,
    pub nodeMax: ::std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
    pub record_info: ::std::os::raw::c_int,
    pub node_seq: xmlParserNodeInfoSeq,
    pub errNo: ::std::os::raw::c_int,
    pub hasExternalSubset: ::std::os::raw::c_int,
    pub hasPErefs: ::std::os::raw::c_int,
    pub external: ::std::os::raw::c_int,
    pub valid: ::std::os::raw::c_int,
    pub validate: ::std::os::raw::c_int,
    pub vctxt: xmlValidCtxt,
    pub instate: xmlParserInputState,
    pub token: ::std::os::raw::c_int,
    pub directory: *mut ::std::os::raw::c_char,
    pub name: *const xmlChar,
    pub nameNr: ::std::os::raw::c_int,
    pub nameMax: ::std::os::raw::c_int,
    pub nameTab: *mut *const xmlChar,
    pub nbChars: ::std::os::raw::c_long,
    pub checkIndex: ::std::os::raw::c_long,
    pub keepBlanks: ::std::os::raw::c_int,
    pub disableSAX: ::std::os::raw::c_int,
    pub inSubset: ::std::os::raw::c_int,
    pub intSubName: *const xmlChar,
    pub extSubURI: *mut xmlChar,
    pub extSubSystem: *mut xmlChar,
    pub space: *mut ::std::os::raw::c_int,
    pub spaceNr: ::std::os::raw::c_int,
    pub spaceMax: ::std::os::raw::c_int,
    pub spaceTab: *mut ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub entity: xmlParserInputPtr,
    pub charset: ::std::os::raw::c_int,
    pub nodelen: ::std::os::raw::c_int,
    pub nodemem: ::std::os::raw::c_int,
    pub pedantic: ::std::os::raw::c_int,
    pub _private: *mut ::std::os::raw::c_void,
    pub loadsubset: ::std::os::raw::c_int,
    pub linenumbers: ::std::os::raw::c_int,
    pub catalogs: *mut ::std::os::raw::c_void,
    pub recovery: ::std::os::raw::c_int,
    pub progressive: ::std::os::raw::c_int,
    pub dict: xmlDictPtr,
    pub atts: *mut *const xmlChar,
    pub maxatts: ::std::os::raw::c_int,
    pub docdict: ::std::os::raw::c_int,
    pub str_xml: *const xmlChar,
    pub str_xmlns: *const xmlChar,
    pub str_xml_ns: *const xmlChar,
    pub sax2: ::std::os::raw::c_int,
    pub nsNr: ::std::os::raw::c_int,
    pub nsMax: ::std::os::raw::c_int,
    pub nsTab: *mut *const xmlChar,
    pub attallocs: *mut ::std::os::raw::c_uint,
    pub pushTab: *mut xmlStartTag,
    pub attsDefault: xmlHashTablePtr,
    pub attsSpecial: xmlHashTablePtr,
    pub nsWellFormed: ::std::os::raw::c_int,
    pub options: ::std::os::raw::c_int,
    pub dictNames: ::std::os::raw::c_int,
    pub freeElemsNr: ::std::os::raw::c_int,
    pub freeElems: xmlNodePtr,
    pub freeAttrsNr: ::std::os::raw::c_int,
    pub freeAttrs: xmlAttrPtr,
    pub lastError: xmlError,
    pub parseMode: xmlParserMode,
    pub nbentities: ::std::os::raw::c_ulong,
    pub sizeentities: ::std::os::raw::c_ulong,
    pub nodeInfo: *mut xmlParserNodeInfo,
    pub nodeInfoNr: ::std::os::raw::c_int,
    pub nodeInfoMax: ::std::os::raw::c_int,
    pub nodeInfoTab: *mut xmlParserNodeInfo,
    pub input_id: ::std::os::raw::c_int,
    pub sizeentcopy: ::std::os::raw::c_ulong,
    pub endCheckState: ::std::os::raw::c_int,
    pub nbErrors: ::std::os::raw::c_ushort,
    pub nbWarnings: ::std::os::raw::c_ushort,
    pub maxAmpl: ::std::os::raw::c_uint,
    pub nsdb: *mut xmlParserNsData,
    pub attrHashMax: ::std::os::raw::c_uint,
    pub attrHash: *mut xmlAttrHashBucket,
    pub errorHandler: xmlStructuredErrorFunc,
    pub errorCtxt: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlParserCtxt"][::std::mem::size_of::<_xmlParserCtxt>() - 808usize];
    ["Alignment of _xmlParserCtxt"][::std::mem::align_of::<_xmlParserCtxt>() - 8usize];
    ["Offset of field: _xmlParserCtxt::sax"][::std::mem::offset_of!(_xmlParserCtxt, sax) - 0usize];
    ["Offset of field: _xmlParserCtxt::userData"]
        [::std::mem::offset_of!(_xmlParserCtxt, userData) - 8usize];
    ["Offset of field: _xmlParserCtxt::myDoc"]
        [::std::mem::offset_of!(_xmlParserCtxt, myDoc) - 16usize];
    ["Offset of field: _xmlParserCtxt::wellFormed"]
        [::std::mem::offset_of!(_xmlParserCtxt, wellFormed) - 24usize];
    ["Offset of field: _xmlParserCtxt::replaceEntities"]
        [::std::mem::offset_of!(_xmlParserCtxt, replaceEntities) - 28usize];
    ["Offset of field: _xmlParserCtxt::version"]
        [::std::mem::offset_of!(_xmlParserCtxt, version) - 32usize];
    ["Offset of field: _xmlParserCtxt::encoding"]
        [::std::mem::offset_of!(_xmlParserCtxt, encoding) - 40usize];
    ["Offset of field: _xmlParserCtxt::standalone"]
        [::std::mem::offset_of!(_xmlParserCtxt, standalone) - 48usize];
    ["Offset of field: _xmlParserCtxt::html"]
        [::std::mem::offset_of!(_xmlParserCtxt, html) - 52usize];
    ["Offset of field: _xmlParserCtxt::input"]
        [::std::mem::offset_of!(_xmlParserCtxt, input) - 56usize];
    ["Offset of field: _xmlParserCtxt::inputNr"]
        [::std::mem::offset_of!(_xmlParserCtxt, inputNr) - 64usize];
    ["Offset of field: _xmlParserCtxt::inputMax"]
        [::std::mem::offset_of!(_xmlParserCtxt, inputMax) - 68usize];
    ["Offset of field: _xmlParserCtxt::inputTab"]
        [::std::mem::offset_of!(_xmlParserCtxt, inputTab) - 72usize];
    ["Offset of field: _xmlParserCtxt::node"]
        [::std::mem::offset_of!(_xmlParserCtxt, node) - 80usize];
    ["Offset of field: _xmlParserCtxt::nodeNr"]
        [::std::mem::offset_of!(_xmlParserCtxt, nodeNr) - 88usize];
    ["Offset of field: _xmlParserCtxt::nodeMax"]
        [::std::mem::offset_of!(_xmlParserCtxt, nodeMax) - 92usize];
    ["Offset of field: _xmlParserCtxt::nodeTab"]
        [::std::mem::offset_of!(_xmlParserCtxt, nodeTab) - 96usize];
    ["Offset of field: _xmlParserCtxt::record_info"]
        [::std::mem::offset_of!(_xmlParserCtxt, record_info) - 104usize];
    ["Offset of field: _xmlParserCtxt::node_seq"]
        [::std::mem::offset_of!(_xmlParserCtxt, node_seq) - 112usize];
    ["Offset of field: _xmlParserCtxt::errNo"]
        [::std::mem::offset_of!(_xmlParserCtxt, errNo) - 136usize];
    ["Offset of field: _xmlParserCtxt::hasExternalSubset"]
        [::std::mem::offset_of!(_xmlParserCtxt, hasExternalSubset) - 140usize];
    ["Offset of field: _xmlParserCtxt::hasPErefs"]
        [::std::mem::offset_of!(_xmlParserCtxt, hasPErefs) - 144usize];
    ["Offset of field: _xmlParserCtxt::external"]
        [::std::mem::offset_of!(_xmlParserCtxt, external) - 148usize];
    ["Offset of field: _xmlParserCtxt::valid"]
        [::std::mem::offset_of!(_xmlParserCtxt, valid) - 152usize];
    ["Offset of field: _xmlParserCtxt::validate"]
        [::std::mem::offset_of!(_xmlParserCtxt, validate) - 156usize];
    ["Offset of field: _xmlParserCtxt::vctxt"]
        [::std::mem::offset_of!(_xmlParserCtxt, vctxt) - 160usize];
    ["Offset of field: _xmlParserCtxt::instate"]
        [::std::mem::offset_of!(_xmlParserCtxt, instate) - 272usize];
    ["Offset of field: _xmlParserCtxt::token"]
        [::std::mem::offset_of!(_xmlParserCtxt, token) - 276usize];
    ["Offset of field: _xmlParserCtxt::directory"]
        [::std::mem::offset_of!(_xmlParserCtxt, directory) - 280usize];
    ["Offset of field: _xmlParserCtxt::name"]
        [::std::mem::offset_of!(_xmlParserCtxt, name) - 288usize];
    ["Offset of field: _xmlParserCtxt::nameNr"]
        [::std::mem::offset_of!(_xmlParserCtxt, nameNr) - 296usize];
    ["Offset of field: _xmlParserCtxt::nameMax"]
        [::std::mem::offset_of!(_xmlParserCtxt, nameMax) - 300usize];
    ["Offset of field: _xmlParserCtxt::nameTab"]
        [::std::mem::offset_of!(_xmlParserCtxt, nameTab) - 304usize];
    ["Offset of field: _xmlParserCtxt::nbChars"]
        [::std::mem::offset_of!(_xmlParserCtxt, nbChars) - 312usize];
    ["Offset of field: _xmlParserCtxt::checkIndex"]
        [::std::mem::offset_of!(_xmlParserCtxt, checkIndex) - 320usize];
    ["Offset of field: _xmlParserCtxt::keepBlanks"]
        [::std::mem::offset_of!(_xmlParserCtxt, keepBlanks) - 328usize];
    ["Offset of field: _xmlParserCtxt::disableSAX"]
        [::std::mem::offset_of!(_xmlParserCtxt, disableSAX) - 332usize];
    ["Offset of field: _xmlParserCtxt::inSubset"]
        [::std::mem::offset_of!(_xmlParserCtxt, inSubset) - 336usize];
    ["Offset of field: _xmlParserCtxt::intSubName"]
        [::std::mem::offset_of!(_xmlParserCtxt, intSubName) - 344usize];
    ["Offset of field: _xmlParserCtxt::extSubURI"]
        [::std::mem::offset_of!(_xmlParserCtxt, extSubURI) - 352usize];
    ["Offset of field: _xmlParserCtxt::extSubSystem"]
        [::std::mem::offset_of!(_xmlParserCtxt, extSubSystem) - 360usize];
    ["Offset of field: _xmlParserCtxt::space"]
        [::std::mem::offset_of!(_xmlParserCtxt, space) - 368usize];
    ["Offset of field: _xmlParserCtxt::spaceNr"]
        [::std::mem::offset_of!(_xmlParserCtxt, spaceNr) - 376usize];
    ["Offset of field: _xmlParserCtxt::spaceMax"]
        [::std::mem::offset_of!(_xmlParserCtxt, spaceMax) - 380usize];
    ["Offset of field: _xmlParserCtxt::spaceTab"]
        [::std::mem::offset_of!(_xmlParserCtxt, spaceTab) - 384usize];
    ["Offset of field: _xmlParserCtxt::depth"]
        [::std::mem::offset_of!(_xmlParserCtxt, depth) - 392usize];
    ["Offset of field: _xmlParserCtxt::entity"]
        [::std::mem::offset_of!(_xmlParserCtxt, entity) - 400usize];
    ["Offset of field: _xmlParserCtxt::charset"]
        [::std::mem::offset_of!(_xmlParserCtxt, charset) - 408usize];
    ["Offset of field: _xmlParserCtxt::nodelen"]
        [::std::mem::offset_of!(_xmlParserCtxt, nodelen) - 412usize];
    ["Offset of field: _xmlParserCtxt::nodemem"]
        [::std::mem::offset_of!(_xmlParserCtxt, nodemem) - 416usize];
    ["Offset of field: _xmlParserCtxt::pedantic"]
        [::std::mem::offset_of!(_xmlParserCtxt, pedantic) - 420usize];
    ["Offset of field: _xmlParserCtxt::_private"]
        [::std::mem::offset_of!(_xmlParserCtxt, _private) - 424usize];
    ["Offset of field: _xmlParserCtxt::loadsubset"]
        [::std::mem::offset_of!(_xmlParserCtxt, loadsubset) - 432usize];
    ["Offset of field: _xmlParserCtxt::linenumbers"]
        [::std::mem::offset_of!(_xmlParserCtxt, linenumbers) - 436usize];
    ["Offset of field: _xmlParserCtxt::catalogs"]
        [::std::mem::offset_of!(_xmlParserCtxt, catalogs) - 440usize];
    ["Offset of field: _xmlParserCtxt::recovery"]
        [::std::mem::offset_of!(_xmlParserCtxt, recovery) - 448usize];
    ["Offset of field: _xmlParserCtxt::progressive"]
        [::std::mem::offset_of!(_xmlParserCtxt, progressive) - 452usize];
    ["Offset of field: _xmlParserCtxt::dict"]
        [::std::mem::offset_of!(_xmlParserCtxt, dict) - 456usize];
    ["Offset of field: _xmlParserCtxt::atts"]
        [::std::mem::offset_of!(_xmlParserCtxt, atts) - 464usize];
    ["Offset of field: _xmlParserCtxt::maxatts"]
        [::std::mem::offset_of!(_xmlParserCtxt, maxatts) - 472usize];
    ["Offset of field: _xmlParserCtxt::docdict"]
        [::std::mem::offset_of!(_xmlParserCtxt, docdict) - 476usize];
    ["Offset of field: _xmlParserCtxt::str_xml"]
        [::std::mem::offset_of!(_xmlParserCtxt, str_xml) - 480usize];
    ["Offset of field: _xmlParserCtxt::str_xmlns"]
        [::std::mem::offset_of!(_xmlParserCtxt, str_xmlns) - 488usize];
    ["Offset of field: _xmlParserCtxt::str_xml_ns"]
        [::std::mem::offset_of!(_xmlParserCtxt, str_xml_ns) - 496usize];
    ["Offset of field: _xmlParserCtxt::sax2"]
        [::std::mem::offset_of!(_xmlParserCtxt, sax2) - 504usize];
    ["Offset of field: _xmlParserCtxt::nsNr"]
        [::std::mem::offset_of!(_xmlParserCtxt, nsNr) - 508usize];
    ["Offset of field: _xmlParserCtxt::nsMax"]
        [::std::mem::offset_of!(_xmlParserCtxt, nsMax) - 512usize];
    ["Offset of field: _xmlParserCtxt::nsTab"]
        [::std::mem::offset_of!(_xmlParserCtxt, nsTab) - 520usize];
    ["Offset of field: _xmlParserCtxt::attallocs"]
        [::std::mem::offset_of!(_xmlParserCtxt, attallocs) - 528usize];
    ["Offset of field: _xmlParserCtxt::pushTab"]
        [::std::mem::offset_of!(_xmlParserCtxt, pushTab) - 536usize];
    ["Offset of field: _xmlParserCtxt::attsDefault"]
        [::std::mem::offset_of!(_xmlParserCtxt, attsDefault) - 544usize];
    ["Offset of field: _xmlParserCtxt::attsSpecial"]
        [::std::mem::offset_of!(_xmlParserCtxt, attsSpecial) - 552usize];
    ["Offset of field: _xmlParserCtxt::nsWellFormed"]
        [::std::mem::offset_of!(_xmlParserCtxt, nsWellFormed) - 560usize];
    ["Offset of field: _xmlParserCtxt::options"]
        [::std::mem::offset_of!(_xmlParserCtxt, options) - 564usize];
    ["Offset of field: _xmlParserCtxt::dictNames"]
        [::std::mem::offset_of!(_xmlParserCtxt, dictNames) - 568usize];
    ["Offset of field: _xmlParserCtxt::freeElemsNr"]
        [::std::mem::offset_of!(_xmlParserCtxt, freeElemsNr) - 572usize];
    ["Offset of field: _xmlParserCtxt::freeElems"]
        [::std::mem::offset_of!(_xmlParserCtxt, freeElems) - 576usize];
    ["Offset of field: _xmlParserCtxt::freeAttrsNr"]
        [::std::mem::offset_of!(_xmlParserCtxt, freeAttrsNr) - 584usize];
    ["Offset of field: _xmlParserCtxt::freeAttrs"]
        [::std::mem::offset_of!(_xmlParserCtxt, freeAttrs) - 592usize];
    ["Offset of field: _xmlParserCtxt::lastError"]
        [::std::mem::offset_of!(_xmlParserCtxt, lastError) - 600usize];
    ["Offset of field: _xmlParserCtxt::parseMode"]
        [::std::mem::offset_of!(_xmlParserCtxt, parseMode) - 688usize];
    ["Offset of field: _xmlParserCtxt::nbentities"]
        [::std::mem::offset_of!(_xmlParserCtxt, nbentities) - 696usize];
    ["Offset of field: _xmlParserCtxt::sizeentities"]
        [::std::mem::offset_of!(_xmlParserCtxt, sizeentities) - 704usize];
    ["Offset of field: _xmlParserCtxt::nodeInfo"]
        [::std::mem::offset_of!(_xmlParserCtxt, nodeInfo) - 712usize];
    ["Offset of field: _xmlParserCtxt::nodeInfoNr"]
        [::std::mem::offset_of!(_xmlParserCtxt, nodeInfoNr) - 720usize];
    ["Offset of field: _xmlParserCtxt::nodeInfoMax"]
        [::std::mem::offset_of!(_xmlParserCtxt, nodeInfoMax) - 724usize];
    ["Offset of field: _xmlParserCtxt::nodeInfoTab"]
        [::std::mem::offset_of!(_xmlParserCtxt, nodeInfoTab) - 728usize];
    ["Offset of field: _xmlParserCtxt::input_id"]
        [::std::mem::offset_of!(_xmlParserCtxt, input_id) - 736usize];
    ["Offset of field: _xmlParserCtxt::sizeentcopy"]
        [::std::mem::offset_of!(_xmlParserCtxt, sizeentcopy) - 744usize];
    ["Offset of field: _xmlParserCtxt::endCheckState"]
        [::std::mem::offset_of!(_xmlParserCtxt, endCheckState) - 752usize];
    ["Offset of field: _xmlParserCtxt::nbErrors"]
        [::std::mem::offset_of!(_xmlParserCtxt, nbErrors) - 756usize];
    ["Offset of field: _xmlParserCtxt::nbWarnings"]
        [::std::mem::offset_of!(_xmlParserCtxt, nbWarnings) - 758usize];
    ["Offset of field: _xmlParserCtxt::maxAmpl"]
        [::std::mem::offset_of!(_xmlParserCtxt, maxAmpl) - 760usize];
    ["Offset of field: _xmlParserCtxt::nsdb"]
        [::std::mem::offset_of!(_xmlParserCtxt, nsdb) - 768usize];
    ["Offset of field: _xmlParserCtxt::attrHashMax"]
        [::std::mem::offset_of!(_xmlParserCtxt, attrHashMax) - 776usize];
    ["Offset of field: _xmlParserCtxt::attrHash"]
        [::std::mem::offset_of!(_xmlParserCtxt, attrHash) - 784usize];
    ["Offset of field: _xmlParserCtxt::errorHandler"]
        [::std::mem::offset_of!(_xmlParserCtxt, errorHandler) - 792usize];
    ["Offset of field: _xmlParserCtxt::errorCtxt"]
        [::std::mem::offset_of!(_xmlParserCtxt, errorCtxt) - 800usize];
};
#[doc = " xmlSAXLocator:\n\n A SAX Locator."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSAXLocator {
    pub getPublicId: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> *const xmlChar,
    >,
    pub getSystemId: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> *const xmlChar,
    >,
    pub getLineNumber: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub getColumnNumber: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSAXLocator"][::std::mem::size_of::<_xmlSAXLocator>() - 32usize];
    ["Alignment of _xmlSAXLocator"][::std::mem::align_of::<_xmlSAXLocator>() - 8usize];
    ["Offset of field: _xmlSAXLocator::getPublicId"]
        [::std::mem::offset_of!(_xmlSAXLocator, getPublicId) - 0usize];
    ["Offset of field: _xmlSAXLocator::getSystemId"]
        [::std::mem::offset_of!(_xmlSAXLocator, getSystemId) - 8usize];
    ["Offset of field: _xmlSAXLocator::getLineNumber"]
        [::std::mem::offset_of!(_xmlSAXLocator, getLineNumber) - 16usize];
    ["Offset of field: _xmlSAXLocator::getColumnNumber"]
        [::std::mem::offset_of!(_xmlSAXLocator, getColumnNumber) - 24usize];
};
#[doc = " resolveEntitySAXFunc:\n @ctx:  the user data (XML parser context)\n @publicId: The public ID of the entity\n @systemId: The system ID of the entity\n\n Callback:\n The entity loader, to control the loading of external entities,\n the application can either:\n    - override this resolveEntity() callback in the SAX block\n    - or better use the xmlSetExternalEntityLoader() function to\n      set up it's own entity resolution routine\n\n Returns the xmlParserInputPtr if inlined or NULL for DOM behaviour."]
pub type resolveEntitySAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        publicId: *const xmlChar,
        systemId: *const xmlChar,
    ) -> xmlParserInputPtr,
>;
#[doc = " internalSubsetSAXFunc:\n @ctx:  the user data (XML parser context)\n @name:  the root element name\n @ExternalID:  the external ID\n @SystemID:  the SYSTEM ID (e.g. filename or URL)\n\n Callback on internal subset declaration."]
pub type internalSubsetSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        name: *const xmlChar,
        ExternalID: *const xmlChar,
        SystemID: *const xmlChar,
    ),
>;
#[doc = " externalSubsetSAXFunc:\n @ctx:  the user data (XML parser context)\n @name:  the root element name\n @ExternalID:  the external ID\n @SystemID:  the SYSTEM ID (e.g. filename or URL)\n\n Callback on external subset declaration."]
pub type externalSubsetSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        name: *const xmlChar,
        ExternalID: *const xmlChar,
        SystemID: *const xmlChar,
    ),
>;
#[doc = " getEntitySAXFunc:\n @ctx:  the user data (XML parser context)\n @name: The entity name\n\n Get an entity by name.\n\n Returns the xmlEntityPtr if found."]
pub type getEntitySAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, name: *const xmlChar) -> xmlEntityPtr,
>;
#[doc = " getParameterEntitySAXFunc:\n @ctx:  the user data (XML parser context)\n @name: The entity name\n\n Get a parameter entity by name.\n\n Returns the xmlEntityPtr if found."]
pub type getParameterEntitySAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, name: *const xmlChar) -> xmlEntityPtr,
>;
#[doc = " entityDeclSAXFunc:\n @ctx:  the user data (XML parser context)\n @name:  the entity name\n @type:  the entity type\n @publicId: The public ID of the entity\n @systemId: The system ID of the entity\n @content: the entity value (without processing).\n\n An entity definition has been parsed."]
pub type entityDeclSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        name: *const xmlChar,
        type_: ::std::os::raw::c_int,
        publicId: *const xmlChar,
        systemId: *const xmlChar,
        content: *mut xmlChar,
    ),
>;
#[doc = " notationDeclSAXFunc:\n @ctx:  the user data (XML parser context)\n @name: The name of the notation\n @publicId: The public ID of the entity\n @systemId: The system ID of the entity\n\n What to do when a notation declaration has been parsed."]
pub type notationDeclSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        name: *const xmlChar,
        publicId: *const xmlChar,
        systemId: *const xmlChar,
    ),
>;
#[doc = " attributeDeclSAXFunc:\n @ctx:  the user data (XML parser context)\n @elem:  the name of the element\n @fullname:  the attribute name\n @type:  the attribute type\n @def:  the type of default value\n @defaultValue: the attribute default value\n @tree:  the tree of enumerated value set\n\n An attribute definition has been parsed."]
pub type attributeDeclSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        elem: *const xmlChar,
        fullname: *const xmlChar,
        type_: ::std::os::raw::c_int,
        def: ::std::os::raw::c_int,
        defaultValue: *const xmlChar,
        tree: xmlEnumerationPtr,
    ),
>;
#[doc = " elementDeclSAXFunc:\n @ctx:  the user data (XML parser context)\n @name:  the element name\n @type:  the element type\n @content: the element value tree\n\n An element definition has been parsed."]
pub type elementDeclSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        name: *const xmlChar,
        type_: ::std::os::raw::c_int,
        content: xmlElementContentPtr,
    ),
>;
#[doc = " unparsedEntityDeclSAXFunc:\n @ctx:  the user data (XML parser context)\n @name: The name of the entity\n @publicId: The public ID of the entity\n @systemId: The system ID of the entity\n @notationName: the name of the notation\n\n What to do when an unparsed entity declaration is parsed."]
pub type unparsedEntityDeclSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        name: *const xmlChar,
        publicId: *const xmlChar,
        systemId: *const xmlChar,
        notationName: *const xmlChar,
    ),
>;
#[doc = " setDocumentLocatorSAXFunc:\n @ctx:  the user data (XML parser context)\n @loc: A SAX Locator\n\n Receive the document locator at startup, actually xmlDefaultSAXLocator.\n Everything is available on the context, so this is useless in our case."]
pub type setDocumentLocatorSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, loc: xmlSAXLocatorPtr),
>;
#[doc = " startDocumentSAXFunc:\n @ctx:  the user data (XML parser context)\n\n Called when the document start being processed."]
pub type startDocumentSAXFunc =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void)>;
#[doc = " endDocumentSAXFunc:\n @ctx:  the user data (XML parser context)\n\n Called when the document end has been detected."]
pub type endDocumentSAXFunc =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void)>;
#[doc = " startElementSAXFunc:\n @ctx:  the user data (XML parser context)\n @name:  The element name, including namespace prefix\n @atts:  An array of name/value attributes pairs, NULL terminated\n\n Called when an opening tag has been processed."]
pub type startElementSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        name: *const xmlChar,
        atts: *mut *const xmlChar,
    ),
>;
#[doc = " endElementSAXFunc:\n @ctx:  the user data (XML parser context)\n @name:  The element name\n\n Called when the end of an element has been detected."]
pub type endElementSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, name: *const xmlChar),
>;
#[doc = " referenceSAXFunc:\n @ctx:  the user data (XML parser context)\n @name:  The entity name\n\n Called when an entity reference is detected."]
pub type referenceSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, name: *const xmlChar),
>;
#[doc = " charactersSAXFunc:\n @ctx:  the user data (XML parser context)\n @ch:  a xmlChar string\n @len: the number of xmlChar\n\n Receiving some chars from the parser."]
pub type charactersSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        ch: *const xmlChar,
        len: ::std::os::raw::c_int,
    ),
>;
#[doc = " ignorableWhitespaceSAXFunc:\n @ctx:  the user data (XML parser context)\n @ch:  a xmlChar string\n @len: the number of xmlChar\n\n Receiving some ignorable whitespaces from the parser.\n UNUSED: by default the DOM building will use characters."]
pub type ignorableWhitespaceSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        ch: *const xmlChar,
        len: ::std::os::raw::c_int,
    ),
>;
#[doc = " processingInstructionSAXFunc:\n @ctx:  the user data (XML parser context)\n @target:  the target name\n @data: the PI data's\n\n A processing instruction has been parsed."]
pub type processingInstructionSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        target: *const xmlChar,
        data: *const xmlChar,
    ),
>;
#[doc = " commentSAXFunc:\n @ctx:  the user data (XML parser context)\n @value:  the comment content\n\n A comment has been parsed."]
pub type commentSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, value: *const xmlChar),
>;
#[doc = " cdataBlockSAXFunc:\n @ctx:  the user data (XML parser context)\n @value:  The pcdata content\n @len:  the block length\n\n Called when a pcdata block has been parsed."]
pub type cdataBlockSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        value: *const xmlChar,
        len: ::std::os::raw::c_int,
    ),
>;
#[doc = " warningSAXFunc:\n @ctx:  an XML parser context\n @msg:  the message to display/transmit\n @...:  extra parameters for the message display\n\n Display and format a warning messages, callback."]
pub type warningSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, msg: *const ::std::os::raw::c_char, ...),
>;
#[doc = " errorSAXFunc:\n @ctx:  an XML parser context\n @msg:  the message to display/transmit\n @...:  extra parameters for the message display\n\n Display and format an error messages, callback."]
pub type errorSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, msg: *const ::std::os::raw::c_char, ...),
>;
#[doc = " fatalErrorSAXFunc:\n @ctx:  an XML parser context\n @msg:  the message to display/transmit\n @...:  extra parameters for the message display\n\n Display and format fatal error messages, callback.\n Note: so far fatalError() SAX callbacks are not used, error()\n       get all the callbacks for errors."]
pub type fatalErrorSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, msg: *const ::std::os::raw::c_char, ...),
>;
#[doc = " isStandaloneSAXFunc:\n @ctx:  the user data (XML parser context)\n\n Is this document tagged standalone?\n\n Returns 1 if true"]
pub type isStandaloneSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[doc = " hasInternalSubsetSAXFunc:\n @ctx:  the user data (XML parser context)\n\n Does this document has an internal subset.\n\n Returns 1 if true"]
pub type hasInternalSubsetSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[doc = " hasExternalSubsetSAXFunc:\n @ctx:  the user data (XML parser context)\n\n Does this document has an external subset?\n\n Returns 1 if true"]
pub type hasExternalSubsetSAXFunc = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[doc = " startElementNsSAX2Func:\n @ctx:  the user data (XML parser context)\n @localname:  the local name of the element\n @prefix:  the element namespace prefix if available\n @URI:  the element namespace name if available\n @nb_namespaces:  number of namespace definitions on that node\n @namespaces:  pointer to the array of prefix/URI pairs namespace definitions\n @nb_attributes:  the number of attributes on that node\n @nb_defaulted:  the number of defaulted attributes. The defaulted\n                  ones are at the end of the array\n @attributes:  pointer to the array of (localname/prefix/URI/value/end)\n               attribute values.\n\n SAX2 callback when an element start has been detected by the parser.\n It provides the namespace information for the element, as well as\n the new namespace declarations on the element."]
pub type startElementNsSAX2Func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        localname: *const xmlChar,
        prefix: *const xmlChar,
        URI: *const xmlChar,
        nb_namespaces: ::std::os::raw::c_int,
        namespaces: *mut *const xmlChar,
        nb_attributes: ::std::os::raw::c_int,
        nb_defaulted: ::std::os::raw::c_int,
        attributes: *mut *const xmlChar,
    ),
>;
#[doc = " endElementNsSAX2Func:\n @ctx:  the user data (XML parser context)\n @localname:  the local name of the element\n @prefix:  the element namespace prefix if available\n @URI:  the element namespace name if available\n\n SAX2 callback when an element end has been detected by the parser.\n It provides the namespace information for the element."]
pub type endElementNsSAX2Func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        localname: *const xmlChar,
        prefix: *const xmlChar,
        URI: *const xmlChar,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSAXHandler {
    pub internalSubset: internalSubsetSAXFunc,
    pub isStandalone: isStandaloneSAXFunc,
    pub hasInternalSubset: hasInternalSubsetSAXFunc,
    pub hasExternalSubset: hasExternalSubsetSAXFunc,
    pub resolveEntity: resolveEntitySAXFunc,
    pub getEntity: getEntitySAXFunc,
    pub entityDecl: entityDeclSAXFunc,
    pub notationDecl: notationDeclSAXFunc,
    pub attributeDecl: attributeDeclSAXFunc,
    pub elementDecl: elementDeclSAXFunc,
    pub unparsedEntityDecl: unparsedEntityDeclSAXFunc,
    pub setDocumentLocator: setDocumentLocatorSAXFunc,
    pub startDocument: startDocumentSAXFunc,
    pub endDocument: endDocumentSAXFunc,
    pub startElement: startElementSAXFunc,
    pub endElement: endElementSAXFunc,
    pub reference: referenceSAXFunc,
    pub characters: charactersSAXFunc,
    pub ignorableWhitespace: ignorableWhitespaceSAXFunc,
    pub processingInstruction: processingInstructionSAXFunc,
    pub comment: commentSAXFunc,
    pub warning: warningSAXFunc,
    pub error: errorSAXFunc,
    pub fatalError: fatalErrorSAXFunc,
    pub getParameterEntity: getParameterEntitySAXFunc,
    pub cdataBlock: cdataBlockSAXFunc,
    pub externalSubset: externalSubsetSAXFunc,
    pub initialized: ::std::os::raw::c_uint,
    pub _private: *mut ::std::os::raw::c_void,
    pub startElementNs: startElementNsSAX2Func,
    pub endElementNs: endElementNsSAX2Func,
    pub serror: xmlStructuredErrorFunc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSAXHandler"][::std::mem::size_of::<_xmlSAXHandler>() - 256usize];
    ["Alignment of _xmlSAXHandler"][::std::mem::align_of::<_xmlSAXHandler>() - 8usize];
    ["Offset of field: _xmlSAXHandler::internalSubset"]
        [::std::mem::offset_of!(_xmlSAXHandler, internalSubset) - 0usize];
    ["Offset of field: _xmlSAXHandler::isStandalone"]
        [::std::mem::offset_of!(_xmlSAXHandler, isStandalone) - 8usize];
    ["Offset of field: _xmlSAXHandler::hasInternalSubset"]
        [::std::mem::offset_of!(_xmlSAXHandler, hasInternalSubset) - 16usize];
    ["Offset of field: _xmlSAXHandler::hasExternalSubset"]
        [::std::mem::offset_of!(_xmlSAXHandler, hasExternalSubset) - 24usize];
    ["Offset of field: _xmlSAXHandler::resolveEntity"]
        [::std::mem::offset_of!(_xmlSAXHandler, resolveEntity) - 32usize];
    ["Offset of field: _xmlSAXHandler::getEntity"]
        [::std::mem::offset_of!(_xmlSAXHandler, getEntity) - 40usize];
    ["Offset of field: _xmlSAXHandler::entityDecl"]
        [::std::mem::offset_of!(_xmlSAXHandler, entityDecl) - 48usize];
    ["Offset of field: _xmlSAXHandler::notationDecl"]
        [::std::mem::offset_of!(_xmlSAXHandler, notationDecl) - 56usize];
    ["Offset of field: _xmlSAXHandler::attributeDecl"]
        [::std::mem::offset_of!(_xmlSAXHandler, attributeDecl) - 64usize];
    ["Offset of field: _xmlSAXHandler::elementDecl"]
        [::std::mem::offset_of!(_xmlSAXHandler, elementDecl) - 72usize];
    ["Offset of field: _xmlSAXHandler::unparsedEntityDecl"]
        [::std::mem::offset_of!(_xmlSAXHandler, unparsedEntityDecl) - 80usize];
    ["Offset of field: _xmlSAXHandler::setDocumentLocator"]
        [::std::mem::offset_of!(_xmlSAXHandler, setDocumentLocator) - 88usize];
    ["Offset of field: _xmlSAXHandler::startDocument"]
        [::std::mem::offset_of!(_xmlSAXHandler, startDocument) - 96usize];
    ["Offset of field: _xmlSAXHandler::endDocument"]
        [::std::mem::offset_of!(_xmlSAXHandler, endDocument) - 104usize];
    ["Offset of field: _xmlSAXHandler::startElement"]
        [::std::mem::offset_of!(_xmlSAXHandler, startElement) - 112usize];
    ["Offset of field: _xmlSAXHandler::endElement"]
        [::std::mem::offset_of!(_xmlSAXHandler, endElement) - 120usize];
    ["Offset of field: _xmlSAXHandler::reference"]
        [::std::mem::offset_of!(_xmlSAXHandler, reference) - 128usize];
    ["Offset of field: _xmlSAXHandler::characters"]
        [::std::mem::offset_of!(_xmlSAXHandler, characters) - 136usize];
    ["Offset of field: _xmlSAXHandler::ignorableWhitespace"]
        [::std::mem::offset_of!(_xmlSAXHandler, ignorableWhitespace) - 144usize];
    ["Offset of field: _xmlSAXHandler::processingInstruction"]
        [::std::mem::offset_of!(_xmlSAXHandler, processingInstruction) - 152usize];
    ["Offset of field: _xmlSAXHandler::comment"]
        [::std::mem::offset_of!(_xmlSAXHandler, comment) - 160usize];
    ["Offset of field: _xmlSAXHandler::warning"]
        [::std::mem::offset_of!(_xmlSAXHandler, warning) - 168usize];
    ["Offset of field: _xmlSAXHandler::error"]
        [::std::mem::offset_of!(_xmlSAXHandler, error) - 176usize];
    ["Offset of field: _xmlSAXHandler::fatalError"]
        [::std::mem::offset_of!(_xmlSAXHandler, fatalError) - 184usize];
    ["Offset of field: _xmlSAXHandler::getParameterEntity"]
        [::std::mem::offset_of!(_xmlSAXHandler, getParameterEntity) - 192usize];
    ["Offset of field: _xmlSAXHandler::cdataBlock"]
        [::std::mem::offset_of!(_xmlSAXHandler, cdataBlock) - 200usize];
    ["Offset of field: _xmlSAXHandler::externalSubset"]
        [::std::mem::offset_of!(_xmlSAXHandler, externalSubset) - 208usize];
    ["Offset of field: _xmlSAXHandler::initialized"]
        [::std::mem::offset_of!(_xmlSAXHandler, initialized) - 216usize];
    ["Offset of field: _xmlSAXHandler::_private"]
        [::std::mem::offset_of!(_xmlSAXHandler, _private) - 224usize];
    ["Offset of field: _xmlSAXHandler::startElementNs"]
        [::std::mem::offset_of!(_xmlSAXHandler, startElementNs) - 232usize];
    ["Offset of field: _xmlSAXHandler::endElementNs"]
        [::std::mem::offset_of!(_xmlSAXHandler, endElementNs) - 240usize];
    ["Offset of field: _xmlSAXHandler::serror"]
        [::std::mem::offset_of!(_xmlSAXHandler, serror) - 248usize];
};
#[doc = " xmlExternalEntityLoader:\n @URL: The System ID of the resource requested\n @ID: The Public ID of the resource requested\n @context: the XML parser context\n\n External entity loaders types.\n\n Returns the entity input parser."]
pub type xmlExternalEntityLoader = ::std::option::Option<
    unsafe extern "C" fn(
        URL: *const ::std::os::raw::c_char,
        ID: *const ::std::os::raw::c_char,
        context: xmlParserCtxtPtr,
    ) -> xmlParserInputPtr,
>;
extern "C" {
    #[doc = " Global Namespaces\n"]
    pub static xmlSecNs: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecDSigNs: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecDSig11Ns: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecEncNs: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecEnc11Ns: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecXPathNs: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecXPath2Ns: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecXPointerNs: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " DSig Nodes\n"]
    pub static xmlSecNodeSignature: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeSignedInfo: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeSignatureValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeCanonicalizationMethod: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeSignatureMethod: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDigestMethod: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDigestValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeObject: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeManifest: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeSignatureProperties: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " Encryption Nodes\n"]
    pub static xmlSecNodeEncryptedData: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeEncryptionMethod: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeEncryptionProperties: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeEncryptionProperty: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeCipherData: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeCipherValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeCipherReference: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeReferenceList: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDataReference: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeKeyReference: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeCarriedKeyName: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecTypeEncContent: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecTypeEncElement: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " KeyInfo and Transform Nodes\n"]
    pub static xmlSecNodeKeyInfo: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeReference: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeTransforms: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeTransform: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " Attributes\n"]
    pub static xmlSecAttrId: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecAttrURI: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecAttrType: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecAttrMimeType: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecAttrEncoding: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecAttrAlgorithm: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecAttrTarget: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecAttrFilter: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecAttrRecipient: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " AES strings\n"]
    pub static xmlSecNameAESKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeAESKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefAESKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameAes128Cbc: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefAes128Cbc: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameAes192Cbc: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefAes192Cbc: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameAes256Cbc: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefAes256Cbc: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameAes128Gcm: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefAes128Gcm: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameAes192Gcm: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefAes192Gcm: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameAes256Gcm: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefAes256Gcm: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameKWAes128: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefKWAes128: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameKWAes192: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefKWAes192: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameKWAes256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefKWAes256: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " BASE64 strings\n"]
    pub static xmlSecNameBase64: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefBase64: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " C14N strings\n"]
    pub static xmlSecNameC14N: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefC14N: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameC14NWithComments: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefC14NWithComments: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameC14N11: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefC14N11: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameC14N11WithComments: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefC14N11WithComments: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameExcC14N: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefExcC14N: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameExcC14NWithComments: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefExcC14NWithComments: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNsExcC14N: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNsExcC14NWithComments: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeInclusiveNamespaces: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecAttrPrefixList: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " ConcatKDF strings\n"]
    pub static xmlSecNameConcatKdfKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameConcatKdf: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefConcatKdf: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeConcatKDFParams: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeConcatKDFAttrAlgorithmID: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeConcatKDFAttrPartyUInfo: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeConcatKDFAttrPartyVInfo: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeConcatKDFAttrSuppPubInfo: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeConcatKDFAttrSuppPrivInfo: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " DEREncodedKeyValue strings\n"]
    pub static xmlSecNameDEREncodedKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDEREncodedKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefDEREncodedKeyValue: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " DES strings\n"]
    pub static xmlSecNameDESKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDESKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefDESKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameDes3Cbc: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefDes3Cbc: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameKWDes3: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefKWDes3: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " DH key strings\n"]
    pub static xmlSecNameDHKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDHKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefDHKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDHP: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDHQ: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDHGenerator: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDHPublic: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDHSeed: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDHPgenCounter: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " DH-ES key agreement strings\n"]
    pub static xmlSecNameDhEs: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefDhEs: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " DSA strings\n"]
    pub static xmlSecNameDSAKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDSAKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefDSAKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDSAP: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDSAQ: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDSAG: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDSAJ: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDSAX: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDSAY: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDSASeed: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDSAPgenCounter: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameDsaSha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefDsaSha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameDsaSha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefDsaSha256: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " EC key strings\n"]
    pub static xmlSecNameECKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeECKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefECKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeNamedCurve: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodePublicKey: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " ECDH key agreement strings\n"]
    pub static xmlSecNameEcdh: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEcdh: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " ECDSA sigantures strings\n"]
    pub static xmlSecNameEcdsaRipemd160: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEcdsaRipemd160: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameEcdsaSha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEcdsaSha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameEcdsaSha224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEcdsaSha224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameEcdsaSha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEcdsaSha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameEcdsaSha384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEcdsaSha384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameEcdsaSha512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEcdsaSha512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameEcdsaSha3_224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEcdsaSha3_224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameEcdsaSha3_256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEcdsaSha3_256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameEcdsaSha3_384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEcdsaSha3_384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameEcdsaSha3_512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEcdsaSha3_512: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " GOST2001 strings\n"]
    pub static xmlSecNameGOST2001KeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeGOST2001KeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefGOST2001KeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameGost2001GostR3411_94: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefGost2001GostR3411_94: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " GOST R 34.10-2012 strings\n"]
    pub static xmlSecNameGostR3410_2012_256KeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeGostR3410_2012_256KeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefGostR3410_2012_256KeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameGostR3410_2012_512KeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeGostR3410_2012_512KeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefGostR3410_2012_512KeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameGostR3410_2012GostR3411_2012_256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefGostR3410_2012GostR3411_2012_256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameGostR3410_2012GostR3411_2012_512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefGostR3410_2012GostR3411_2012_512: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " EncryptedKey\n"]
    pub static xmlSecNameEncryptedKey: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeEncryptedKey: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEncryptedKey: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " DerivedKey\n"]
    pub static xmlSecNameDerivedKey: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDerivedKey: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefDerivedKey: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeKeyDerivationMethod: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeDerivedKeyName: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeMasterKeyName: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " AgreementMethod\n"]
    pub static xmlSecNameAgreementMethod: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeAgreementMethod: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefAgreementMethod: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeOriginatorKeyInfo: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeRecipientKeyInfo: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " Enveloped transform strings\n"]
    pub static xmlSecNameEnveloped: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefEnveloped: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " HMAC strings\n"]
    pub static xmlSecNameHMACKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeHMACKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefHMACKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeHMACOutputLength: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameHmacMd5: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefHmacMd5: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameHmacRipemd160: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefHmacRipemd160: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameHmacSha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefHmacSha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameHmacSha224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefHmacSha224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameHmacSha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefHmacSha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameHmacSha384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefHmacSha384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameHmacSha512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefHmacSha512: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " KeyInfoReference\n"]
    pub static xmlSecNameKeyInfoReference: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeKeyInfoReference: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " KeyName strings\n"]
    pub static xmlSecNameKeyName: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeKeyName: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " KeyValue strings\n"]
    pub static xmlSecNameKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeKeyValue: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " Memory Buffer strings\n"]
    pub static xmlSecNameMemBuf: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " MD5 strings\n"]
    pub static xmlSecNameMd5: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefMd5: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " PBKDF2 strings\n"]
    pub static xmlSecNamePbkdf2KeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNamePbkdf2: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefPbkdf2: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodePbkdf2Params: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodePbkdf2Salt: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodePbkdf2SaltSpecified: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodePbkdf2IterationCount: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodePbkdf2KeyLength: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodePbkdf2PRF: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " RetrievalMethod\n"]
    pub static xmlSecNameRetrievalMethod: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeRetrievalMethod: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " RIPEMD160 strings\n"]
    pub static xmlSecNameRipemd160: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRipemd160: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " RSA strings\n"]
    pub static xmlSecNameRSAKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeRSAKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRSAKeyValue: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeRSAModulus: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeRSAExponent: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeRSAPrivateExponent: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaMd5: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaMd5: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaRipemd160: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaRipemd160: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaSha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaSha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaSha224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaSha224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaSha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaSha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaSha384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaSha384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaSha512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaSha512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaPkcs1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaPkcs1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaOaep: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaOaep: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaOaepEnc11: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaOaepEnc11: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeRsaOAEPparams: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeRsaMGF: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefMgf1Sha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefMgf1Sha224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefMgf1Sha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefMgf1Sha384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefMgf1Sha512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaPssSha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaPssSha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaPssSha224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaPssSha224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaPssSha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaPssSha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaPssSha384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaPssSha384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaPssSha512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaPssSha512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaPssSha3_224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaPssSha3_224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaPssSha3_256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaPssSha3_256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaPssSha3_384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaPssSha3_384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRsaPssSha3_512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRsaPssSha3_512: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " GOSTR3411_94 strings\n"]
    pub static xmlSecNameGostR3411_94: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefGostR3411_94: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " GOST R 34.11-2012 strings\n"]
    pub static xmlSecNameGostR3411_2012_256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefGostR3411_2012_256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameGostR3411_2012_512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefGostR3411_2012_512: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " SHA1 strings\n"]
    pub static xmlSecNameSha1: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefSha1: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " SHA2 strings\n"]
    pub static xmlSecNameSha224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefSha224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameSha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefSha256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameSha384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefSha384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameSha512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefSha512: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " SHA3 strings\n"]
    pub static xmlSecNameSha3_224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefSha3_224: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameSha3_256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefSha3_256: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameSha3_384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefSha3_384: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameSha3_512: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefSha3_512: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " X509 strings\n"]
    pub static xmlSecNameX509Data: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeX509Data: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefX509Data: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeX509Certificate: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeX509CRL: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeX509SubjectName: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeX509IssuerSerial: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeX509IssuerName: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeX509SerialNumber: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeX509SKI: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeX509Digest: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameRawX509Cert: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRawX509Cert: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameX509Store: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " PGP strings\n"]
    pub static xmlSecNamePGPData: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodePGPData: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefPGPData: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " SPKI strings\n"]
    pub static xmlSecNameSPKIData: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeSPKIData: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefSPKIData: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " XPath/XPointer strings\n"]
    pub static xmlSecNameXPath: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeXPath: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameXPath2: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeXPath2: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecXPath2FilterIntersect: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecXPath2FilterSubtract: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecXPath2FilterUnion: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNameXPointer: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeXPointer: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " RelationshipTransform strings\n"]
    pub static xmlSecNameRelationship: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefRelationship: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeRelationship: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecNodeRelationshipReference: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecRelationshipsNs: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecRelationshipReferenceNs: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecRelationshipAttrId: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecRelationshipAttrSourceId: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecRelationshipAttrTargetMode: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " Xslt strings\n"]
    pub static xmlSecNameXslt: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecHrefXslt: [xmlChar; 0usize];
}
extern "C" {
    #[doc = " Utility strings\n"]
    pub static xmlSecStringEmpty: [xmlChar; 0usize];
}
extern "C" {
    pub static xmlSecStringCR: [xmlChar; 0usize];
}
#[doc = " Basic types to make ports to exotic platforms easier\n\n/\n/**\n xmlSecPtr:\n\n Void pointer."]
pub type xmlSecPtr = *mut ::std::os::raw::c_void;
#[doc = " xmlSecSize:\n\n Size of something."]
pub type xmlSecSize = usize;
#[doc = " xmlSecByte:\n\n One byte."]
pub type xmlSecByte = ::std::os::raw::c_uchar;
#[doc = " Forward declarations\n"]
pub type xmlSecKeyData = _xmlSecKeyData;
#[doc = " Forward declarations\n"]
pub type xmlSecKeyDataPtr = *mut _xmlSecKeyData;
#[doc = " xmlSecKeyDataStore\n\n/\n/**\n xmlSecKeyDataStore:\n @id:                 the store id (#xmlSecKeyDataStoreId).\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The key data store. Key data store holds common key data specific information\n required for key data processing. For example, X509 data store may hold\n information about trusted (root) certificates."]
pub type xmlSecKeyDataStore = _xmlSecKeyDataStore;
pub type xmlSecKeyDataStorePtr = *mut _xmlSecKeyDataStore;
#[doc = " xmlSecKeyInfoCtx:\n @userData:           the pointer to user data (xmlsec and xmlsec-crypto\n                      never touch this).\n @flags:              the bit mask for flags that control processin.\n @flags2:             reserved for future.\n @mode:               do we read or write <dsig:KeyInfo /> element.\n @keysMngr:           the pointer to current keys manager.\n @enabledKeyData:     the list of enabled @xmlSecKeyDataId (if list is\n                      empty then all data ids are enabled).\n @base64LineSize:     the max columns size for base64 encoding.\n @retrievalMethodCtx: the transforms context for <dsig:RetrievalMethod />\n                      element processing.\n @maxRetrievalMethodLevel: the max recursion level when processing\n                     &lt;dsig:RetrievalMethod/&gt; element; default level is 1\n                      (see also @curRetrievalMethodLevel).\n @keyInfoReferenceCtx: the transforms context for&lt;dsig11:KeyInfoReference/&gt;\n                      element processing.\n @maxKeyInfoReferenceLevel: the max recursion level when processing\n                     &lt;dsig11:KeyInfoReference/&gt; element; default level is 1\n                      (see also @curKeyInfoReferenceLevel).\n @encCtx:             the encryption context for <dsig:EncryptedKey /> element\n                      processing.\n @maxEncryptedKeyLevel: the max recursion level when processing\n                     &lt;enc:EncryptedKey/&gt; element; default level is 1\n                      (see @curEncryptedKeyLevel).\n @certsVerificationTime: the time to use for X509 certificates verification\n                      (\"not valid before\" and \"not valid after\" checks);\n                      if @certsVerificationTime is equal to 0 (default)\n                      then we verify certificates against the system's\n                      clock \"now\".\n @certsVerificationDepth: the max certifications chain length (default is 9).\n @pgpReserved:        reserved for PGP.\n @curRetrievalMethodLevel: the current&lt;dsig:RetrievalMethod/&gt; element\n                      processing level (see @maxRetrievalMethodLevel).\n @curKeyInfoReferenceLevel: the current&lt;dsig11:KeyInfoReference/&gt; element\n                      processing level (see @maxKeyInfoReferenceLevel).\n @curEncryptedKeyLevel: the current&lt;enc:EncryptedKey/&gt; or&lt;enc11:DerivedKey/&gt; element\n                      processing level (see @maxEncryptedKeyLevel).\n @operation:          the transform operation for this key info.\n @keyReq:             the current key requirements.\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The <dsig:KeyInfo /> reading or writing context."]
pub type xmlSecKeyInfoCtx = _xmlSecKeyInfoCtx;
pub type xmlSecKeyInfoCtxPtr = *mut _xmlSecKeyInfoCtx;
#[doc = " xmlSecKey:\n @name:               the key name.\n @value:              the key value.\n @dataList:           the key data list.\n @usage:              the key usage.\n @notValidBefore:     the start key validity interval.\n @notValidAfter:      the end key validity interval.\n\n The key."]
pub type xmlSecKey = _xmlSecKey;
pub type xmlSecKeyPtr = *mut _xmlSecKey;
#[doc = " xmlSecKeyStore\n\n/\n/**\n xmlSecKeyStore:\n @id:                 the store id (#xmlSecKeyStoreId).\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The keys store."]
pub type xmlSecKeyStore = _xmlSecKeyStore;
pub type xmlSecKeyStorePtr = *mut _xmlSecKeyStore;
#[doc = " xmlSecKeysMngr:\n @keysStore:                  the key store (list of keys known to keys manager).\n @storesList:                 the list of key data stores known to keys manager.\n @getKey:                     the callback used to read &lt;dsig:KeyInfo/&gt; node.\n\n The keys manager structure."]
pub type xmlSecKeysMngr = _xmlSecKeysMngr;
pub type xmlSecKeysMngrPtr = *mut _xmlSecKeysMngr;
#[doc = " xmlSecTransform\n\n/\n/**\n xmlSecTransform:\n @id:                 the transform id (pointer to #xmlSecTransformId).\n @operation:          the transform's operation.\n @status:             the current status.\n @hereNode:           the pointer to transform's <dsig:Transform /> node.\n @next:               the pointer to next transform in the chain.\n @prev:               the pointer to previous transform in the chain.\n @inBuf:              the input binary data buffer.\n @outBuf:             the output binary data buffer.\n @inNodes:            the input XML nodes.\n @outNodes:           the output XML nodes.\n @expectedOutputSize: the expected transform output size (used for key wraps).\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The transform structure."]
pub type xmlSecTransform = _xmlSecTransform;
pub type xmlSecTransformPtr = *mut _xmlSecTransform;
#[doc = " xmlSecTransformCtx:\n @userData:           the pointer to user data (xmlsec and xmlsec-crypto never\n                      touch this).\n @flags:              the bit mask flags to control transforms execution\n                      (reserved for the future).\n @flags2:             the bit mask flags to control transforms execution\n                      (reserved for the future).\n @binaryChunkSize:    the chunk of size for binary transforms processing.\n @enabledUris:        the allowed transform data source uri types.\n @enabledTransforms:  the list of enabled transforms; if list is empty (default)\n                      then all registered transforms are enabled.\n @preExecCallback:    the callback called after preparing transform chain\n                      and right before actual data processing; application\n                      can use this callback to change transforms parameters,\n                      insert additional transforms in the chain or do\n                      additional validation (and abort transform execution\n                      if needed).\n @parentKeyInfoCtx:   the parent's key info ctx for key agreement.\n @result:             the pointer to transforms result buffer.\n @status:             the transforms chain processing status.\n @uri:                the data source URI without xpointer expression.\n @xptrExpr:           the xpointer expression from data source URI (if any).\n @first:              the first transform in the chain.\n @last:               the last transform in the chain.\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The transform execution context."]
pub type xmlSecTransformCtx = _xmlSecTransformCtx;
pub type xmlSecTransformCtxPtr = *mut _xmlSecTransformCtx;
#[doc = " xmlSecDSigCtx:\n @userData:                   the pointer to user data (xmlsec and xmlsec-crypto libraries\n                              never touches this).\n @flags:                      the XML Digital Signature processing flags.\n @flags2:                     the XML Digital Signature processing flags.\n @keyInfoReadCtx:             the reading key context.\n @keyInfoWriteCtx:            the writing key context (not used for signature verification).\n @transformCtx:               the &lt;dsig:SignedInfo/&gt; node processing context.\n @enabledReferenceUris:       the URI types allowed for &lt;dsig:Reference/&gt; node.\n @enabledReferenceTransforms: the list of transforms allowed in &lt;dsig:Reference/&gt; node.\n @referencePreExecuteCallback:the callback for &lt;dsig:Reference/&gt; node processing.\n @defSignMethodId:            the default signing method klass.\n @defC14NMethodId:            the default c14n method klass.\n @defDigestMethodId:          the default digest method klass.\n @signKey:                    the signature key; application may set #signKey\n                              before calling #xmlSecDSigCtxSign or #xmlSecDSigCtxVerify\n                              functions.\n @operation:                  the operation: sign or verify.\n @result:                     the pointer to signature (not valid for signature verification).\n @status:                     the &lt;dsig:Signature/&gt; processing status.\n @failureReason:              the detailed failure reason (if known); the application should check @status first.\n @signMethod:                 the pointer to signature transform.\n @c14nMethod:                 the pointer to c14n transform.\n @preSignMemBufMethod:        the pointer to binary buffer right before signature\n                              (valid only if #XMLSEC_DSIG_FLAGS_STORE_SIGNATURE flag is set).\n @signValueNode:              the pointer to &lt;dsig:SignatureValue/&gt; node.\n @id:                         the pointer to Id attribute of &lt;dsig:Signature/&gt; node.\n @signedInfoReferences:       the list of references in &lt;dsig:SignedInfo/&gt; node.\n @manifestReferences:         the list of references in &lt;dsig:Manifest/&gt; nodes.\n @reserved0:                  reserved for the future.\n @reserved1:                  reserved for the future.\n\n XML DSig processing context."]
pub type xmlSecDSigCtx = _xmlSecDSigCtx;
pub type xmlSecDSigCtxPtr = *mut _xmlSecDSigCtx;
#[doc = " xmlSecEncCtx:\n @userData:                   the pointer to user data (xmlsec and xmlsec-crypto libraries\n                              never touches this).\n @flags:                      the XML Encryption processing flags.\n @flags2:                     the XML Encryption processing flags.\n @mode:                       the mode.\n @keyInfoReadCtx:             the reading key context.\n @keyInfoWriteCtx:            the writing key context (not used for signature verification).\n @transformCtx:               the transforms processing context.\n @defEncMethodId:             the default encryption method (used if\n                              &lt;enc:EncryptionMethod/&gt; node is not present).\n @encKey:                     the signature key; application may set #encKey\n                              before calling encryption/decryption functions.\n @operation:                  the operation: encrypt or decrypt.\n @result:                     the pointer to signature (not valid for signature verification).\n @resultBase64Encoded:        the flag: if set then result in #result is base64 encoded.\n @resultReplaced:             the flag: if set then resulted &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node is added to the document.\n @encMethod:                  the pointer to encryption transform.\n @replacedNodeList: the first node of the list of replaced nodes depending on the nodeReplacementMode\n @id:                         the ID attribute of &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node.\n @type:                       the Type attribute of &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node.\n @mimeType:                   the MimeType attribute of &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node.\n @encoding:                   the Encoding attributeof &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node.\n @recipient:                  the Recipient attribute of &lt;enc:EncryptedKey/&gt; node..\n @carriedKeyName:             the CarriedKeyName attribute of &lt;enc:EncryptedKey/&gt; node.\n @encDataNode:                the pointer to &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node.\n @encMethodNode:              the pointer to &lt;enc:EncryptionMethod/&gt; node.\n @failureReason:              the detailed failure reason.\n @keyInfoNode:                the pointer to &lt;enc:KeyInfo/&gt; node.\n @cipherValueNode:            the pointer to &lt;enc:CipherValue/&gt; node.\n @reserved1:                  reserved for the future.\n\n XML Encryption context."]
pub type xmlSecEncCtx = _xmlSecEncCtx;
pub type xmlSecEncCtxPtr = *mut _xmlSecEncCtx;
extern "C" {
    pub fn xmlSecInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecShutdown() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecGetDefaultCrypto() -> *const xmlChar;
}
extern "C" {
    pub fn xmlSecSetExternalEntityLoader(entityLoader: xmlExternalEntityLoader);
}
extern "C" {
    pub fn xmlSecStrlen(str_: *const xmlChar) -> usize;
}
pub const xmlSecCheckVersionMode_xmlSecCheckVersionExactMatch: xmlSecCheckVersionMode = 0;
pub const xmlSecCheckVersionMode_xmlSecCheckVersionABICompatible: xmlSecCheckVersionMode = 1;
#[doc = " xmlSecCheckVersionMode:\n @xmlSecCheckVersionExactMatch:       the version should match exactly.\n @xmlSecCheckVersionABICompatible:    the version should be ABI compatible.\n\n The xmlsec library version mode."]
pub type xmlSecCheckVersionMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn xmlSecCheckVersionExt(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        subminor: ::std::os::raw::c_int,
        mode: xmlSecCheckVersionMode,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bio_st {
    _unused: [u8; 0],
}
pub type BIO = bio_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY = evp_pkey_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_st {
    _unused: [u8; 0],
}
pub type X509 = x509_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X509_crl_st {
    _unused: [u8; 0],
}
pub type X509_CRL = X509_crl_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ossl_lib_ctx_st {
    _unused: [u8; 0],
}
pub type OSSL_LIB_CTX = ossl_lib_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_st_X509_CRL {
    _unused: [u8; 0],
}
#[doc = " xmlSecBuffer:\n @data: the pointer to buffer data.\n @size: the current data size.\n @maxSize: the max data size (allocated buffer size).\n @allocMode: the buffer memory allocation mode.\n\n Binary data buffer."]
pub type xmlSecBuffer = _xmlSecBuffer;
pub type xmlSecBufferPtr = *mut _xmlSecBuffer;
pub const xmlSecAllocMode_xmlSecAllocModeExact: xmlSecAllocMode = 0;
pub const xmlSecAllocMode_xmlSecAllocModeDouble: xmlSecAllocMode = 1;
#[doc = " xmlSecAllocMode:\n @xmlSecAllocModeExact:       the memory allocation mode that minimizes total\n                              allocated memory size.\n @xmlSecAllocModeDouble:      the memory allocation mode that tries to minimize\n                              the number of malloc calls.\n\n The memory allocation mode (used by @xmlSecBuffer and @xmlSecList)."]
pub type xmlSecAllocMode = ::std::os::raw::c_uint;
#[doc = " xmlSecBuffer:\n @data: the pointer to buffer data.\n @size: the current data size.\n @maxSize: the max data size (allocated buffer size).\n @allocMode: the buffer memory allocation mode.\n\n Binary data buffer."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecBuffer {
    pub data: *mut xmlSecByte,
    pub size: usize,
    pub maxSize: usize,
    pub allocMode: xmlSecAllocMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecBuffer"][::std::mem::size_of::<_xmlSecBuffer>() - 32usize];
    ["Alignment of _xmlSecBuffer"][::std::mem::align_of::<_xmlSecBuffer>() - 8usize];
    ["Offset of field: _xmlSecBuffer::data"][::std::mem::offset_of!(_xmlSecBuffer, data) - 0usize];
    ["Offset of field: _xmlSecBuffer::size"][::std::mem::offset_of!(_xmlSecBuffer, size) - 8usize];
    ["Offset of field: _xmlSecBuffer::maxSize"]
        [::std::mem::offset_of!(_xmlSecBuffer, maxSize) - 16usize];
    ["Offset of field: _xmlSecBuffer::allocMode"]
        [::std::mem::offset_of!(_xmlSecBuffer, allocMode) - 24usize];
};
extern "C" {
    pub fn xmlSecBufferSetDefaultAllocMode(defAllocMode: xmlSecAllocMode, defInitialSize: usize);
}
extern "C" {
    pub fn xmlSecBufferCreate(size: usize) -> xmlSecBufferPtr;
}
extern "C" {
    pub fn xmlSecBufferDestroy(buf: xmlSecBufferPtr);
}
extern "C" {
    pub fn xmlSecBufferInitialize(buf: xmlSecBufferPtr, size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferFinalize(buf: xmlSecBufferPtr);
}
extern "C" {
    pub fn xmlSecBufferIsEmpty(buf: xmlSecBufferPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferGetData(buf: xmlSecBufferPtr) -> *mut xmlSecByte;
}
extern "C" {
    pub fn xmlSecBufferSetData(
        buf: xmlSecBufferPtr,
        data: *const xmlSecByte,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferGetSize(buf: xmlSecBufferPtr) -> usize;
}
extern "C" {
    pub fn xmlSecBufferSetSize(buf: xmlSecBufferPtr, size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferGetMaxSize(buf: xmlSecBufferPtr) -> usize;
}
extern "C" {
    pub fn xmlSecBufferSetMaxSize(buf: xmlSecBufferPtr, size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferEmpty(buf: xmlSecBufferPtr);
}
extern "C" {
    pub fn xmlSecBufferSwap(buf1: xmlSecBufferPtr, buf2: xmlSecBufferPtr);
}
extern "C" {
    pub fn xmlSecBufferAppend(
        buf: xmlSecBufferPtr,
        data: *const xmlSecByte,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferPrepend(
        buf: xmlSecBufferPtr,
        data: *const xmlSecByte,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferRemoveHead(buf: xmlSecBufferPtr, size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferRemoveTail(buf: xmlSecBufferPtr, size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferReverse(buf: xmlSecBufferPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferReadFile(
        buf: xmlSecBufferPtr,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferBase64NodeContentRead(
        buf: xmlSecBufferPtr,
        node: xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferBase64NodeContentWrite(
        buf: xmlSecBufferPtr,
        node: xmlNodePtr,
        columns: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferHexRead(
        buf: xmlSecBufferPtr,
        hexStr: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecBufferCreateOutputBuffer(buf: xmlSecBufferPtr) -> xmlOutputBufferPtr;
}
#[doc = " xmlSecPtrListKlass:\n @name:               the list klass name.\n @duplicateItem:      the duplicate item method.\n @destroyItem:        the destroy item method.\n @debugDumpItem:      the debug dump item method.\n @debugXmlDumpItem:   the debug dump item in xml format method.\n\n List klass."]
pub type xmlSecPtrListKlass = _xmlSecPtrListKlass;
pub type xmlSecPtrListId = *const _xmlSecPtrListKlass;
#[doc = " xmlSecPtrList:\n @id:                         the list items description.\n @data:                       the list data.\n @use:                        the current list size.\n @max:                        the max (allocated) list size.\n @allocMode:                  the memory allocation mode.\n\n The pointers list."]
pub type xmlSecPtrList = _xmlSecPtrList;
pub type xmlSecPtrListPtr = *mut _xmlSecPtrList;
#[doc = " xmlSecPtrList:\n @id:                         the list items description.\n @data:                       the list data.\n @use:                        the current list size.\n @max:                        the max (allocated) list size.\n @allocMode:                  the memory allocation mode.\n\n The pointers list."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecPtrList {
    pub id: xmlSecPtrListId,
    pub data: *mut xmlSecPtr,
    pub use_: usize,
    pub max: usize,
    pub allocMode: xmlSecAllocMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecPtrList"][::std::mem::size_of::<_xmlSecPtrList>() - 40usize];
    ["Alignment of _xmlSecPtrList"][::std::mem::align_of::<_xmlSecPtrList>() - 8usize];
    ["Offset of field: _xmlSecPtrList::id"][::std::mem::offset_of!(_xmlSecPtrList, id) - 0usize];
    ["Offset of field: _xmlSecPtrList::data"]
        [::std::mem::offset_of!(_xmlSecPtrList, data) - 8usize];
    ["Offset of field: _xmlSecPtrList::use_"]
        [::std::mem::offset_of!(_xmlSecPtrList, use_) - 16usize];
    ["Offset of field: _xmlSecPtrList::max"][::std::mem::offset_of!(_xmlSecPtrList, max) - 24usize];
    ["Offset of field: _xmlSecPtrList::allocMode"]
        [::std::mem::offset_of!(_xmlSecPtrList, allocMode) - 32usize];
};
extern "C" {
    pub fn xmlSecPtrListSetDefaultAllocMode(defAllocMode: xmlSecAllocMode, defInitialSize: usize);
}
extern "C" {
    pub fn xmlSecPtrListInitialize(
        list: xmlSecPtrListPtr,
        id: xmlSecPtrListId,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecPtrListFinalize(list: xmlSecPtrListPtr);
}
extern "C" {
    pub fn xmlSecPtrListCreate(id: xmlSecPtrListId) -> xmlSecPtrListPtr;
}
extern "C" {
    pub fn xmlSecPtrListDestroy(list: xmlSecPtrListPtr);
}
extern "C" {
    pub fn xmlSecPtrListEmpty(list: xmlSecPtrListPtr);
}
extern "C" {
    pub fn xmlSecPtrListCopy(dst: xmlSecPtrListPtr, src: xmlSecPtrListPtr)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecPtrListDuplicate(list: xmlSecPtrListPtr) -> xmlSecPtrListPtr;
}
extern "C" {
    pub fn xmlSecPtrListGetSize(list: xmlSecPtrListPtr) -> usize;
}
extern "C" {
    pub fn xmlSecPtrListGetItem(list: xmlSecPtrListPtr, pos: usize) -> xmlSecPtr;
}
extern "C" {
    pub fn xmlSecPtrListAdd(list: xmlSecPtrListPtr, item: xmlSecPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecPtrListInsert(
        list: xmlSecPtrListPtr,
        item: xmlSecPtr,
        pos: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecPtrListSet(
        list: xmlSecPtrListPtr,
        item: xmlSecPtr,
        pos: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecPtrListRemove(list: xmlSecPtrListPtr, pos: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecPtrListRemoveAndReturn(list: xmlSecPtrListPtr, pos: usize) -> xmlSecPtr;
}
extern "C" {
    pub fn xmlSecPtrListDebugDump(list: xmlSecPtrListPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecPtrListDebugXmlDump(list: xmlSecPtrListPtr, output: *mut FILE);
}
#[doc = " xmlSecPtrDuplicateItemMethod:\n @ptr:                the poinetr to list item.\n\n Duplicates item @ptr.\n\n Returns: pointer to new item copy or NULL if an error occurs."]
pub type xmlSecPtrDuplicateItemMethod =
    ::std::option::Option<unsafe extern "C" fn(ptr: xmlSecPtr) -> xmlSecPtr>;
#[doc = " xmlSecPtrDestroyItemMethod:\n @ptr:                the poinetr to list item.\n\n Destroys list item @ptr."]
pub type xmlSecPtrDestroyItemMethod = ::std::option::Option<unsafe extern "C" fn(ptr: xmlSecPtr)>;
#[doc = " xmlSecPtrDebugDumpItemMethod:\n @ptr:                the poinetr to list item.\n @output:             the output FILE.\n\n Prints debug information about @item to @output."]
pub type xmlSecPtrDebugDumpItemMethod =
    ::std::option::Option<unsafe extern "C" fn(ptr: xmlSecPtr, output: *mut FILE)>;
#[doc = " xmlSecPtrListKlass:\n @name:               the list klass name.\n @duplicateItem:      the duplicate item method.\n @destroyItem:        the destroy item method.\n @debugDumpItem:      the debug dump item method.\n @debugXmlDumpItem:   the debug dump item in xml format method.\n\n List klass."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecPtrListKlass {
    pub name: *const xmlChar,
    pub duplicateItem: xmlSecPtrDuplicateItemMethod,
    pub destroyItem: xmlSecPtrDestroyItemMethod,
    pub debugDumpItem: xmlSecPtrDebugDumpItemMethod,
    pub debugXmlDumpItem: xmlSecPtrDebugDumpItemMethod,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecPtrListKlass"][::std::mem::size_of::<_xmlSecPtrListKlass>() - 40usize];
    ["Alignment of _xmlSecPtrListKlass"][::std::mem::align_of::<_xmlSecPtrListKlass>() - 8usize];
    ["Offset of field: _xmlSecPtrListKlass::name"]
        [::std::mem::offset_of!(_xmlSecPtrListKlass, name) - 0usize];
    ["Offset of field: _xmlSecPtrListKlass::duplicateItem"]
        [::std::mem::offset_of!(_xmlSecPtrListKlass, duplicateItem) - 8usize];
    ["Offset of field: _xmlSecPtrListKlass::destroyItem"]
        [::std::mem::offset_of!(_xmlSecPtrListKlass, destroyItem) - 16usize];
    ["Offset of field: _xmlSecPtrListKlass::debugDumpItem"]
        [::std::mem::offset_of!(_xmlSecPtrListKlass, debugDumpItem) - 24usize];
    ["Offset of field: _xmlSecPtrListKlass::debugXmlDumpItem"]
        [::std::mem::offset_of!(_xmlSecPtrListKlass, debugXmlDumpItem) - 32usize];
};
extern "C" {
    pub fn xmlSecStringListGetKlass() -> xmlSecPtrListId;
}
#[doc = " Forward declarations\n"]
pub type xmlSecKeyDataKlass = _xmlSecKeyDataKlass;
#[doc = " Forward declarations\n"]
pub type xmlSecKeyDataId = *const _xmlSecKeyDataKlass;
#[doc = " xmlSecKeyDataStoreKlass:\n @klassSize:          the data store klass size.\n @objSize:            the data store obj size.\n @name:               the store's name.\n @initialize:         the store's initialization method.\n @finalize:           the store's finalization (destroy) method.\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The data store id (klass)."]
pub type xmlSecKeyDataStoreKlass = _xmlSecKeyDataStoreKlass;
pub type xmlSecKeyDataStoreId = *const _xmlSecKeyDataStoreKlass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyDataList {
    _unused: [u8; 0],
}
pub type xmlSecKeyDataList = _xmlSecKeyDataList;
pub type xmlSecKeyDataListPtr = *mut _xmlSecKeyDataList;
#[doc = " xmlSecKeyDataUsage\n\n/\n/**\n xmlSecKeyDataUsage:\n\n The bits mask that determines possible keys data usage."]
pub type xmlSecKeyDataUsage = ::std::os::raw::c_uint;
#[doc = " xmlSecKeyDataType\n\n/\n/**\n xmlSecKeyDataType:\n\n The key data type (public/private, session/permanent, etc.)."]
pub type xmlSecKeyDataType = ::std::os::raw::c_uint;
pub const xmlSecKeyDataFormat_xmlSecKeyDataFormatUnknown: xmlSecKeyDataFormat = 0;
pub const xmlSecKeyDataFormat_xmlSecKeyDataFormatBinary: xmlSecKeyDataFormat = 1;
pub const xmlSecKeyDataFormat_xmlSecKeyDataFormatPem: xmlSecKeyDataFormat = 2;
pub const xmlSecKeyDataFormat_xmlSecKeyDataFormatDer: xmlSecKeyDataFormat = 3;
pub const xmlSecKeyDataFormat_xmlSecKeyDataFormatPkcs8Pem: xmlSecKeyDataFormat = 4;
pub const xmlSecKeyDataFormat_xmlSecKeyDataFormatPkcs8Der: xmlSecKeyDataFormat = 5;
pub const xmlSecKeyDataFormat_xmlSecKeyDataFormatPkcs12: xmlSecKeyDataFormat = 6;
pub const xmlSecKeyDataFormat_xmlSecKeyDataFormatCertPem: xmlSecKeyDataFormat = 7;
pub const xmlSecKeyDataFormat_xmlSecKeyDataFormatCertDer: xmlSecKeyDataFormat = 8;
pub const xmlSecKeyDataFormat_xmlSecKeyDataFormatEngine: xmlSecKeyDataFormat = 9;
pub const xmlSecKeyDataFormat_xmlSecKeyDataFormatStore: xmlSecKeyDataFormat = 10;
#[doc = " xmlSecKeyDataFormat\n\n/\n/**\n xmlSecKeyDataFormat:\n @xmlSecKeyDataFormatUnknown:         the key data format is unknown.\n @xmlSecKeyDataFormatBinary:          the binary key data.\n @xmlSecKeyDataFormatPem:             the PEM key data (cert or public/private key).\n @xmlSecKeyDataFormatDer:             the DER key data (cert or public/private key).\n @xmlSecKeyDataFormatPkcs8Pem:        the PKCS8 PEM private key.\n @xmlSecKeyDataFormatPkcs8Der:        the PKCS8 DER private key.\n @xmlSecKeyDataFormatPkcs12:          the PKCS12 format (bag of keys and certs)\n @xmlSecKeyDataFormatCertPem:         the PEM cert.\n @xmlSecKeyDataFormatCertDer:         the DER cert.\n @xmlSecKeyDataFormatEngine:          the crypto engine (e.g. OpenSSL ENGINE).\n @xmlSecKeyDataFormatStore:           the crypto store (e.g. OpenSSL ossl_store).\n\n The key data format (binary, der, pem, etc.)."]
pub type xmlSecKeyDataFormat = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Global xmlSecKeyDataIds methods\n"]
    pub fn xmlSecKeyDataIdsGet() -> xmlSecPtrListPtr;
}
extern "C" {
    pub fn xmlSecKeyDataIdsGetEnabled() -> xmlSecPtrListPtr;
}
extern "C" {
    pub fn xmlSecKeyDataIdsInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyDataIdsShutdown();
}
extern "C" {
    pub fn xmlSecKeyDataIdsRegisterDefault() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyDataIdsRegister(id: xmlSecKeyDataId) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyDataIdsRegisterDisabled(id: xmlSecKeyDataId) -> ::std::os::raw::c_int;
}
#[doc = " xmlSecKeyData\n\n/\n/**\n xmlSecKeyData:\n @id:                 the data id (#xmlSecKeyDataId).\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The key data: key value (crypto material), x509 data, pgp data, etc."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyData {
    pub id: xmlSecKeyDataId,
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecKeyData"][::std::mem::size_of::<_xmlSecKeyData>() - 24usize];
    ["Alignment of _xmlSecKeyData"][::std::mem::align_of::<_xmlSecKeyData>() - 8usize];
    ["Offset of field: _xmlSecKeyData::id"][::std::mem::offset_of!(_xmlSecKeyData, id) - 0usize];
    ["Offset of field: _xmlSecKeyData::reserved0"]
        [::std::mem::offset_of!(_xmlSecKeyData, reserved0) - 8usize];
    ["Offset of field: _xmlSecKeyData::reserved1"]
        [::std::mem::offset_of!(_xmlSecKeyData, reserved1) - 16usize];
};
extern "C" {
    pub fn xmlSecKeyDataCreate(id: xmlSecKeyDataId) -> xmlSecKeyDataPtr;
}
extern "C" {
    pub fn xmlSecKeyDataDuplicate(data: xmlSecKeyDataPtr) -> xmlSecKeyDataPtr;
}
extern "C" {
    pub fn xmlSecKeyDataDestroy(data: xmlSecKeyDataPtr);
}
extern "C" {
    pub fn xmlSecKeyDataGenerate(
        data: xmlSecKeyDataPtr,
        sizeBits: usize,
        type_: xmlSecKeyDataType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyDataGetType(data: xmlSecKeyDataPtr) -> xmlSecKeyDataType;
}
extern "C" {
    pub fn xmlSecKeyDataGetSize(data: xmlSecKeyDataPtr) -> usize;
}
extern "C" {
    pub fn xmlSecKeyDataGetIdentifier(data: xmlSecKeyDataPtr) -> *const xmlChar;
}
extern "C" {
    pub fn xmlSecKeyDataDebugDump(data: xmlSecKeyDataPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecKeyDataDebugXmlDump(data: xmlSecKeyDataPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecKeyDataXmlRead(
        id: xmlSecKeyDataId,
        key: xmlSecKeyPtr,
        node: xmlNodePtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyDataXmlWrite(
        id: xmlSecKeyDataId,
        key: xmlSecKeyPtr,
        node: xmlNodePtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyDataBinRead(
        id: xmlSecKeyDataId,
        key: xmlSecKeyPtr,
        buf: *const xmlSecByte,
        bufSize: usize,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyDataBinWrite(
        id: xmlSecKeyDataId,
        key: xmlSecKeyPtr,
        buf: *mut *mut xmlSecByte,
        bufSize: *mut usize,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int;
}
#[doc = " xmlSecKeyDataInitMethod:\n @data:               the pointer to key data.\n\n Key data specific initialization method.\n\n Returns: 0 on success or a negative value if an error occurs."]
pub type xmlSecKeyDataInitMethod =
    ::std::option::Option<unsafe extern "C" fn(data: xmlSecKeyDataPtr) -> ::std::os::raw::c_int>;
#[doc = " xmlSecKeyDataDuplicateMethod:\n @dst:                the pointer to destination key data.\n @src:                the pointer to source key data.\n\n Key data specific duplication (copy) method.\n\n Returns: 0 on success or a negative value if an error occurs."]
pub type xmlSecKeyDataDuplicateMethod = ::std::option::Option<
    unsafe extern "C" fn(dst: xmlSecKeyDataPtr, src: xmlSecKeyDataPtr) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecKeyDataFinalizeMethod:\n @data:               the data.\n\n Key data specific finalization method. All the objects and resources allocated\n by the key data object must be freed inside this method."]
pub type xmlSecKeyDataFinalizeMethod =
    ::std::option::Option<unsafe extern "C" fn(data: xmlSecKeyDataPtr)>;
#[doc = " xmlSecKeyDataXmlReadMethod:\n @id:                 the data id.\n @key:                the key.\n @node:               the pointer to data's value XML node.\n @keyInfoCtx:         the &lt;dsig:KeyInfo/&gt; node processing context.\n\n Key data specific method for reading XML node.\n\n Returns: 0 on success or a negative value if an error occurs."]
pub type xmlSecKeyDataXmlReadMethod = ::std::option::Option<
    unsafe extern "C" fn(
        id: xmlSecKeyDataId,
        key: xmlSecKeyPtr,
        node: xmlNodePtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecKeyDataXmlWriteMethod:\n @id:                 the data id.\n @key:                the key.\n @node:               the pointer to data's value XML node.\n @keyInfoCtx:         the &lt;dsig:KeyInfo/&gt; node processing context.\n\n Key data specific method for writing XML node.\n\n Returns: 0 on success or a negative value if an error occurs."]
pub type xmlSecKeyDataXmlWriteMethod = ::std::option::Option<
    unsafe extern "C" fn(
        id: xmlSecKeyDataId,
        key: xmlSecKeyPtr,
        node: xmlNodePtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecKeyDataBinReadMethod:\n @id:                 the data id.\n @key:                the key.\n @buf:                the input buffer.\n @bufSize:            the buffer size.\n @keyInfoCtx:         the &lt;dsig:KeyInfo/&gt; node processing context.\n\n Key data specific method for reading binary buffer.\n\n Returns: 0 on success or a negative value if an error occurs."]
pub type xmlSecKeyDataBinReadMethod = ::std::option::Option<
    unsafe extern "C" fn(
        id: xmlSecKeyDataId,
        key: xmlSecKeyPtr,
        buf: *const xmlSecByte,
        bufSize: usize,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecKeyDataBinWriteMethod:\n @id:                 the data id.\n @key:                the key.\n @buf:                the output buffer.\n @bufSize:            the buffer size.\n @keyInfoCtx:         the &lt;dsig:KeyInfo/&gt; node processing context.\n\n Key data specific method for reading binary buffer.\n\n Returns: 0 on success or a negative value if an error occurs."]
pub type xmlSecKeyDataBinWriteMethod = ::std::option::Option<
    unsafe extern "C" fn(
        id: xmlSecKeyDataId,
        key: xmlSecKeyPtr,
        buf: *mut *mut xmlSecByte,
        bufSize: *mut usize,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecKeyDataGenerateMethod:\n @data:               the pointer to key data.\n @sizeBits:           the key data specific size.\n @type:               the required key type (session/permanent, etc.)\n\n Key data specific method for generating new key data.\n\n Returns: 0 on success or a negative value if an error occurs."]
pub type xmlSecKeyDataGenerateMethod = ::std::option::Option<
    unsafe extern "C" fn(
        data: xmlSecKeyDataPtr,
        sizeBits: usize,
        type_: xmlSecKeyDataType,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecKeyDataGetTypeMethod:\n @data:                the data.\n\n Key data specific method to get the key type.\n\n Returns: the key type."]
pub type xmlSecKeyDataGetTypeMethod =
    ::std::option::Option<unsafe extern "C" fn(data: xmlSecKeyDataPtr) -> xmlSecKeyDataType>;
#[doc = " xmlSecKeyDataGetSizeMethod:\n @data:               the pointer to key data.\n\n Key data specific method to get the key size.\n\n Returns: the key size in bits."]
pub type xmlSecKeyDataGetSizeMethod =
    ::std::option::Option<unsafe extern "C" fn(data: xmlSecKeyDataPtr) -> usize>;
#[doc = " xmlSecKeyDataGetIdentifierMethod:\n @data:               the pointer to key data.\n\n Key data specific method to get the key data identifier string (for example,\n X509 data identifier is the subject of the verified cert).\n\n Returns: the identifier string or NULL if an error occurs."]
pub type xmlSecKeyDataGetIdentifierMethod =
    ::std::option::Option<unsafe extern "C" fn(data: xmlSecKeyDataPtr) -> *const xmlChar>;
#[doc = " xmlSecKeyDataDebugDumpMethod:\n @data:               the data.\n @output:             the FILE to print debug info (should be open for writing).\n\n Key data specific method for printing debug info."]
pub type xmlSecKeyDataDebugDumpMethod =
    ::std::option::Option<unsafe extern "C" fn(data: xmlSecKeyDataPtr, output: *mut FILE)>;
#[doc = " xmlSecKeyDataKlass:\n @klassSize:          the klass size.\n @objSize:            the object size.\n @name:               the object name.\n @usage:              the allowed data usage.\n @href:               the identification string (href).\n @dataNodeName:       the data's XML node name.\n @dataNodeNs:         the data's XML node namespace.\n @initialize:         the initialization method.\n @duplicate:          the duplicate (copy) method.\n @finalize:           the finalization (destroy) method.\n @generate:           the new data generation method.\n @getType:            the method to access data's type information.\n @getSize:            the method to access data's size.\n @getIdentifier:      the method to access data's string identifier.\n @xmlRead:            the method for reading data from XML node.\n @xmlWrite:           the method for writing data to XML node.\n @binRead:            the method for reading data from a binary buffer.\n @binWrite:           the method for writing data to binary buffer.\n @debugDump:          the method for printing debug data information.\n @debugXmlDump:       the method for printing debug data information in XML format.\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The data id (klass)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyDataKlass {
    pub klassSize: usize,
    pub objSize: usize,
    pub name: *const xmlChar,
    pub usage: xmlSecKeyDataUsage,
    pub href: *const xmlChar,
    pub dataNodeName: *const xmlChar,
    pub dataNodeNs: *const xmlChar,
    pub initialize: xmlSecKeyDataInitMethod,
    pub duplicate: xmlSecKeyDataDuplicateMethod,
    pub finalize: xmlSecKeyDataFinalizeMethod,
    pub generate: xmlSecKeyDataGenerateMethod,
    pub getType: xmlSecKeyDataGetTypeMethod,
    pub getSize: xmlSecKeyDataGetSizeMethod,
    pub getIdentifier: xmlSecKeyDataGetIdentifierMethod,
    pub xmlRead: xmlSecKeyDataXmlReadMethod,
    pub xmlWrite: xmlSecKeyDataXmlWriteMethod,
    pub binRead: xmlSecKeyDataBinReadMethod,
    pub binWrite: xmlSecKeyDataBinWriteMethod,
    pub debugDump: xmlSecKeyDataDebugDumpMethod,
    pub debugXmlDump: xmlSecKeyDataDebugDumpMethod,
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecKeyDataKlass"][::std::mem::size_of::<_xmlSecKeyDataKlass>() - 176usize];
    ["Alignment of _xmlSecKeyDataKlass"][::std::mem::align_of::<_xmlSecKeyDataKlass>() - 8usize];
    ["Offset of field: _xmlSecKeyDataKlass::klassSize"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, klassSize) - 0usize];
    ["Offset of field: _xmlSecKeyDataKlass::objSize"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, objSize) - 8usize];
    ["Offset of field: _xmlSecKeyDataKlass::name"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, name) - 16usize];
    ["Offset of field: _xmlSecKeyDataKlass::usage"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, usage) - 24usize];
    ["Offset of field: _xmlSecKeyDataKlass::href"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, href) - 32usize];
    ["Offset of field: _xmlSecKeyDataKlass::dataNodeName"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, dataNodeName) - 40usize];
    ["Offset of field: _xmlSecKeyDataKlass::dataNodeNs"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, dataNodeNs) - 48usize];
    ["Offset of field: _xmlSecKeyDataKlass::initialize"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, initialize) - 56usize];
    ["Offset of field: _xmlSecKeyDataKlass::duplicate"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, duplicate) - 64usize];
    ["Offset of field: _xmlSecKeyDataKlass::finalize"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, finalize) - 72usize];
    ["Offset of field: _xmlSecKeyDataKlass::generate"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, generate) - 80usize];
    ["Offset of field: _xmlSecKeyDataKlass::getType"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, getType) - 88usize];
    ["Offset of field: _xmlSecKeyDataKlass::getSize"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, getSize) - 96usize];
    ["Offset of field: _xmlSecKeyDataKlass::getIdentifier"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, getIdentifier) - 104usize];
    ["Offset of field: _xmlSecKeyDataKlass::xmlRead"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, xmlRead) - 112usize];
    ["Offset of field: _xmlSecKeyDataKlass::xmlWrite"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, xmlWrite) - 120usize];
    ["Offset of field: _xmlSecKeyDataKlass::binRead"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, binRead) - 128usize];
    ["Offset of field: _xmlSecKeyDataKlass::binWrite"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, binWrite) - 136usize];
    ["Offset of field: _xmlSecKeyDataKlass::debugDump"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, debugDump) - 144usize];
    ["Offset of field: _xmlSecKeyDataKlass::debugXmlDump"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, debugXmlDump) - 152usize];
    ["Offset of field: _xmlSecKeyDataKlass::reserved0"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, reserved0) - 160usize];
    ["Offset of field: _xmlSecKeyDataKlass::reserved1"]
        [::std::mem::offset_of!(_xmlSecKeyDataKlass, reserved1) - 168usize];
};
extern "C" {
    #[doc = " Helper functions for binary key data (HMAC, AES, DES, ...).\n"]
    pub fn xmlSecKeyDataBinaryValueGetSize(data: xmlSecKeyDataPtr) -> usize;
}
extern "C" {
    pub fn xmlSecKeyDataBinaryValueGetBuffer(data: xmlSecKeyDataPtr) -> xmlSecBufferPtr;
}
extern "C" {
    pub fn xmlSecKeyDataBinaryValueSetBuffer(
        data: xmlSecKeyDataPtr,
        buf: *const xmlSecByte,
        bufSize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyDataListGetKlass() -> xmlSecPtrListId;
}
extern "C" {
    pub fn xmlSecKeyDataIdListGetKlass() -> xmlSecPtrListId;
}
extern "C" {
    pub fn xmlSecKeyDataIdListFind(
        list: xmlSecPtrListPtr,
        dataId: xmlSecKeyDataId,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyDataIdListFindByNode(
        list: xmlSecPtrListPtr,
        nodeName: *const xmlChar,
        nodeNs: *const xmlChar,
        usage: xmlSecKeyDataUsage,
    ) -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecKeyDataIdListFindByHref(
        list: xmlSecPtrListPtr,
        href: *const xmlChar,
        usage: xmlSecKeyDataUsage,
    ) -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecKeyDataIdListFindByName(
        list: xmlSecPtrListPtr,
        name: *const xmlChar,
        usage: xmlSecKeyDataUsage,
    ) -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecKeyDataIdListDebugDump(list: xmlSecPtrListPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecKeyDataIdListDebugXmlDump(list: xmlSecPtrListPtr, output: *mut FILE);
}
#[doc = " xmlSecKeyDataStore\n\n/\n/**\n xmlSecKeyDataStore:\n @id:                 the store id (#xmlSecKeyDataStoreId).\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The key data store. Key data store holds common key data specific information\n required for key data processing. For example, X509 data store may hold\n information about trusted (root) certificates."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyDataStore {
    pub id: xmlSecKeyDataStoreId,
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecKeyDataStore"][::std::mem::size_of::<_xmlSecKeyDataStore>() - 24usize];
    ["Alignment of _xmlSecKeyDataStore"][::std::mem::align_of::<_xmlSecKeyDataStore>() - 8usize];
    ["Offset of field: _xmlSecKeyDataStore::id"]
        [::std::mem::offset_of!(_xmlSecKeyDataStore, id) - 0usize];
    ["Offset of field: _xmlSecKeyDataStore::reserved0"]
        [::std::mem::offset_of!(_xmlSecKeyDataStore, reserved0) - 8usize];
    ["Offset of field: _xmlSecKeyDataStore::reserved1"]
        [::std::mem::offset_of!(_xmlSecKeyDataStore, reserved1) - 16usize];
};
extern "C" {
    pub fn xmlSecKeyDataStoreCreate(id: xmlSecKeyDataStoreId) -> xmlSecKeyDataStorePtr;
}
extern "C" {
    pub fn xmlSecKeyDataStoreDestroy(store: xmlSecKeyDataStorePtr);
}
#[doc = " xmlSecKeyDataStoreInitializeMethod:\n @store:              the data store.\n\n Key data store specific initialization method.\n\n Returns: 0 on success or a negative value if an error occurs."]
pub type xmlSecKeyDataStoreInitializeMethod = ::std::option::Option<
    unsafe extern "C" fn(store: xmlSecKeyDataStorePtr) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecKeyDataStoreFinalizeMethod:\n @store:              the data store.\n\n Key data store specific finalization (destroy) method."]
pub type xmlSecKeyDataStoreFinalizeMethod =
    ::std::option::Option<unsafe extern "C" fn(store: xmlSecKeyDataStorePtr)>;
#[doc = " xmlSecKeyDataStoreKlass:\n @klassSize:          the data store klass size.\n @objSize:            the data store obj size.\n @name:               the store's name.\n @initialize:         the store's initialization method.\n @finalize:           the store's finalization (destroy) method.\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The data store id (klass)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyDataStoreKlass {
    pub klassSize: usize,
    pub objSize: usize,
    pub name: *const xmlChar,
    pub initialize: xmlSecKeyDataStoreInitializeMethod,
    pub finalize: xmlSecKeyDataStoreFinalizeMethod,
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecKeyDataStoreKlass"]
        [::std::mem::size_of::<_xmlSecKeyDataStoreKlass>() - 56usize];
    ["Alignment of _xmlSecKeyDataStoreKlass"]
        [::std::mem::align_of::<_xmlSecKeyDataStoreKlass>() - 8usize];
    ["Offset of field: _xmlSecKeyDataStoreKlass::klassSize"]
        [::std::mem::offset_of!(_xmlSecKeyDataStoreKlass, klassSize) - 0usize];
    ["Offset of field: _xmlSecKeyDataStoreKlass::objSize"]
        [::std::mem::offset_of!(_xmlSecKeyDataStoreKlass, objSize) - 8usize];
    ["Offset of field: _xmlSecKeyDataStoreKlass::name"]
        [::std::mem::offset_of!(_xmlSecKeyDataStoreKlass, name) - 16usize];
    ["Offset of field: _xmlSecKeyDataStoreKlass::initialize"]
        [::std::mem::offset_of!(_xmlSecKeyDataStoreKlass, initialize) - 24usize];
    ["Offset of field: _xmlSecKeyDataStoreKlass::finalize"]
        [::std::mem::offset_of!(_xmlSecKeyDataStoreKlass, finalize) - 32usize];
    ["Offset of field: _xmlSecKeyDataStoreKlass::reserved0"]
        [::std::mem::offset_of!(_xmlSecKeyDataStoreKlass, reserved0) - 40usize];
    ["Offset of field: _xmlSecKeyDataStoreKlass::reserved1"]
        [::std::mem::offset_of!(_xmlSecKeyDataStoreKlass, reserved1) - 48usize];
};
extern "C" {
    pub fn xmlSecKeyDataStorePtrListGetKlass() -> xmlSecPtrListId;
}
extern "C" {
    pub fn xmlSecImportSetPersistKey();
}
extern "C" {
    pub fn xmlSecImportGetPersistKey() -> ::std::os::raw::c_int;
}
#[doc = " xmlSecKeyUsage:\n\n The key usage."]
pub type xmlSecKeyUsage = ::std::os::raw::c_uint;
#[doc = " xmlSecKeyUseWith\n"]
pub type xmlSecKeyUseWith = _xmlSecKeyUseWith;
#[doc = " xmlSecKeyUseWith\n"]
pub type xmlSecKeyUseWithPtr = *mut _xmlSecKeyUseWith;
extern "C" {
    pub fn xmlSecKeyUseWithInitialize(keyUseWith: xmlSecKeyUseWithPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyUseWithFinalize(keyUseWith: xmlSecKeyUseWithPtr);
}
extern "C" {
    pub fn xmlSecKeyUseWithReset(keyUseWith: xmlSecKeyUseWithPtr);
}
extern "C" {
    pub fn xmlSecKeyUseWithCopy(
        dst: xmlSecKeyUseWithPtr,
        src: xmlSecKeyUseWithPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyUseWithCreate(
        application: *const xmlChar,
        identifier: *const xmlChar,
    ) -> xmlSecKeyUseWithPtr;
}
extern "C" {
    pub fn xmlSecKeyUseWithDuplicate(keyUseWith: xmlSecKeyUseWithPtr) -> xmlSecKeyUseWithPtr;
}
extern "C" {
    pub fn xmlSecKeyUseWithDestroy(keyUseWith: xmlSecKeyUseWithPtr);
}
extern "C" {
    pub fn xmlSecKeyUseWithSet(
        keyUseWith: xmlSecKeyUseWithPtr,
        application: *const xmlChar,
        identifier: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyUseWithDebugDump(keyUseWith: xmlSecKeyUseWithPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecKeyUseWithDebugXmlDump(keyUseWith: xmlSecKeyUseWithPtr, output: *mut FILE);
}
#[doc = " xmlSecKeyUseWith:\n @application:        the application.\n @identifier:         the identifier.\n @reserved1:          reserved for future use.\n @reserved2:          reserved for future use.\n\n Information about application and user of the key."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyUseWith {
    pub application: *mut xmlChar,
    pub identifier: *mut xmlChar,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecKeyUseWith"][::std::mem::size_of::<_xmlSecKeyUseWith>() - 32usize];
    ["Alignment of _xmlSecKeyUseWith"][::std::mem::align_of::<_xmlSecKeyUseWith>() - 8usize];
    ["Offset of field: _xmlSecKeyUseWith::application"]
        [::std::mem::offset_of!(_xmlSecKeyUseWith, application) - 0usize];
    ["Offset of field: _xmlSecKeyUseWith::identifier"]
        [::std::mem::offset_of!(_xmlSecKeyUseWith, identifier) - 8usize];
    ["Offset of field: _xmlSecKeyUseWith::reserved1"]
        [::std::mem::offset_of!(_xmlSecKeyUseWith, reserved1) - 16usize];
    ["Offset of field: _xmlSecKeyUseWith::reserved2"]
        [::std::mem::offset_of!(_xmlSecKeyUseWith, reserved2) - 24usize];
};
extern "C" {
    pub fn xmlSecKeyUseWithPtrListGetKlass() -> xmlSecPtrListId;
}
#[doc = " xmlSecKeyReq - what key are we looking for?\n"]
pub type xmlSecKeyReq = _xmlSecKeyReq;
#[doc = " xmlSecKeyReq - what key are we looking for?\n"]
pub type xmlSecKeyReqPtr = *mut _xmlSecKeyReq;
#[doc = " xmlSecKeyReq:\n @keyId:              the desired key value klass.\n @keyType:            the desired key type.\n @keyUsage:           the desired key usage.\n @keyBitsSize:        the desired key size (in bits!).\n @keyUseWithList:     the desired key use with application/identifier information.\n @reserved1:          reserved for future use.\n @reserved2:          reserved for future use.\n\n The key requirements information."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyReq {
    pub keyId: xmlSecKeyDataId,
    pub keyType: xmlSecKeyDataType,
    pub keyUsage: xmlSecKeyUsage,
    pub keyBitsSize: usize,
    pub keyUseWithList: xmlSecPtrList,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecKeyReq"][::std::mem::size_of::<_xmlSecKeyReq>() - 80usize];
    ["Alignment of _xmlSecKeyReq"][::std::mem::align_of::<_xmlSecKeyReq>() - 8usize];
    ["Offset of field: _xmlSecKeyReq::keyId"]
        [::std::mem::offset_of!(_xmlSecKeyReq, keyId) - 0usize];
    ["Offset of field: _xmlSecKeyReq::keyType"]
        [::std::mem::offset_of!(_xmlSecKeyReq, keyType) - 8usize];
    ["Offset of field: _xmlSecKeyReq::keyUsage"]
        [::std::mem::offset_of!(_xmlSecKeyReq, keyUsage) - 12usize];
    ["Offset of field: _xmlSecKeyReq::keyBitsSize"]
        [::std::mem::offset_of!(_xmlSecKeyReq, keyBitsSize) - 16usize];
    ["Offset of field: _xmlSecKeyReq::keyUseWithList"]
        [::std::mem::offset_of!(_xmlSecKeyReq, keyUseWithList) - 24usize];
    ["Offset of field: _xmlSecKeyReq::reserved1"]
        [::std::mem::offset_of!(_xmlSecKeyReq, reserved1) - 64usize];
    ["Offset of field: _xmlSecKeyReq::reserved2"]
        [::std::mem::offset_of!(_xmlSecKeyReq, reserved2) - 72usize];
};
extern "C" {
    pub fn xmlSecKeyReqInitialize(keyReq: xmlSecKeyReqPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyReqFinalize(keyReq: xmlSecKeyReqPtr);
}
extern "C" {
    pub fn xmlSecKeyReqReset(keyReq: xmlSecKeyReqPtr);
}
extern "C" {
    pub fn xmlSecKeyReqCopy(dst: xmlSecKeyReqPtr, src: xmlSecKeyReqPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyReqMatchKey(
        keyReq: xmlSecKeyReqPtr,
        key: xmlSecKeyPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyReqMatchKeyValue(
        keyReq: xmlSecKeyReqPtr,
        value: xmlSecKeyDataPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyReqDebugDump(keyReq: xmlSecKeyReqPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecKeyReqDebugXmlDump(keyReq: xmlSecKeyReqPtr, output: *mut FILE);
}
#[doc = " xmlSecKey:\n @name:               the key name.\n @value:              the key value.\n @dataList:           the key data list.\n @usage:              the key usage.\n @notValidBefore:     the start key validity interval.\n @notValidAfter:      the end key validity interval.\n\n The key."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKey {
    pub name: *mut xmlChar,
    pub value: xmlSecKeyDataPtr,
    pub dataList: xmlSecPtrListPtr,
    pub usage: xmlSecKeyUsage,
    pub notValidBefore: time_t,
    pub notValidAfter: time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecKey"][::std::mem::size_of::<_xmlSecKey>() - 48usize];
    ["Alignment of _xmlSecKey"][::std::mem::align_of::<_xmlSecKey>() - 8usize];
    ["Offset of field: _xmlSecKey::name"][::std::mem::offset_of!(_xmlSecKey, name) - 0usize];
    ["Offset of field: _xmlSecKey::value"][::std::mem::offset_of!(_xmlSecKey, value) - 8usize];
    ["Offset of field: _xmlSecKey::dataList"]
        [::std::mem::offset_of!(_xmlSecKey, dataList) - 16usize];
    ["Offset of field: _xmlSecKey::usage"][::std::mem::offset_of!(_xmlSecKey, usage) - 24usize];
    ["Offset of field: _xmlSecKey::notValidBefore"]
        [::std::mem::offset_of!(_xmlSecKey, notValidBefore) - 32usize];
    ["Offset of field: _xmlSecKey::notValidAfter"]
        [::std::mem::offset_of!(_xmlSecKey, notValidAfter) - 40usize];
};
extern "C" {
    pub fn xmlSecKeyCreate() -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecKeyDestroy(key: xmlSecKeyPtr);
}
extern "C" {
    pub fn xmlSecKeyEmpty(key: xmlSecKeyPtr);
}
extern "C" {
    pub fn xmlSecKeyDuplicate(key: xmlSecKeyPtr) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecKeyCopy(keyDst: xmlSecKeyPtr, keySrc: xmlSecKeyPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeySwap(key1: xmlSecKeyPtr, key2: xmlSecKeyPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyGetName(key: xmlSecKeyPtr) -> *const xmlChar;
}
extern "C" {
    pub fn xmlSecKeySetName(key: xmlSecKeyPtr, name: *const xmlChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeySetNameEx(
        key: xmlSecKeyPtr,
        name: *const xmlChar,
        nameSize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyGetType(key: xmlSecKeyPtr) -> xmlSecKeyDataType;
}
extern "C" {
    pub fn xmlSecKeyGetValue(key: xmlSecKeyPtr) -> xmlSecKeyDataPtr;
}
extern "C" {
    pub fn xmlSecKeySetValue(key: xmlSecKeyPtr, value: xmlSecKeyDataPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyGetSize(key: xmlSecKeyPtr) -> usize;
}
extern "C" {
    pub fn xmlSecKeyGetData(key: xmlSecKeyPtr, dataId: xmlSecKeyDataId) -> xmlSecKeyDataPtr;
}
extern "C" {
    pub fn xmlSecKeyEnsureData(key: xmlSecKeyPtr, dataId: xmlSecKeyDataId) -> xmlSecKeyDataPtr;
}
extern "C" {
    pub fn xmlSecKeyAdoptData(key: xmlSecKeyPtr, data: xmlSecKeyDataPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyDebugDump(key: xmlSecKeyPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecKeyDebugXmlDump(key: xmlSecKeyPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecKeyGenerate(
        dataId: xmlSecKeyDataId,
        sizeBits: usize,
        type_: xmlSecKeyDataType,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecKeyGenerateByName(
        name: *const xmlChar,
        sizeBits: usize,
        type_: xmlSecKeyDataType,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecKeyMatch(
        key: xmlSecKeyPtr,
        name: *const xmlChar,
        keyReq: xmlSecKeyReqPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyReadBuffer(dataId: xmlSecKeyDataId, buffer: *mut xmlSecBuffer) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecKeyReadBinaryFile(
        dataId: xmlSecKeyDataId,
        filename: *const ::std::os::raw::c_char,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecKeyReadMemory(
        dataId: xmlSecKeyDataId,
        data: *const xmlSecByte,
        dataSize: usize,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecKeyPtrListGetKlass() -> xmlSecPtrListId;
}
pub type xmlNodeSet = _xmlNodeSet;
pub type xmlNodeSetPtr = *mut xmlNodeSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlNodeSet {
    pub nodeNr: ::std::os::raw::c_int,
    pub nodeMax: ::std::os::raw::c_int,
    pub nodeTab: *mut xmlNodePtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlNodeSet"][::std::mem::size_of::<_xmlNodeSet>() - 16usize];
    ["Alignment of _xmlNodeSet"][::std::mem::align_of::<_xmlNodeSet>() - 8usize];
    ["Offset of field: _xmlNodeSet::nodeNr"][::std::mem::offset_of!(_xmlNodeSet, nodeNr) - 0usize];
    ["Offset of field: _xmlNodeSet::nodeMax"]
        [::std::mem::offset_of!(_xmlNodeSet, nodeMax) - 4usize];
    ["Offset of field: _xmlNodeSet::nodeTab"]
        [::std::mem::offset_of!(_xmlNodeSet, nodeTab) - 8usize];
};
#[doc = " xmlSecNodeSet:\n @nodes:                      the nodes list.\n @doc:                        the parent XML document.\n @destroyDoc:                 the flag: if set to 1 then @doc will\n                              be destroyed when node set is destroyed.\n @type:                       the nodes set type.\n @op:                         the operation type.\n @next:                       the next nodes set.\n @prev:                       the previous nodes set.\n @children:                   the children list (valid only if type\n                              equal to #xmlSecNodeSetList).\n\n The enchanced nodes set."]
pub type xmlSecNodeSet = _xmlSecNodeSet;
pub type xmlSecNodeSetPtr = *mut _xmlSecNodeSet;
pub const xmlSecNodeSetType_xmlSecNodeSetNormal: xmlSecNodeSetType = 0;
pub const xmlSecNodeSetType_xmlSecNodeSetInvert: xmlSecNodeSetType = 1;
pub const xmlSecNodeSetType_xmlSecNodeSetTree: xmlSecNodeSetType = 2;
pub const xmlSecNodeSetType_xmlSecNodeSetTreeWithoutComments: xmlSecNodeSetType = 3;
pub const xmlSecNodeSetType_xmlSecNodeSetTreeInvert: xmlSecNodeSetType = 4;
pub const xmlSecNodeSetType_xmlSecNodeSetTreeWithoutCommentsInvert: xmlSecNodeSetType = 5;
pub const xmlSecNodeSetType_xmlSecNodeSetList: xmlSecNodeSetType = 6;
#[doc = " xmlSecNodeSetType:\n @xmlSecNodeSetNormal:        nodes set = nodes in the list.\n @xmlSecNodeSetInvert:        nodes set = all document nodes minus nodes in the list.\n @xmlSecNodeSetTree:          nodes set = nodes in the list and all their subtress.\n @xmlSecNodeSetTreeWithoutComments:           nodes set = nodes in the list and\n                              all their subtress but no comment nodes.\n @xmlSecNodeSetTreeInvert:    nodes set = all document nodes minus nodes in the\n                              list and all their subtress.\n @xmlSecNodeSetTreeWithoutCommentsInvert:     nodes set = all document nodes\n                              minus (nodes in the list and all their subtress\n                              plus all comment nodes).\n @xmlSecNodeSetList:          nodes set = all nodes in the children list of nodes sets.\n\n The basic nodes sets types."]
pub type xmlSecNodeSetType = ::std::os::raw::c_uint;
pub const xmlSecNodeSetOp_xmlSecNodeSetIntersection: xmlSecNodeSetOp = 0;
pub const xmlSecNodeSetOp_xmlSecNodeSetSubtraction: xmlSecNodeSetOp = 1;
pub const xmlSecNodeSetOp_xmlSecNodeSetUnion: xmlSecNodeSetOp = 2;
#[doc = " xmlSecNodeSetOp:\n @xmlSecNodeSetIntersection:  intersection.\n @xmlSecNodeSetSubtraction:   subtraction.\n @xmlSecNodeSetUnion:         union.\n\n The simple nodes sets operations."]
pub type xmlSecNodeSetOp = ::std::os::raw::c_uint;
#[doc = " xmlSecNodeSet:\n @nodes:                      the nodes list.\n @doc:                        the parent XML document.\n @destroyDoc:                 the flag: if set to 1 then @doc will\n                              be destroyed when node set is destroyed.\n @type:                       the nodes set type.\n @op:                         the operation type.\n @next:                       the next nodes set.\n @prev:                       the previous nodes set.\n @children:                   the children list (valid only if type\n                              equal to #xmlSecNodeSetList).\n\n The enchanced nodes set."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecNodeSet {
    pub nodes: xmlNodeSetPtr,
    pub doc: xmlDocPtr,
    pub destroyDoc: ::std::os::raw::c_int,
    pub type_: xmlSecNodeSetType,
    pub op: xmlSecNodeSetOp,
    pub next: xmlSecNodeSetPtr,
    pub prev: xmlSecNodeSetPtr,
    pub children: xmlSecNodeSetPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecNodeSet"][::std::mem::size_of::<_xmlSecNodeSet>() - 56usize];
    ["Alignment of _xmlSecNodeSet"][::std::mem::align_of::<_xmlSecNodeSet>() - 8usize];
    ["Offset of field: _xmlSecNodeSet::nodes"]
        [::std::mem::offset_of!(_xmlSecNodeSet, nodes) - 0usize];
    ["Offset of field: _xmlSecNodeSet::doc"][::std::mem::offset_of!(_xmlSecNodeSet, doc) - 8usize];
    ["Offset of field: _xmlSecNodeSet::destroyDoc"]
        [::std::mem::offset_of!(_xmlSecNodeSet, destroyDoc) - 16usize];
    ["Offset of field: _xmlSecNodeSet::type_"]
        [::std::mem::offset_of!(_xmlSecNodeSet, type_) - 20usize];
    ["Offset of field: _xmlSecNodeSet::op"][::std::mem::offset_of!(_xmlSecNodeSet, op) - 24usize];
    ["Offset of field: _xmlSecNodeSet::next"]
        [::std::mem::offset_of!(_xmlSecNodeSet, next) - 32usize];
    ["Offset of field: _xmlSecNodeSet::prev"]
        [::std::mem::offset_of!(_xmlSecNodeSet, prev) - 40usize];
    ["Offset of field: _xmlSecNodeSet::children"]
        [::std::mem::offset_of!(_xmlSecNodeSet, children) - 48usize];
};
#[doc = " xmlSecNodeSetWalkCallback:\n @nset:                       the pointer to #xmlSecNodeSet structure.\n @cur:                        the pointer current XML node.\n @parent:                     the pointer to the @cur parent node.\n @data:                       the pointer to application specific data.\n\n The callback function called once per each node in the nodes set.\n\n Returns: 0 on success or a negative value if an error occurs\n an walk procedure should be interrupted."]
pub type xmlSecNodeSetWalkCallback = ::std::option::Option<
    unsafe extern "C" fn(
        nset: xmlSecNodeSetPtr,
        cur: xmlNodePtr,
        parent: xmlNodePtr,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn xmlSecNodeSetCreate(
        doc: xmlDocPtr,
        nodes: xmlNodeSetPtr,
        type_: xmlSecNodeSetType,
    ) -> xmlSecNodeSetPtr;
}
extern "C" {
    pub fn xmlSecNodeSetDestroy(nset: xmlSecNodeSetPtr);
}
extern "C" {
    pub fn xmlSecNodeSetDocDestroy(nset: xmlSecNodeSetPtr);
}
extern "C" {
    pub fn xmlSecNodeSetContains(
        nset: xmlSecNodeSetPtr,
        node: xmlNodePtr,
        parent: xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecNodeSetAdd(
        nset: xmlSecNodeSetPtr,
        newNSet: xmlSecNodeSetPtr,
        op: xmlSecNodeSetOp,
    ) -> xmlSecNodeSetPtr;
}
extern "C" {
    pub fn xmlSecNodeSetAddList(
        nset: xmlSecNodeSetPtr,
        newNSet: xmlSecNodeSetPtr,
        op: xmlSecNodeSetOp,
    ) -> xmlSecNodeSetPtr;
}
extern "C" {
    pub fn xmlSecNodeSetGetChildren(
        doc: xmlDocPtr,
        parent: xmlNodePtr,
        withComments: ::std::os::raw::c_int,
        invert: ::std::os::raw::c_int,
    ) -> xmlSecNodeSetPtr;
}
extern "C" {
    pub fn xmlSecNodeSetWalk(
        nset: xmlSecNodeSetPtr,
        walkFunc: xmlSecNodeSetWalkCallback,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecNodeSetDumpTextNodes(
        nset: xmlSecNodeSetPtr,
        out: xmlOutputBufferPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecNodeSetDebugDump(nset: xmlSecNodeSetPtr, output: *mut FILE);
}
#[doc = " xmlSecTransformKlass:\n @klassSize:                  the transform klass structure size.\n @objSize:                    the transform object size.\n @name:                       the transform's name.\n @href:                       the transform's identification string (href).\n @usage:                      the allowed transforms usages.\n @initialize:                 the initialization method.\n @finalize:                   the finalization (destroy) function.\n @readNode:                   the XML node read method.\n @writeNode:                  the XML node write method.\n @setKeyReq:                  the set key requirements method.\n @setKey:                     the set key method.\n @verify:                     the verify method (for digest and signature transforms).\n @getDataType:                the input/output data type query method.\n @pushBin:                    the binary data \"push thru chain\" processing method.\n @popBin:                     the binary data \"pop from chain\" procesing method.\n @pushXml:                    the XML data \"push thru chain\" processing method.\n @popXml:                     the XML data \"pop from chain\" procesing method.\n @execute:                    the low level data processing method used  by default\n                              implementations of @pushBin, @popBin, @pushXml and @popXml.\n @reserved0:                  reserved for the future.\n @reserved1:                  reserved for the future.\n\n The transform klass description structure."]
pub type xmlSecTransformKlass = _xmlSecTransformKlass;
pub type xmlSecTransformId = *const _xmlSecTransformKlass;
extern "C" {
    #[doc = " High-level functions\n"]
    pub fn xmlSecTransformIdsGet() -> xmlSecPtrListPtr;
}
extern "C" {
    pub fn xmlSecTransformIdsInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformIdsShutdown();
}
extern "C" {
    pub fn xmlSecTransformIdsRegisterDefault() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformIdsRegister(id: xmlSecTransformId) -> ::std::os::raw::c_int;
}
pub const xmlSecTransformStatus_xmlSecTransformStatusNone: xmlSecTransformStatus = 0;
pub const xmlSecTransformStatus_xmlSecTransformStatusWorking: xmlSecTransformStatus = 1;
pub const xmlSecTransformStatus_xmlSecTransformStatusFinished: xmlSecTransformStatus = 2;
pub const xmlSecTransformStatus_xmlSecTransformStatusOk: xmlSecTransformStatus = 3;
pub const xmlSecTransformStatus_xmlSecTransformStatusFail: xmlSecTransformStatus = 4;
#[doc = " xmlSecTransformStatus:\n @xmlSecTransformStatusNone:          the status unknown.\n @xmlSecTransformStatusWorking:       the transform is executed.\n @xmlSecTransformStatusFinished:      the transform finished\n @xmlSecTransformStatusOk:            the transform succeeded.\n @xmlSecTransformStatusFail:          the transform failed (an error occur).\n\n The transform execution status."]
pub type xmlSecTransformStatus = ::std::os::raw::c_uint;
pub const xmlSecTransformMode_xmlSecTransformModeNone: xmlSecTransformMode = 0;
pub const xmlSecTransformMode_xmlSecTransformModePush: xmlSecTransformMode = 1;
pub const xmlSecTransformMode_xmlSecTransformModePop: xmlSecTransformMode = 2;
#[doc = " xmlSecTransformMode:\n @xmlSecTransformModeNone:            the mode is unknown.\n @xmlSecTransformModePush:            pushing data thru transform.\n @xmlSecTransformModePop:             popping data from transform.\n\n The transform operation mode"]
pub type xmlSecTransformMode = ::std::os::raw::c_uint;
pub const xmlSecTransformOperation_xmlSecTransformOperationNone: xmlSecTransformOperation = 0;
pub const xmlSecTransformOperation_xmlSecTransformOperationEncode: xmlSecTransformOperation = 1;
pub const xmlSecTransformOperation_xmlSecTransformOperationDecode: xmlSecTransformOperation = 2;
pub const xmlSecTransformOperation_xmlSecTransformOperationSign: xmlSecTransformOperation = 3;
pub const xmlSecTransformOperation_xmlSecTransformOperationVerify: xmlSecTransformOperation = 4;
pub const xmlSecTransformOperation_xmlSecTransformOperationEncrypt: xmlSecTransformOperation = 5;
pub const xmlSecTransformOperation_xmlSecTransformOperationDecrypt: xmlSecTransformOperation = 6;
#[doc = " xmlSecTransformOperation:\n @xmlSecTransformOperationNone:       the operation is unknown.\n @xmlSecTransformOperationEncode:     the encode operation (for base64 transform).\n @xmlSecTransformOperationDecode:     the decode operation (for base64 transform).\n @xmlSecTransformOperationSign:       the sign or digest operation.\n @xmlSecTransformOperationVerify:     the verification of signature or digest operation.\n @xmlSecTransformOperationEncrypt:    the encryption operation.\n @xmlSecTransformOperationDecrypt:    the decryption operation.\n\n The transform operation."]
pub type xmlSecTransformOperation = ::std::os::raw::c_uint;
#[doc = " xmlSecTransformUriType:\n\n/\n/**\n xmlSecTransformUriType:\n\n URI transform type bit mask."]
pub type xmlSecTransformUriType = ::std::os::raw::c_uint;
extern "C" {
    pub fn xmlSecTransformUriTypeCheck(
        type_: xmlSecTransformUriType,
        uri: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
#[doc = " xmlSecTransformDataType\n\n/\n/**\n xmlSecTransformDataType:\n\n Transform data type bit mask."]
pub type xmlSecTransformDataType = xmlSecByte;
#[doc = " xmlSecTransformUsage\n\n/\n/**\n xmlSecTransformUsage:\n\n The transform usage bit mask."]
pub type xmlSecTransformUsage = ::std::os::raw::c_uint;
#[doc = " xmlSecTransformCtx\n\n/\n/**\n xmlSecTransformCtxPreExecuteCallback:\n @transformCtx:       the pointer to transform's context.\n\n The callback called after creating transforms chain but before\n starting data processing. Application can use this callback to\n do additional transforms chain verification or modification and\n aborting transforms execution (if necessary).\n\n Returns: 0 on success and a negative value otherwise (in this case,\n transforms chain will not be executed and xmlsec processing stops)."]
pub type xmlSecTransformCtxPreExecuteCallback = ::std::option::Option<
    unsafe extern "C" fn(transformCtx: xmlSecTransformCtxPtr) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformCtx:\n @userData:           the pointer to user data (xmlsec and xmlsec-crypto never\n                      touch this).\n @flags:              the bit mask flags to control transforms execution\n                      (reserved for the future).\n @flags2:             the bit mask flags to control transforms execution\n                      (reserved for the future).\n @binaryChunkSize:    the chunk of size for binary transforms processing.\n @enabledUris:        the allowed transform data source uri types.\n @enabledTransforms:  the list of enabled transforms; if list is empty (default)\n                      then all registered transforms are enabled.\n @preExecCallback:    the callback called after preparing transform chain\n                      and right before actual data processing; application\n                      can use this callback to change transforms parameters,\n                      insert additional transforms in the chain or do\n                      additional validation (and abort transform execution\n                      if needed).\n @parentKeyInfoCtx:   the parent's key info ctx for key agreement.\n @result:             the pointer to transforms result buffer.\n @status:             the transforms chain processing status.\n @uri:                the data source URI without xpointer expression.\n @xptrExpr:           the xpointer expression from data source URI (if any).\n @first:              the first transform in the chain.\n @last:               the last transform in the chain.\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The transform execution context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecTransformCtx {
    pub userData: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_uint,
    pub flags2: ::std::os::raw::c_uint,
    pub binaryChunkSize: usize,
    pub enabledUris: xmlSecTransformUriType,
    pub enabledTransforms: xmlSecPtrList,
    pub preExecCallback: xmlSecTransformCtxPreExecuteCallback,
    pub parentKeyInfoCtx: xmlSecKeyInfoCtxPtr,
    pub result: xmlSecBufferPtr,
    pub status: xmlSecTransformStatus,
    pub uri: *mut xmlChar,
    pub xptrExpr: *mut xmlChar,
    pub first: xmlSecTransformPtr,
    pub last: xmlSecTransformPtr,
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecTransformCtx"][::std::mem::size_of::<_xmlSecTransformCtx>() - 152usize];
    ["Alignment of _xmlSecTransformCtx"][::std::mem::align_of::<_xmlSecTransformCtx>() - 8usize];
    ["Offset of field: _xmlSecTransformCtx::userData"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, userData) - 0usize];
    ["Offset of field: _xmlSecTransformCtx::flags"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, flags) - 8usize];
    ["Offset of field: _xmlSecTransformCtx::flags2"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, flags2) - 12usize];
    ["Offset of field: _xmlSecTransformCtx::binaryChunkSize"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, binaryChunkSize) - 16usize];
    ["Offset of field: _xmlSecTransformCtx::enabledUris"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, enabledUris) - 24usize];
    ["Offset of field: _xmlSecTransformCtx::enabledTransforms"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, enabledTransforms) - 32usize];
    ["Offset of field: _xmlSecTransformCtx::preExecCallback"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, preExecCallback) - 72usize];
    ["Offset of field: _xmlSecTransformCtx::parentKeyInfoCtx"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, parentKeyInfoCtx) - 80usize];
    ["Offset of field: _xmlSecTransformCtx::result"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, result) - 88usize];
    ["Offset of field: _xmlSecTransformCtx::status"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, status) - 96usize];
    ["Offset of field: _xmlSecTransformCtx::uri"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, uri) - 104usize];
    ["Offset of field: _xmlSecTransformCtx::xptrExpr"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, xptrExpr) - 112usize];
    ["Offset of field: _xmlSecTransformCtx::first"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, first) - 120usize];
    ["Offset of field: _xmlSecTransformCtx::last"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, last) - 128usize];
    ["Offset of field: _xmlSecTransformCtx::reserved0"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, reserved0) - 136usize];
    ["Offset of field: _xmlSecTransformCtx::reserved1"]
        [::std::mem::offset_of!(_xmlSecTransformCtx, reserved1) - 144usize];
};
extern "C" {
    pub fn xmlSecTransformCtxCreate() -> xmlSecTransformCtxPtr;
}
extern "C" {
    pub fn xmlSecTransformCtxDestroy(ctx: xmlSecTransformCtxPtr);
}
extern "C" {
    pub fn xmlSecTransformCtxInitialize(ctx: xmlSecTransformCtxPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformCtxFinalize(ctx: xmlSecTransformCtxPtr);
}
extern "C" {
    pub fn xmlSecTransformCtxReset(ctx: xmlSecTransformCtxPtr);
}
extern "C" {
    pub fn xmlSecTransformCtxCopyUserPref(
        dst: xmlSecTransformCtxPtr,
        src: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformCtxSetUri(
        ctx: xmlSecTransformCtxPtr,
        uri: *const xmlChar,
        hereNode: xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformCtxAppend(
        ctx: xmlSecTransformCtxPtr,
        transform: xmlSecTransformPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformCtxPrepend(
        ctx: xmlSecTransformCtxPtr,
        transform: xmlSecTransformPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformCtxCreateAndAppend(
        ctx: xmlSecTransformCtxPtr,
        id: xmlSecTransformId,
    ) -> xmlSecTransformPtr;
}
extern "C" {
    pub fn xmlSecTransformCtxCreateAndPrepend(
        ctx: xmlSecTransformCtxPtr,
        id: xmlSecTransformId,
    ) -> xmlSecTransformPtr;
}
extern "C" {
    pub fn xmlSecTransformCtxNodeRead(
        ctx: xmlSecTransformCtxPtr,
        node: xmlNodePtr,
        usage: xmlSecTransformUsage,
    ) -> xmlSecTransformPtr;
}
extern "C" {
    pub fn xmlSecTransformCtxNodesListRead(
        ctx: xmlSecTransformCtxPtr,
        node: xmlNodePtr,
        usage: xmlSecTransformUsage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformCtxPrepare(
        ctx: xmlSecTransformCtxPtr,
        inputDataType: xmlSecTransformDataType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformCtxBinaryExecute(
        ctx: xmlSecTransformCtxPtr,
        data: *const xmlSecByte,
        dataSize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformCtxUriExecute(
        ctx: xmlSecTransformCtxPtr,
        uri: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformCtxXmlExecute(
        ctx: xmlSecTransformCtxPtr,
        nodes: xmlSecNodeSetPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformCtxExecute(
        ctx: xmlSecTransformCtxPtr,
        doc: xmlDocPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformCtxDebugDump(ctx: xmlSecTransformCtxPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecTransformCtxDebugXmlDump(ctx: xmlSecTransformCtxPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecTransformCtxGetDefaultBinaryChunkSize() -> usize;
}
extern "C" {
    pub fn xmlSecTransformCtxSetDefaultBinaryChunkSize(binaryChunkSize: usize);
}
#[doc = " xmlSecTransform\n\n/\n/**\n xmlSecTransform:\n @id:                 the transform id (pointer to #xmlSecTransformId).\n @operation:          the transform's operation.\n @status:             the current status.\n @hereNode:           the pointer to transform's <dsig:Transform /> node.\n @next:               the pointer to next transform in the chain.\n @prev:               the pointer to previous transform in the chain.\n @inBuf:              the input binary data buffer.\n @outBuf:             the output binary data buffer.\n @inNodes:            the input XML nodes.\n @outNodes:           the output XML nodes.\n @expectedOutputSize: the expected transform output size (used for key wraps).\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The transform structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecTransform {
    pub id: xmlSecTransformId,
    pub operation: xmlSecTransformOperation,
    pub status: xmlSecTransformStatus,
    pub hereNode: xmlNodePtr,
    pub next: xmlSecTransformPtr,
    pub prev: xmlSecTransformPtr,
    pub inBuf: xmlSecBuffer,
    pub outBuf: xmlSecBuffer,
    pub inNodes: xmlSecNodeSetPtr,
    pub outNodes: xmlSecNodeSetPtr,
    pub expectedOutputSize: usize,
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecTransform"][::std::mem::size_of::<_xmlSecTransform>() - 144usize];
    ["Alignment of _xmlSecTransform"][::std::mem::align_of::<_xmlSecTransform>() - 8usize];
    ["Offset of field: _xmlSecTransform::id"]
        [::std::mem::offset_of!(_xmlSecTransform, id) - 0usize];
    ["Offset of field: _xmlSecTransform::operation"]
        [::std::mem::offset_of!(_xmlSecTransform, operation) - 8usize];
    ["Offset of field: _xmlSecTransform::status"]
        [::std::mem::offset_of!(_xmlSecTransform, status) - 12usize];
    ["Offset of field: _xmlSecTransform::hereNode"]
        [::std::mem::offset_of!(_xmlSecTransform, hereNode) - 16usize];
    ["Offset of field: _xmlSecTransform::next"]
        [::std::mem::offset_of!(_xmlSecTransform, next) - 24usize];
    ["Offset of field: _xmlSecTransform::prev"]
        [::std::mem::offset_of!(_xmlSecTransform, prev) - 32usize];
    ["Offset of field: _xmlSecTransform::inBuf"]
        [::std::mem::offset_of!(_xmlSecTransform, inBuf) - 40usize];
    ["Offset of field: _xmlSecTransform::outBuf"]
        [::std::mem::offset_of!(_xmlSecTransform, outBuf) - 72usize];
    ["Offset of field: _xmlSecTransform::inNodes"]
        [::std::mem::offset_of!(_xmlSecTransform, inNodes) - 104usize];
    ["Offset of field: _xmlSecTransform::outNodes"]
        [::std::mem::offset_of!(_xmlSecTransform, outNodes) - 112usize];
    ["Offset of field: _xmlSecTransform::expectedOutputSize"]
        [::std::mem::offset_of!(_xmlSecTransform, expectedOutputSize) - 120usize];
    ["Offset of field: _xmlSecTransform::reserved0"]
        [::std::mem::offset_of!(_xmlSecTransform, reserved0) - 128usize];
    ["Offset of field: _xmlSecTransform::reserved1"]
        [::std::mem::offset_of!(_xmlSecTransform, reserved1) - 136usize];
};
extern "C" {
    pub fn xmlSecTransformCreate(id: xmlSecTransformId) -> xmlSecTransformPtr;
}
extern "C" {
    pub fn xmlSecTransformDestroy(transform: xmlSecTransformPtr);
}
extern "C" {
    pub fn xmlSecTransformNodeRead(
        node: xmlNodePtr,
        usage: xmlSecTransformUsage,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> xmlSecTransformPtr;
}
extern "C" {
    pub fn xmlSecTransformPump(
        left: xmlSecTransformPtr,
        right: xmlSecTransformPtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformSetKey(
        transform: xmlSecTransformPtr,
        key: xmlSecKeyPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformSetKeyReq(
        transform: xmlSecTransformPtr,
        keyReq: xmlSecKeyReqPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformVerify(
        transform: xmlSecTransformPtr,
        data: *const xmlSecByte,
        dataSize: usize,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformVerifyNodeContent(
        transform: xmlSecTransformPtr,
        node: xmlNodePtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformGetDataType(
        transform: xmlSecTransformPtr,
        mode: xmlSecTransformMode,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> xmlSecTransformDataType;
}
extern "C" {
    pub fn xmlSecTransformPushBin(
        transform: xmlSecTransformPtr,
        data: *const xmlSecByte,
        dataSize: usize,
        final_: ::std::os::raw::c_int,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformPopBin(
        transform: xmlSecTransformPtr,
        data: *mut xmlSecByte,
        maxDataSize: usize,
        dataSize: *mut usize,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformPushXml(
        transform: xmlSecTransformPtr,
        nodes: xmlSecNodeSetPtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformPopXml(
        transform: xmlSecTransformPtr,
        nodes: *mut xmlSecNodeSetPtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformExecute(
        transform: xmlSecTransformPtr,
        last: ::std::os::raw::c_int,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformDebugDump(transform: xmlSecTransformPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecTransformDebugXmlDump(transform: xmlSecTransformPtr, output: *mut FILE);
}
extern "C" {
    #[doc = " Operations on transforms chain\n"]
    pub fn xmlSecTransformConnect(
        left: xmlSecTransformPtr,
        right: xmlSecTransformPtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformRemove(transform: xmlSecTransformPtr);
}
extern "C" {
    #[doc = " Default callbacks, most of the transforms can use them\n"]
    pub fn xmlSecTransformDefaultGetDataType(
        transform: xmlSecTransformPtr,
        mode: xmlSecTransformMode,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> xmlSecTransformDataType;
}
extern "C" {
    pub fn xmlSecTransformDefaultPushBin(
        transform: xmlSecTransformPtr,
        data: *const xmlSecByte,
        dataSize: usize,
        final_: ::std::os::raw::c_int,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformDefaultPopBin(
        transform: xmlSecTransformPtr,
        data: *mut xmlSecByte,
        maxDataSize: usize,
        dataSize: *mut usize,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformDefaultPushXml(
        transform: xmlSecTransformPtr,
        nodes: xmlSecNodeSetPtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformDefaultPopXml(
        transform: xmlSecTransformPtr,
        nodes: *mut xmlSecNodeSetPtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " IO buffers for transforms\n"]
    pub fn xmlSecTransformCreateOutputBuffer(
        transform: xmlSecTransformPtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> xmlOutputBufferPtr;
}
extern "C" {
    pub fn xmlSecTransformCreateInputBuffer(
        transform: xmlSecTransformPtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> xmlParserInputBufferPtr;
}
#[doc = " Transform Klass\n\n/\n/**\n xmlSecTransformInitializeMethod:\n @transform:                  the pointer to transform object.\n\n The transform specific initialization method.\n\n Returns: 0 on success or a negative value otherwise."]
pub type xmlSecTransformInitializeMethod = ::std::option::Option<
    unsafe extern "C" fn(transform: xmlSecTransformPtr) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformFinalizeMethod:\n @transform:                  the pointer to transform object.\n\n The transform specific destroy method."]
pub type xmlSecTransformFinalizeMethod =
    ::std::option::Option<unsafe extern "C" fn(transform: xmlSecTransformPtr)>;
#[doc = " xmlSecTransformGetDataTypeMethod:\n @transform:                  the pointer to transform object.\n @mode:                       the mode.\n @transformCtx:               the pointer to transform context object.\n\n The transform specific method to query information about transform\n data type in specified mode @mode.\n\n Returns: transform data type."]
pub type xmlSecTransformGetDataTypeMethod = ::std::option::Option<
    unsafe extern "C" fn(
        transform: xmlSecTransformPtr,
        mode: xmlSecTransformMode,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> xmlSecTransformDataType,
>;
#[doc = " xmlSecTransformNodeReadMethod:\n @transform:                  the pointer to transform object.\n @node:                       the pointer to &lt;dsig:Transform/&gt; node.\n @transformCtx:               the pointer to transform context object.\n\n The transform specific method to read the transform data from\n the @node.\n\n Returns: 0 on success or a negative value otherwise."]
pub type xmlSecTransformNodeReadMethod = ::std::option::Option<
    unsafe extern "C" fn(
        transform: xmlSecTransformPtr,
        node: xmlNodePtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformNodeWriteMethod:\n @transform:                  the pointer to transform object.\n @node:                       the pointer to &lt;dsig:Transform/&gt; node.\n @transformCtx:               the pointer to transform context object.\n\n The transform specific method to write transform information to an XML node @node.\n\n Returns: 0 on success or a negative value otherwise."]
pub type xmlSecTransformNodeWriteMethod = ::std::option::Option<
    unsafe extern "C" fn(
        transform: xmlSecTransformPtr,
        node: xmlNodePtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformSetKeyRequirementsMethod:\n @transform:                  the pointer to transform object.\n @keyReq:                     the pointer to key requirements structure.\n\n Transform specific method to set transform's key requirements.\n\n Returns: 0 on success or a negative value otherwise."]
pub type xmlSecTransformSetKeyRequirementsMethod = ::std::option::Option<
    unsafe extern "C" fn(
        transform: xmlSecTransformPtr,
        keyReq: xmlSecKeyReqPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformSetKeyMethod:\n @transform:                  the pointer to transform object.\n @key:                        the pointer to key.\n\n The transform specific method to set the key for use.\n\n Returns: 0 on success or a negative value otherwise."]
pub type xmlSecTransformSetKeyMethod = ::std::option::Option<
    unsafe extern "C" fn(transform: xmlSecTransformPtr, key: xmlSecKeyPtr) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformVerifyMethod:\n @transform:                  the pointer to transform object.\n @data:                       the input buffer.\n @dataSize:                   the size of input buffer @data.\n @transformCtx:               the pointer to transform context object.\n\n The transform specific method to verify transform processing results\n (used by digest and signature transforms). This method sets @status\n member of the #xmlSecTransform structure to either #xmlSecTransformStatusOk\n if verification succeeded or #xmlSecTransformStatusFail otherwise.\n\n Returns: 0 on success or a negative value otherwise."]
pub type xmlSecTransformVerifyMethod = ::std::option::Option<
    unsafe extern "C" fn(
        transform: xmlSecTransformPtr,
        data: *const xmlSecByte,
        dataSize: usize,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformPushBinMethod:\n @transform:                  the pointer to transform object.\n @data:                       the input binary data,\n @dataSize:                   the input data size.\n @final:                      the flag: if set to 1 then it's the last\n                              data chunk.\n @transformCtx:               the pointer to transform context object.\n\n The transform specific method to process data from @data and push\n result to the next transform in the chain.\n\n Returns: 0 on success or a negative value otherwise."]
pub type xmlSecTransformPushBinMethod = ::std::option::Option<
    unsafe extern "C" fn(
        transform: xmlSecTransformPtr,
        data: *const xmlSecByte,
        dataSize: usize,
        final_: ::std::os::raw::c_int,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformPopBinMethod:\n @transform:                  the pointer to transform object.\n @data:                       the buffer to store result data.\n @maxDataSize:                the size of the buffer @data.\n @dataSize:                   the pointer to returned data size.\n @transformCtx:               the pointer to transform context object.\n\n The transform specific method to pop data from previous transform\n in the chain and return result in the @data buffer. The size of returned\n data is placed in the @dataSize.\n\n Returns: 0 on success or a negative value otherwise."]
pub type xmlSecTransformPopBinMethod = ::std::option::Option<
    unsafe extern "C" fn(
        transform: xmlSecTransformPtr,
        data: *mut xmlSecByte,
        maxDataSize: usize,
        dataSize: *mut usize,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformPushXmlMethod:\n @transform:                  the pointer to transform object.\n @nodes:                      the input nodes.\n @transformCtx:               the pointer to transform context object.\n\n The transform specific method to process @nodes and push result to the next\n transform in the chain.\n\n Returns: 0 on success or a negative value otherwise."]
pub type xmlSecTransformPushXmlMethod = ::std::option::Option<
    unsafe extern "C" fn(
        transform: xmlSecTransformPtr,
        nodes: xmlSecNodeSetPtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformPopXmlMethod:\n @transform:                  the pointer to transform object.\n @nodes:                      the pointer to store popinter to result nodes.\n @transformCtx:               the pointer to transform context object.\n\n The transform specific method to pop data from previous transform in the chain,\n process the data and return result in @nodes.\n\n Returns: 0 on success or a negative value otherwise."]
pub type xmlSecTransformPopXmlMethod = ::std::option::Option<
    unsafe extern "C" fn(
        transform: xmlSecTransformPtr,
        nodes: *mut xmlSecNodeSetPtr,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformExecuteMethod:\n @transform:                  the pointer to transform object.\n @last:                       the flag: if set to 1 then it's the last data chunk.\n @transformCtx:               the pointer to transform context object.\n\n Transform specific method to process a chunk of data.\n\n Returns: 0 on success or a negative value otherwise."]
pub type xmlSecTransformExecuteMethod = ::std::option::Option<
    unsafe extern "C" fn(
        transform: xmlSecTransformPtr,
        last: ::std::os::raw::c_int,
        transformCtx: xmlSecTransformCtxPtr,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " xmlSecTransformKlass:\n @klassSize:                  the transform klass structure size.\n @objSize:                    the transform object size.\n @name:                       the transform's name.\n @href:                       the transform's identification string (href).\n @usage:                      the allowed transforms usages.\n @initialize:                 the initialization method.\n @finalize:                   the finalization (destroy) function.\n @readNode:                   the XML node read method.\n @writeNode:                  the XML node write method.\n @setKeyReq:                  the set key requirements method.\n @setKey:                     the set key method.\n @verify:                     the verify method (for digest and signature transforms).\n @getDataType:                the input/output data type query method.\n @pushBin:                    the binary data \"push thru chain\" processing method.\n @popBin:                     the binary data \"pop from chain\" procesing method.\n @pushXml:                    the XML data \"push thru chain\" processing method.\n @popXml:                     the XML data \"pop from chain\" procesing method.\n @execute:                    the low level data processing method used  by default\n                              implementations of @pushBin, @popBin, @pushXml and @popXml.\n @reserved0:                  reserved for the future.\n @reserved1:                  reserved for the future.\n\n The transform klass description structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecTransformKlass {
    pub klassSize: usize,
    pub objSize: usize,
    pub name: *const xmlChar,
    pub href: *const xmlChar,
    pub usage: xmlSecTransformUsage,
    pub initialize: xmlSecTransformInitializeMethod,
    pub finalize: xmlSecTransformFinalizeMethod,
    pub readNode: xmlSecTransformNodeReadMethod,
    pub writeNode: xmlSecTransformNodeWriteMethod,
    pub setKeyReq: xmlSecTransformSetKeyRequirementsMethod,
    pub setKey: xmlSecTransformSetKeyMethod,
    pub verify: xmlSecTransformVerifyMethod,
    pub getDataType: xmlSecTransformGetDataTypeMethod,
    pub pushBin: xmlSecTransformPushBinMethod,
    pub popBin: xmlSecTransformPopBinMethod,
    pub pushXml: xmlSecTransformPushXmlMethod,
    pub popXml: xmlSecTransformPopXmlMethod,
    pub execute: xmlSecTransformExecuteMethod,
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecTransformKlass"][::std::mem::size_of::<_xmlSecTransformKlass>() - 160usize];
    ["Alignment of _xmlSecTransformKlass"]
        [::std::mem::align_of::<_xmlSecTransformKlass>() - 8usize];
    ["Offset of field: _xmlSecTransformKlass::klassSize"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, klassSize) - 0usize];
    ["Offset of field: _xmlSecTransformKlass::objSize"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, objSize) - 8usize];
    ["Offset of field: _xmlSecTransformKlass::name"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, name) - 16usize];
    ["Offset of field: _xmlSecTransformKlass::href"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, href) - 24usize];
    ["Offset of field: _xmlSecTransformKlass::usage"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, usage) - 32usize];
    ["Offset of field: _xmlSecTransformKlass::initialize"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, initialize) - 40usize];
    ["Offset of field: _xmlSecTransformKlass::finalize"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, finalize) - 48usize];
    ["Offset of field: _xmlSecTransformKlass::readNode"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, readNode) - 56usize];
    ["Offset of field: _xmlSecTransformKlass::writeNode"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, writeNode) - 64usize];
    ["Offset of field: _xmlSecTransformKlass::setKeyReq"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, setKeyReq) - 72usize];
    ["Offset of field: _xmlSecTransformKlass::setKey"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, setKey) - 80usize];
    ["Offset of field: _xmlSecTransformKlass::verify"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, verify) - 88usize];
    ["Offset of field: _xmlSecTransformKlass::getDataType"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, getDataType) - 96usize];
    ["Offset of field: _xmlSecTransformKlass::pushBin"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, pushBin) - 104usize];
    ["Offset of field: _xmlSecTransformKlass::popBin"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, popBin) - 112usize];
    ["Offset of field: _xmlSecTransformKlass::pushXml"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, pushXml) - 120usize];
    ["Offset of field: _xmlSecTransformKlass::popXml"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, popXml) - 128usize];
    ["Offset of field: _xmlSecTransformKlass::execute"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, execute) - 136usize];
    ["Offset of field: _xmlSecTransformKlass::reserved0"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, reserved0) - 144usize];
    ["Offset of field: _xmlSecTransformKlass::reserved1"]
        [::std::mem::offset_of!(_xmlSecTransformKlass, reserved1) - 152usize];
};
extern "C" {
    pub fn xmlSecTransformIdListGetKlass() -> xmlSecPtrListId;
}
extern "C" {
    pub fn xmlSecTransformIdListFind(
        list: xmlSecPtrListPtr,
        transformId: xmlSecTransformId,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformIdListFindByHref(
        list: xmlSecPtrListPtr,
        href: *const xmlChar,
        usage: xmlSecTransformUsage,
    ) -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformIdListFindByName(
        list: xmlSecPtrListPtr,
        name: *const xmlChar,
        usage: xmlSecTransformUsage,
    ) -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformIdListDebugDump(list: xmlSecPtrListPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecTransformIdListDebugXmlDump(list: xmlSecPtrListPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecTransformBase64GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformBase64SetLineSize(transform: xmlSecTransformPtr, lineSize: usize);
}
extern "C" {
    pub fn xmlSecTransformInclC14NGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformInclC14NWithCommentsGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformInclC14N11GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformInclC14N11WithCommentsGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformExclC14NGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformExclC14NWithCommentsGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformEnvelopedGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformXPathGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformXPath2GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformXPointerGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformXPointerSetExpr(
        transform: xmlSecTransformPtr,
        expr: *const xmlChar,
        nodeSetType: xmlSecNodeSetType,
        hereNode: xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformRelationshipGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformRemoveXmlTagsC14NGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformVisa3DHackGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecTransformVisa3DHackSetID(
        transform: xmlSecTransformPtr,
        id: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTransformHmacGetMinOutputBitsSize() -> usize;
}
extern "C" {
    pub fn xmlSecTransformHmacSetMinOutputBitsSize(val: usize);
}
extern "C" {
    #[doc = " High-level functions\n"]
    pub fn xmlSecKeyInfoNodeRead(
        keyInfoNode: xmlNodePtr,
        key: xmlSecKeyPtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyInfoNodeWrite(
        keyInfoNode: xmlNodePtr,
        key: xmlSecKeyPtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int;
}
pub const xmlSecKeyInfoMode_xmlSecKeyInfoModeRead: xmlSecKeyInfoMode = 0;
pub const xmlSecKeyInfoMode_xmlSecKeyInfoModeWrite: xmlSecKeyInfoMode = 1;
#[doc = " xmlSecKeyInfoMode:\n @xmlSecKeyInfoModeRead: read <dsig:KeyInfo /> element.\n @xmlSecKeyInfoModeWrite: write <dsig:KeyInfo /> element.\n\n The @xmlSecKeyInfoCtx operation mode (read or write)."]
pub type xmlSecKeyInfoMode = ::std::os::raw::c_uint;
#[doc = " xmlSecKeyInfoCtx:\n @userData:           the pointer to user data (xmlsec and xmlsec-crypto\n                      never touch this).\n @flags:              the bit mask for flags that control processin.\n @flags2:             reserved for future.\n @mode:               do we read or write <dsig:KeyInfo /> element.\n @keysMngr:           the pointer to current keys manager.\n @enabledKeyData:     the list of enabled @xmlSecKeyDataId (if list is\n                      empty then all data ids are enabled).\n @base64LineSize:     the max columns size for base64 encoding.\n @retrievalMethodCtx: the transforms context for <dsig:RetrievalMethod />\n                      element processing.\n @maxRetrievalMethodLevel: the max recursion level when processing\n                     &lt;dsig:RetrievalMethod/&gt; element; default level is 1\n                      (see also @curRetrievalMethodLevel).\n @keyInfoReferenceCtx: the transforms context for&lt;dsig11:KeyInfoReference/&gt;\n                      element processing.\n @maxKeyInfoReferenceLevel: the max recursion level when processing\n                     &lt;dsig11:KeyInfoReference/&gt; element; default level is 1\n                      (see also @curKeyInfoReferenceLevel).\n @encCtx:             the encryption context for <dsig:EncryptedKey /> element\n                      processing.\n @maxEncryptedKeyLevel: the max recursion level when processing\n                     &lt;enc:EncryptedKey/&gt; element; default level is 1\n                      (see @curEncryptedKeyLevel).\n @certsVerificationTime: the time to use for X509 certificates verification\n                      (\"not valid before\" and \"not valid after\" checks);\n                      if @certsVerificationTime is equal to 0 (default)\n                      then we verify certificates against the system's\n                      clock \"now\".\n @certsVerificationDepth: the max certifications chain length (default is 9).\n @pgpReserved:        reserved for PGP.\n @curRetrievalMethodLevel: the current&lt;dsig:RetrievalMethod/&gt; element\n                      processing level (see @maxRetrievalMethodLevel).\n @curKeyInfoReferenceLevel: the current&lt;dsig11:KeyInfoReference/&gt; element\n                      processing level (see @maxKeyInfoReferenceLevel).\n @curEncryptedKeyLevel: the current&lt;enc:EncryptedKey/&gt; or&lt;enc11:DerivedKey/&gt; element\n                      processing level (see @maxEncryptedKeyLevel).\n @operation:          the transform operation for this key info.\n @keyReq:             the current key requirements.\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The <dsig:KeyInfo /> reading or writing context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyInfoCtx {
    pub userData: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_uint,
    pub flags2: ::std::os::raw::c_uint,
    pub keysMngr: xmlSecKeysMngrPtr,
    pub mode: xmlSecKeyInfoMode,
    pub enabledKeyData: xmlSecPtrList,
    pub base64LineSize: ::std::os::raw::c_int,
    pub retrievalMethodCtx: xmlSecTransformCtx,
    pub maxRetrievalMethodLevel: ::std::os::raw::c_int,
    pub keyInfoReferenceCtx: xmlSecTransformCtx,
    pub maxKeyInfoReferenceLevel: ::std::os::raw::c_int,
    pub encCtx: xmlSecEncCtxPtr,
    pub maxEncryptedKeyLevel: ::std::os::raw::c_int,
    pub certsVerificationTime: time_t,
    pub certsVerificationDepth: ::std::os::raw::c_int,
    pub pgpReserved: *mut ::std::os::raw::c_void,
    pub curRetrievalMethodLevel: ::std::os::raw::c_int,
    pub curKeyInfoReferenceLevel: ::std::os::raw::c_int,
    pub curEncryptedKeyLevel: ::std::os::raw::c_int,
    pub operation: xmlSecTransformOperation,
    pub keyReq: xmlSecKeyReq,
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecKeyInfoCtx"][::std::mem::size_of::<_xmlSecKeyInfoCtx>() - 552usize];
    ["Alignment of _xmlSecKeyInfoCtx"][::std::mem::align_of::<_xmlSecKeyInfoCtx>() - 8usize];
    ["Offset of field: _xmlSecKeyInfoCtx::userData"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, userData) - 0usize];
    ["Offset of field: _xmlSecKeyInfoCtx::flags"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, flags) - 8usize];
    ["Offset of field: _xmlSecKeyInfoCtx::flags2"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, flags2) - 12usize];
    ["Offset of field: _xmlSecKeyInfoCtx::keysMngr"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, keysMngr) - 16usize];
    ["Offset of field: _xmlSecKeyInfoCtx::mode"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, mode) - 24usize];
    ["Offset of field: _xmlSecKeyInfoCtx::enabledKeyData"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, enabledKeyData) - 32usize];
    ["Offset of field: _xmlSecKeyInfoCtx::base64LineSize"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, base64LineSize) - 72usize];
    ["Offset of field: _xmlSecKeyInfoCtx::retrievalMethodCtx"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, retrievalMethodCtx) - 80usize];
    ["Offset of field: _xmlSecKeyInfoCtx::maxRetrievalMethodLevel"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, maxRetrievalMethodLevel) - 232usize];
    ["Offset of field: _xmlSecKeyInfoCtx::keyInfoReferenceCtx"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, keyInfoReferenceCtx) - 240usize];
    ["Offset of field: _xmlSecKeyInfoCtx::maxKeyInfoReferenceLevel"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, maxKeyInfoReferenceLevel) - 392usize];
    ["Offset of field: _xmlSecKeyInfoCtx::encCtx"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, encCtx) - 400usize];
    ["Offset of field: _xmlSecKeyInfoCtx::maxEncryptedKeyLevel"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, maxEncryptedKeyLevel) - 408usize];
    ["Offset of field: _xmlSecKeyInfoCtx::certsVerificationTime"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, certsVerificationTime) - 416usize];
    ["Offset of field: _xmlSecKeyInfoCtx::certsVerificationDepth"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, certsVerificationDepth) - 424usize];
    ["Offset of field: _xmlSecKeyInfoCtx::pgpReserved"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, pgpReserved) - 432usize];
    ["Offset of field: _xmlSecKeyInfoCtx::curRetrievalMethodLevel"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, curRetrievalMethodLevel) - 440usize];
    ["Offset of field: _xmlSecKeyInfoCtx::curKeyInfoReferenceLevel"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, curKeyInfoReferenceLevel) - 444usize];
    ["Offset of field: _xmlSecKeyInfoCtx::curEncryptedKeyLevel"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, curEncryptedKeyLevel) - 448usize];
    ["Offset of field: _xmlSecKeyInfoCtx::operation"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, operation) - 452usize];
    ["Offset of field: _xmlSecKeyInfoCtx::keyReq"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, keyReq) - 456usize];
    ["Offset of field: _xmlSecKeyInfoCtx::reserved0"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, reserved0) - 536usize];
    ["Offset of field: _xmlSecKeyInfoCtx::reserved1"]
        [::std::mem::offset_of!(_xmlSecKeyInfoCtx, reserved1) - 544usize];
};
extern "C" {
    pub fn xmlSecKeyInfoCtxCreate(keysMngr: xmlSecKeysMngrPtr) -> xmlSecKeyInfoCtxPtr;
}
extern "C" {
    pub fn xmlSecKeyInfoCtxDestroy(keyInfoCtx: xmlSecKeyInfoCtxPtr);
}
extern "C" {
    pub fn xmlSecKeyInfoCtxInitialize(
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
        keysMngr: xmlSecKeysMngrPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyInfoCtxFinalize(keyInfoCtx: xmlSecKeyInfoCtxPtr);
}
extern "C" {
    pub fn xmlSecKeyInfoCtxReset(keyInfoCtx: xmlSecKeyInfoCtxPtr);
}
extern "C" {
    pub fn xmlSecKeyInfoCtxCopyUserPref(
        dst: xmlSecKeyInfoCtxPtr,
        src: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyInfoCtxCreateEncCtx(keyInfoCtx: xmlSecKeyInfoCtxPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeyInfoCtxDebugDump(keyInfoCtx: xmlSecKeyInfoCtxPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecKeyInfoCtxDebugXmlDump(keyInfoCtx: xmlSecKeyInfoCtxPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecKeyDataNameGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecKeyDataValueGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecKeyDataRetrievalMethodGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecKeyDataKeyInfoReferenceGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecKeyDataEncryptedKeyGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecKeyDataAgreementMethodGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecKeyDataDerivedKeyGetKlass() -> xmlSecKeyDataId;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyKlass {
    _unused: [u8; 0],
}
pub type xmlSecKeyKlass = _xmlSecKeyKlass;
pub type xmlSecKeyId = *const _xmlSecKeyKlass;
#[doc = " xmlSecKeyStoreKlass:\n @klassSize:          the store klass size.\n @objSize:            the store obj size.\n @name:               the store's name.\n @initialize:         the store's initialization method.\n @finalize:           the store's finalization (destroy) method.\n @findKey:            the store's method to find key by key name.\n @findKeyFromX509Data: the store's method to find key based on x509 data.\n @reserved0:          reserved for the future.\n\n The keys store id (klass)."]
pub type xmlSecKeyStoreKlass = _xmlSecKeyStoreKlass;
pub type xmlSecKeyStoreId = *const _xmlSecKeyStoreKlass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyX509DataValue {
    _unused: [u8; 0],
}
pub type xmlSecKeyX509DataValue = _xmlSecKeyX509DataValue;
pub type xmlSecKeyX509DataValuePtr = *mut _xmlSecKeyX509DataValue;
extern "C" {
    #[doc = " Keys Manager\n"]
    pub fn xmlSecKeysMngrCreate() -> xmlSecKeysMngrPtr;
}
extern "C" {
    pub fn xmlSecKeysMngrDestroy(mngr: xmlSecKeysMngrPtr);
}
extern "C" {
    pub fn xmlSecKeysMngrFindKey(
        mngr: xmlSecKeysMngrPtr,
        name: *const xmlChar,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecKeysMngrFindKeyFromX509Data(
        mngr: xmlSecKeysMngrPtr,
        x509Data: xmlSecKeyX509DataValuePtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecKeysMngrAdoptKeysStore(
        mngr: xmlSecKeysMngrPtr,
        store: xmlSecKeyStorePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeysMngrGetKeysStore(mngr: xmlSecKeysMngrPtr) -> xmlSecKeyStorePtr;
}
extern "C" {
    pub fn xmlSecKeysMngrAdoptDataStore(
        mngr: xmlSecKeysMngrPtr,
        store: xmlSecKeyDataStorePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecKeysMngrGetDataStore(
        mngr: xmlSecKeysMngrPtr,
        id: xmlSecKeyDataStoreId,
    ) -> xmlSecKeyDataStorePtr;
}
#[doc = " xmlSecGetKeyCallback:\n @keyInfoNode:                the pointer to &lt;dsig:KeyInfo/&gt; node.\n @keyInfoCtx:                 the pointer to &lt;dsig:KeyInfo/&gt; node processing context.\n\n Reads the &lt;dsig:KeyInfo/&gt; node @keyInfoNode and extracts the key.\n\n Returns: the pointer to key or NULL if the key is not found or\n an error occurs."]
pub type xmlSecGetKeyCallback = ::std::option::Option<
    unsafe extern "C" fn(keyInfoNode: xmlNodePtr, keyInfoCtx: xmlSecKeyInfoCtxPtr) -> xmlSecKeyPtr,
>;
#[doc = " xmlSecKeysMngr:\n @keysStore:                  the key store (list of keys known to keys manager).\n @storesList:                 the list of key data stores known to keys manager.\n @getKey:                     the callback used to read &lt;dsig:KeyInfo/&gt; node.\n\n The keys manager structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeysMngr {
    pub keysStore: xmlSecKeyStorePtr,
    pub storesList: xmlSecPtrList,
    pub getKey: xmlSecGetKeyCallback,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecKeysMngr"][::std::mem::size_of::<_xmlSecKeysMngr>() - 56usize];
    ["Alignment of _xmlSecKeysMngr"][::std::mem::align_of::<_xmlSecKeysMngr>() - 8usize];
    ["Offset of field: _xmlSecKeysMngr::keysStore"]
        [::std::mem::offset_of!(_xmlSecKeysMngr, keysStore) - 0usize];
    ["Offset of field: _xmlSecKeysMngr::storesList"]
        [::std::mem::offset_of!(_xmlSecKeysMngr, storesList) - 8usize];
    ["Offset of field: _xmlSecKeysMngr::getKey"]
        [::std::mem::offset_of!(_xmlSecKeysMngr, getKey) - 48usize];
};
extern "C" {
    pub fn xmlSecKeysMngrGetKey(
        keyInfoNode: xmlNodePtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> xmlSecKeyPtr;
}
#[doc = " xmlSecKeyStore\n\n/\n/**\n xmlSecKeyStore:\n @id:                 the store id (#xmlSecKeyStoreId).\n @reserved0:          reserved for the future.\n @reserved1:          reserved for the future.\n\n The keys store."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyStore {
    pub id: xmlSecKeyStoreId,
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecKeyStore"][::std::mem::size_of::<_xmlSecKeyStore>() - 24usize];
    ["Alignment of _xmlSecKeyStore"][::std::mem::align_of::<_xmlSecKeyStore>() - 8usize];
    ["Offset of field: _xmlSecKeyStore::id"][::std::mem::offset_of!(_xmlSecKeyStore, id) - 0usize];
    ["Offset of field: _xmlSecKeyStore::reserved0"]
        [::std::mem::offset_of!(_xmlSecKeyStore, reserved0) - 8usize];
    ["Offset of field: _xmlSecKeyStore::reserved1"]
        [::std::mem::offset_of!(_xmlSecKeyStore, reserved1) - 16usize];
};
extern "C" {
    pub fn xmlSecKeyStoreCreate(id: xmlSecKeyStoreId) -> xmlSecKeyStorePtr;
}
extern "C" {
    pub fn xmlSecKeyStoreDestroy(store: xmlSecKeyStorePtr);
}
extern "C" {
    pub fn xmlSecKeyStoreFindKey(
        store: xmlSecKeyStorePtr,
        name: *const xmlChar,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecKeyStoreFindKeyFromX509Data(
        store: xmlSecKeyStorePtr,
        x509Data: xmlSecKeyX509DataValuePtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> xmlSecKeyPtr;
}
#[doc = " xmlSecKeyStoreInitializeMethod:\n @store:              the store.\n\n Keys store specific initialization method.\n\n Returns: 0 on success or a negative value if an error occurs."]
pub type xmlSecKeyStoreInitializeMethod =
    ::std::option::Option<unsafe extern "C" fn(store: xmlSecKeyStorePtr) -> ::std::os::raw::c_int>;
#[doc = " xmlSecKeyStoreFinalizeMethod:\n @store:              the store.\n\n Keys store specific finalization (destroy) method."]
pub type xmlSecKeyStoreFinalizeMethod =
    ::std::option::Option<unsafe extern "C" fn(store: xmlSecKeyStorePtr)>;
#[doc = " xmlSecKeyStoreFindKeyMethod:\n @store:              the store.\n @name:               the desired key name.\n @keyInfoCtx:         the pointer to key info context.\n\n Keys store specific find method. The caller is responsible for destroying\n the returned key using #xmlSecKeyDestroy method.\n\n Returns: the pointer to a key or NULL if key is not found or an error occurs."]
pub type xmlSecKeyStoreFindKeyMethod = ::std::option::Option<
    unsafe extern "C" fn(
        store: xmlSecKeyStorePtr,
        name: *const xmlChar,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> xmlSecKeyPtr,
>;
#[doc = " xmlSecKeyStoreFindKeyFromX509DataMethod:\n @store:              the store.\n @x509Data:           the x509 data to lookup key.\n @keyInfoCtx:         the pointer to key info context.\n\n Keys store specific find method. The caller is responsible for destroying\n the returned key using #xmlSecKeyDestroy method.\n\n Returns: the pointer to a key or NULL if key is not found or an error occurs."]
pub type xmlSecKeyStoreFindKeyFromX509DataMethod = ::std::option::Option<
    unsafe extern "C" fn(
        store: xmlSecKeyStorePtr,
        x509Data: xmlSecKeyX509DataValuePtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> xmlSecKeyPtr,
>;
#[doc = " xmlSecKeyStoreKlass:\n @klassSize:          the store klass size.\n @objSize:            the store obj size.\n @name:               the store's name.\n @initialize:         the store's initialization method.\n @finalize:           the store's finalization (destroy) method.\n @findKey:            the store's method to find key by key name.\n @findKeyFromX509Data: the store's method to find key based on x509 data.\n @reserved0:          reserved for the future.\n\n The keys store id (klass)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecKeyStoreKlass {
    pub klassSize: usize,
    pub objSize: usize,
    pub name: *const xmlChar,
    pub initialize: xmlSecKeyStoreInitializeMethod,
    pub finalize: xmlSecKeyStoreFinalizeMethod,
    pub findKey: xmlSecKeyStoreFindKeyMethod,
    pub findKeyFromX509Data: xmlSecKeyStoreFindKeyFromX509DataMethod,
    pub reserved0: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecKeyStoreKlass"][::std::mem::size_of::<_xmlSecKeyStoreKlass>() - 64usize];
    ["Alignment of _xmlSecKeyStoreKlass"][::std::mem::align_of::<_xmlSecKeyStoreKlass>() - 8usize];
    ["Offset of field: _xmlSecKeyStoreKlass::klassSize"]
        [::std::mem::offset_of!(_xmlSecKeyStoreKlass, klassSize) - 0usize];
    ["Offset of field: _xmlSecKeyStoreKlass::objSize"]
        [::std::mem::offset_of!(_xmlSecKeyStoreKlass, objSize) - 8usize];
    ["Offset of field: _xmlSecKeyStoreKlass::name"]
        [::std::mem::offset_of!(_xmlSecKeyStoreKlass, name) - 16usize];
    ["Offset of field: _xmlSecKeyStoreKlass::initialize"]
        [::std::mem::offset_of!(_xmlSecKeyStoreKlass, initialize) - 24usize];
    ["Offset of field: _xmlSecKeyStoreKlass::finalize"]
        [::std::mem::offset_of!(_xmlSecKeyStoreKlass, finalize) - 32usize];
    ["Offset of field: _xmlSecKeyStoreKlass::findKey"]
        [::std::mem::offset_of!(_xmlSecKeyStoreKlass, findKey) - 40usize];
    ["Offset of field: _xmlSecKeyStoreKlass::findKeyFromX509Data"]
        [::std::mem::offset_of!(_xmlSecKeyStoreKlass, findKeyFromX509Data) - 48usize];
    ["Offset of field: _xmlSecKeyStoreKlass::reserved0"]
        [::std::mem::offset_of!(_xmlSecKeyStoreKlass, reserved0) - 56usize];
};
#[doc = " xmlSecSimpleKeysStoreAdoptKeyFunc:\n @store:              the pointer to key store.\n @key:                the pointer to key.\n\n Adds @key to the @store. On success, the @store owns the @key.\n\n Returns: 0 on success or a negative value if an error occurs."]
pub type xmlSecSimpleKeysStoreAdoptKeyFunc = ::std::option::Option<
    unsafe extern "C" fn(store: xmlSecKeyStorePtr, key: xmlSecKeyPtr) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn xmlSecSimpleKeysStoreGetKlass() -> xmlSecKeyStoreId;
}
extern "C" {
    pub fn xmlSecSimpleKeysStoreAdoptKey(
        store: xmlSecKeyStorePtr,
        key: xmlSecKeyPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecSimpleKeysStoreLoad(
        store: xmlSecKeyStorePtr,
        uri: *const ::std::os::raw::c_char,
        keysMngr: xmlSecKeysMngrPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecSimpleKeysStoreLoad_ex(
        store: xmlSecKeyStorePtr,
        uri: *const ::std::os::raw::c_char,
        keysMngr: xmlSecKeysMngrPtr,
        adoptKeyFunc: xmlSecSimpleKeysStoreAdoptKeyFunc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecSimpleKeysStoreSave(
        store: xmlSecKeyStorePtr,
        filename: *const ::std::os::raw::c_char,
        type_: xmlSecKeyDataType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecSimpleKeysStoreGetKeys(store: xmlSecKeyStorePtr) -> xmlSecPtrListPtr;
}
extern "C" {
    #[doc = " Init/shutdown\n"]
    pub fn xmlSecOpenSSLAppInit(config: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppShutdown() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Keys Manager\n"]
    pub fn xmlSecOpenSSLAppDefaultKeysMngrInit(mngr: xmlSecKeysMngrPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppDefaultKeysMngrAdoptKey(
        mngr: xmlSecKeysMngrPtr,
        key: xmlSecKeyPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppDefaultKeysMngrVerifyKey(
        mngr: xmlSecKeysMngrPtr,
        key: xmlSecKeyPtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppDefaultKeysMngrLoad(
        mngr: xmlSecKeysMngrPtr,
        uri: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppDefaultKeysMngrSave(
        mngr: xmlSecKeysMngrPtr,
        filename: *const ::std::os::raw::c_char,
        type_: xmlSecKeyDataType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeysMngrCertLoad(
        mngr: xmlSecKeysMngrPtr,
        filename: *const ::std::os::raw::c_char,
        format: xmlSecKeyDataFormat,
        type_: xmlSecKeyDataType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeysMngrCertLoadMemory(
        mngr: xmlSecKeysMngrPtr,
        data: *const xmlSecByte,
        dataSize: usize,
        format: xmlSecKeyDataFormat,
        type_: xmlSecKeyDataType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeysMngrCertLoadBIO(
        mngr: xmlSecKeysMngrPtr,
        bio: *mut BIO,
        format: xmlSecKeyDataFormat,
        type_: xmlSecKeyDataType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeysMngrCrlLoad(
        mngr: xmlSecKeysMngrPtr,
        filename: *const ::std::os::raw::c_char,
        format: xmlSecKeyDataFormat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeysMngrCrlLoadMemory(
        mngr: xmlSecKeysMngrPtr,
        data: *const xmlSecByte,
        dataSize: usize,
        format: xmlSecKeyDataFormat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeysMngrCrlLoadBIO(
        mngr: xmlSecKeysMngrPtr,
        bio: *mut BIO,
        format: xmlSecKeyDataFormat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeysMngrAddCertsPath(
        mngr: xmlSecKeysMngrPtr,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeysMngrAddCertsFile(
        mngr: xmlSecKeysMngrPtr,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Keys\n"]
    pub fn xmlSecOpenSSLAppKeyLoadEx(
        filename: *const ::std::os::raw::c_char,
        type_: xmlSecKeyDataType,
        format: xmlSecKeyDataFormat,
        pwd: *const ::std::os::raw::c_char,
        pwdCallback: *mut ::std::os::raw::c_void,
        pwdCallbackCtx: *mut ::std::os::raw::c_void,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeyLoadMemory(
        data: *const xmlSecByte,
        dataSize: usize,
        format: xmlSecKeyDataFormat,
        pwd: *const ::std::os::raw::c_char,
        pwdCallback: *mut ::std::os::raw::c_void,
        pwdCallbackCtx: *mut ::std::os::raw::c_void,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeyLoadBIO(
        bio: *mut BIO,
        format: xmlSecKeyDataFormat,
        pwd: *const ::std::os::raw::c_char,
        pwdCallback: *mut ::std::os::raw::c_void,
        pwdCallbackCtx: *mut ::std::os::raw::c_void,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecOpenSSLAppPkcs12Load(
        filename: *const ::std::os::raw::c_char,
        pwd: *const ::std::os::raw::c_char,
        pwdCallback: *mut ::std::os::raw::c_void,
        pwdCallbackCtx: *mut ::std::os::raw::c_void,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecOpenSSLAppPkcs12LoadMemory(
        data: *const xmlSecByte,
        dataSize: usize,
        pwd: *const ::std::os::raw::c_char,
        pwdCallback: *mut ::std::os::raw::c_void,
        pwdCallbackCtx: *mut ::std::os::raw::c_void,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecOpenSSLAppPkcs12LoadBIO(
        bio: *mut BIO,
        pwd: *const ::std::os::raw::c_char,
        pwdCallback: *mut ::std::os::raw::c_void,
        pwdCallbackCtx: *mut ::std::os::raw::c_void,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeyCertLoad(
        key: xmlSecKeyPtr,
        filename: *const ::std::os::raw::c_char,
        format: xmlSecKeyDataFormat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeyCertLoadMemory(
        key: xmlSecKeyPtr,
        data: *const xmlSecByte,
        dataSize: usize,
        format: xmlSecKeyDataFormat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeyCertLoadBIO(
        key: xmlSecKeyPtr,
        bio: *mut BIO,
        format: xmlSecKeyDataFormat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLAppKeyFromCertLoadBIO(
        bio: *mut BIO,
        format: xmlSecKeyDataFormat,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecOpenSSLAppGetDefaultPwdCallback() -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecCryptoDLFunctions {
    _unused: [u8; 0],
}
pub type xmlSecCryptoDLFunctions = _xmlSecCryptoDLFunctions;
pub type xmlSecCryptoDLFunctionsPtr = *mut _xmlSecCryptoDLFunctions;
extern "C" {
    pub fn xmlSecCryptoDLFunctionsRegisterKeyDataAndTransforms(
        functions: xmlSecCryptoDLFunctionsPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Common functions\n"]
    pub fn xmlSecCryptoGetFunctions_openssl() -> xmlSecCryptoDLFunctionsPtr;
}
extern "C" {
    pub fn xmlSecOpenSSLInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLShutdown() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLKeysMngrInit(mngr: xmlSecKeysMngrPtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLGenerateRandom(
        buffer: xmlSecBufferPtr,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLSetDefaultTrustedCertsFolder(path: *const xmlChar)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLGetDefaultTrustedCertsFolder() -> *const xmlChar;
}
extern "C" {
    pub fn xmlSecOpenSSLSetLibCtx(libctx: *mut OSSL_LIB_CTX) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLGetLibCtx() -> *mut OSSL_LIB_CTX;
}
extern "C" {
    #[doc = " BIO helpers\n"]
    pub fn xmlSecOpenSSLCreateMemBio() -> *mut BIO;
}
extern "C" {
    pub fn xmlSecOpenSSLCreateMemBufBio(buf: *const xmlSecByte, bufSize: usize) -> *mut BIO;
}
extern "C" {
    pub fn xmlSecOpenSSLCreateReadFileBio(path: *const ::std::os::raw::c_char) -> *mut BIO;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataAesGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataAesSet(
        data: xmlSecKeyDataPtr,
        buf: *const xmlSecByte,
        bufSize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformAes128CbcGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformAes192CbcGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformAes256CbcGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformAes128GcmGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformAes192GcmGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformAes256GcmGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformKWAes128GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformKWAes192GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformKWAes256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataConcatKdfGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataConcatKdfSet(
        data: xmlSecKeyDataPtr,
        buf: *const xmlSecByte,
        bufSize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformConcatKdfGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataDesGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataDesSet(
        data: xmlSecKeyDataPtr,
        buf: *const xmlSecByte,
        bufSize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformDes3CbcGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformKWDes3GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataDsaGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataDsaAdoptEvp(
        data: xmlSecKeyDataPtr,
        pKey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataDsaGetEvp(data: xmlSecKeyDataPtr) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformDsaSha1GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformDsaSha256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataDhGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataDhAdoptEvp(
        data: xmlSecKeyDataPtr,
        pKey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataDhGetEvp(data: xmlSecKeyDataPtr) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformDhEsGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataEcGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataEcAdoptEvp(
        data: xmlSecKeyDataPtr,
        pKey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataEcGetEvp(data: xmlSecKeyDataPtr) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformEcdsaRipemd160GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformEcdsaSha1GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformEcdsaSha224GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformEcdsaSha256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformEcdsaSha384GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformEcdsaSha512GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformEcdsaSha3_224GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformEcdsaSha3_256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformEcdsaSha3_384GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformEcdsaSha3_512GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformEcdhGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataGost2001GetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformGostR3411_94GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformGost2001GostR3411_94GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataGostR3410_2012_256GetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataGostR3410_2012_512GetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformGostR3410_2012GostR3411_2012_256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformGostR3410_2012GostR3411_2012_512GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformGostR3411_2012_256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformGostR3411_2012_512GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataHmacGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataHmacSet(
        data: xmlSecKeyDataPtr,
        buf: *const xmlSecByte,
        bufSize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformHmacMd5GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformHmacRipemd160GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformHmacSha1GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformHmacSha224GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformHmacSha256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformHmacSha384GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformHmacSha512GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformMd5GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataPbkdf2GetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataPbkdf2Set(
        data: xmlSecKeyDataPtr,
        buf: *const xmlSecByte,
        bufSize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformPbkdf2GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRipemd160GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataRsaGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataRsaAdoptEvp(
        data: xmlSecKeyDataPtr,
        pKey: *mut EVP_PKEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataRsaGetEvp(data: xmlSecKeyDataPtr) -> *mut EVP_PKEY;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaMd5GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaRipemd160GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaSha1GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaSha224GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaSha256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaSha384GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaSha512GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaPkcs1GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaOaepGetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaOaepEnc11GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaPssSha1GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaPssSha224GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaPssSha256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaPssSha384GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaPssSha512GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaPssSha3_224GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaPssSha3_256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaPssSha3_384GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformRsaPssSha3_512GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformSha1GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformSha224GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformSha256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformSha384GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformSha512GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformSha3_224GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformSha3_256GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformSha3_384GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLTransformSha3_512GetKlass() -> xmlSecTransformId;
}
extern "C" {
    pub fn xmlSecOpenSSLErrorsDefaultCallback(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        errorObject: *const ::std::os::raw::c_char,
        errorSubject: *const ::std::os::raw::c_char,
        reason: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataX509GetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataX509GetKeyCert(data: xmlSecKeyDataPtr) -> *mut X509;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataX509AdoptKeyCert(
        data: xmlSecKeyDataPtr,
        cert: *mut X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataX509AdoptCert(
        data: xmlSecKeyDataPtr,
        cert: *mut X509,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataX509GetCert(data: xmlSecKeyDataPtr, pos: usize) -> *mut X509;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataX509GetCertsSize(data: xmlSecKeyDataPtr) -> usize;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataX509AdoptCrl(
        data: xmlSecKeyDataPtr,
        crl: *mut X509_CRL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataX509GetCrl(data: xmlSecKeyDataPtr, pos: usize) -> *mut X509_CRL;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataX509GetCrlsSize(data: xmlSecKeyDataPtr) -> usize;
}
extern "C" {
    pub fn xmlSecOpenSSLX509CertGetKey(cert: *mut X509) -> xmlSecKeyDataPtr;
}
extern "C" {
    pub fn xmlSecOpenSSLKeyDataRawX509CertGetKlass() -> xmlSecKeyDataId;
}
extern "C" {
    pub fn xmlSecOpenSSLX509StoreGetKlass() -> xmlSecKeyDataStoreId;
}
extern "C" {
    pub fn xmlSecOpenSSLX509StoreFindCert(
        store: xmlSecKeyDataStorePtr,
        subjectName: *mut xmlChar,
        issuerName: *mut xmlChar,
        issuerSerial: *mut xmlChar,
        ski: *mut xmlChar,
        keyInfoCtx: *mut xmlSecKeyInfoCtx,
    ) -> *mut X509;
}
extern "C" {
    pub fn xmlSecOpenSSLX509StoreFindCert_ex(
        store: xmlSecKeyDataStorePtr,
        subjectName: *mut xmlChar,
        issuerName: *mut xmlChar,
        issuerSerial: *mut xmlChar,
        ski: *mut xmlSecByte,
        skiSize: usize,
        keyInfoCtx: *mut xmlSecKeyInfoCtx,
    ) -> *mut X509;
}
extern "C" {
    pub fn xmlSecOpenSSLX509StoreVerify(
        store: xmlSecKeyDataStorePtr,
        certs: *mut stack_st_X509,
        crls: *mut stack_st_X509_CRL,
        keyInfoCtx: *mut xmlSecKeyInfoCtx,
    ) -> *mut X509;
}
extern "C" {
    pub fn xmlSecOpenSSLX509StoreVerifyKey(
        store: xmlSecKeyDataStorePtr,
        key: xmlSecKeyPtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLX509StoreAdoptCert(
        store: xmlSecKeyDataStorePtr,
        cert: *mut X509,
        type_: xmlSecKeyDataType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLX509StoreAdoptCrl(
        store: xmlSecKeyDataStorePtr,
        crl: *mut X509_CRL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLX509StoreAddCertsPath(
        store: xmlSecKeyDataStorePtr,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecOpenSSLX509StoreAddCertsFile(
        store: xmlSecKeyDataStorePtr,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[doc = " Error functions\n\n/\n/**\n xmlSecErrorsCallback:\n @file:               the error location file name (__FILE__ macro).\n @line:               the error location line number (__LINE__ macro).\n @func:               the error location function name (__func__ macro).\n @errorObject:        the error specific error object\n @errorSubject:       the error specific error subject.\n @reason:             the error code.\n @msg:                the additional error message.\n\n The errors reporting callback function."]
pub type xmlSecErrorsCallback = ::std::option::Option<
    unsafe extern "C" fn(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        errorObject: *const ::std::os::raw::c_char,
        errorSubject: *const ::std::os::raw::c_char,
        reason: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn xmlSecErrorsInit();
}
extern "C" {
    pub fn xmlSecErrorsShutdown();
}
extern "C" {
    pub fn xmlSecErrorsSetCallback(callback: xmlSecErrorsCallback);
}
extern "C" {
    pub fn xmlSecErrorsDefaultCallback(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        errorObject: *const ::std::os::raw::c_char,
        errorSubject: *const ::std::os::raw::c_char,
        reason: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn xmlSecErrorsDefaultCallbackEnableOutput(enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xmlSecErrorsGetCode(pos: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecErrorsGetMsg(pos: usize) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmlSecError(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        errorObject: *const ::std::os::raw::c_char,
        errorSubject: *const ::std::os::raw::c_char,
        reason: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " &lt;dsig:Signature/&gt; node\n"]
    pub fn xmlSecTmplSignatureCreate(
        doc: xmlDocPtr,
        c14nMethodId: xmlSecTransformId,
        signMethodId: xmlSecTransformId,
        id: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplSignatureCreateNsPref(
        doc: xmlDocPtr,
        c14nMethodId: xmlSecTransformId,
        signMethodId: xmlSecTransformId,
        id: *const xmlChar,
        nsPrefix: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplSignatureEnsureKeyInfo(signNode: xmlNodePtr, id: *const xmlChar)
        -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplSignatureAddReference(
        signNode: xmlNodePtr,
        digestMethodId: xmlSecTransformId,
        id: *const xmlChar,
        uri: *const xmlChar,
        type_: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplSignatureAddObject(
        signNode: xmlNodePtr,
        id: *const xmlChar,
        mimeType: *const xmlChar,
        encoding: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplSignatureGetSignMethodNode(signNode: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplSignatureGetC14NMethodNode(signNode: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplReferenceAddTransform(
        referenceNode: xmlNodePtr,
        transformId: xmlSecTransformId,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplObjectAddSignProperties(
        objectNode: xmlNodePtr,
        id: *const xmlChar,
        target: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplObjectAddManifest(objectNode: xmlNodePtr, id: *const xmlChar) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplManifestAddReference(
        manifestNode: xmlNodePtr,
        digestMethodId: xmlSecTransformId,
        id: *const xmlChar,
        uri: *const xmlChar,
        type_: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    #[doc = " &lt;enc:EncryptedData/&gt; node\n"]
    pub fn xmlSecTmplEncDataCreate(
        doc: xmlDocPtr,
        encMethodId: xmlSecTransformId,
        id: *const xmlChar,
        type_: *const xmlChar,
        mimeType: *const xmlChar,
        encoding: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplEncDataEnsureKeyInfo(encNode: xmlNodePtr, id: *const xmlChar) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplEncDataEnsureEncProperties(
        encNode: xmlNodePtr,
        id: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplEncDataAddEncProperty(
        encNode: xmlNodePtr,
        id: *const xmlChar,
        target: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplEncDataEnsureCipherValue(encNode: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplEncDataEnsureCipherReference(
        encNode: xmlNodePtr,
        uri: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplEncDataGetEncMethodNode(encNode: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplCipherReferenceAddTransform(
        cipherReferenceNode: xmlNodePtr,
        transformId: xmlSecTransformId,
    ) -> xmlNodePtr;
}
extern "C" {
    #[doc = " &lt;enc:EncryptedKey/&gt; node\n"]
    pub fn xmlSecTmplReferenceListAddDataReference(
        encNode: xmlNodePtr,
        uri: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplReferenceListAddKeyReference(
        encNode: xmlNodePtr,
        uri: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    #[doc = " &lt;dsig:KeyInfo/&gt; node\n"]
    pub fn xmlSecTmplKeyInfoAddKeyName(keyInfoNode: xmlNodePtr, name: *const xmlChar)
        -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplKeyInfoAddKeyValue(keyInfoNode: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplKeyInfoAddX509Data(keyInfoNode: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplKeyInfoAddRetrievalMethod(
        keyInfoNode: xmlNodePtr,
        uri: *const xmlChar,
        type_: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplRetrievalMethodAddTransform(
        retrMethodNode: xmlNodePtr,
        transformId: xmlSecTransformId,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplKeyInfoAddEncryptedKey(
        keyInfoNode: xmlNodePtr,
        encMethodId: xmlSecTransformId,
        id: *const xmlChar,
        type_: *const xmlChar,
        recipient: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    #[doc = " &lt;dsig:X509Data/&gt; node\n"]
    pub fn xmlSecTmplX509DataAddIssuerSerial(x509DataNode: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplX509IssuerSerialAddIssuerName(
        x509IssuerSerialNode: xmlNodePtr,
        issuerName: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplX509IssuerSerialAddSerialNumber(
        x509IssuerSerialNode: xmlNodePtr,
        serial: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplX509DataAddSubjectName(x509DataNode: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplX509DataAddSKI(x509DataNode: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplX509DataAddDigest(
        x509DataNode: xmlNodePtr,
        digestAlgorithm: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplX509DataAddCertificate(x509DataNode: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecTmplX509DataAddCRL(x509DataNode: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    #[doc = " &lt;dsig:Transform/&gt; node\n"]
    pub fn xmlSecTmplTransformAddHmacOutputLength(
        transformNode: xmlNodePtr,
        bitsLen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTmplTransformAddRsaOaepParam(
        transformNode: xmlNodePtr,
        buf: *const xmlSecByte,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTmplTransformAddXsltStylesheet(
        transformNode: xmlNodePtr,
        xslt: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTmplTransformAddC14NInclNamespaces(
        transformNode: xmlNodePtr,
        prefixList: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTmplTransformAddXPath(
        transformNode: xmlNodePtr,
        expression: *const xmlChar,
        nsList: *mut *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTmplTransformAddXPath2(
        transformNode: xmlNodePtr,
        type_: *const xmlChar,
        expression: *const xmlChar,
        nsList: *mut *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecTmplTransformAddXPointer(
        transformNode: xmlNodePtr,
        expression: *const xmlChar,
        nsList: *mut *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
#[doc = " xmlSecDSigReferenceCtx:\n @userData:                   the pointer to user data (xmlsec and xmlsec-crypto libraries\n                              never touches this).\n @dsigCtx:                    the pointer to \"parent\" &lt;dsig:Signature/&gt; processing context.\n @origin:                     the signature origin (&lt;dsig:SignedInfo/&gt; or &lt;dsig:Manifest/&gt;).\n @transformCtx:               the reference processing transforms context.\n @digestMethod:               the pointer to digest transform.\n @result:                     the pointer to digest result.\n @status:                     the reference processing status.\n @preDigestMemBufMethod:      the pointer to binary buffer right before digest\n                              (valid only if either\n                              #XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES or\n                              #XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES flags are set).\n @id:                         the &lt;dsig:Reference/&gt; node ID attribute.\n @uri:                        the &lt;dsig:Reference/&gt; node URI attribute.\n @type:                       the &lt;dsig:Reference/&gt; node Type attribute.\n @reserved0:                  reserved for the future.\n @reserved1:                  reserved for the future.\n\n The &lt;dsig:Reference/&gt; processing context."]
pub type xmlSecDSigReferenceCtx = _xmlSecDSigReferenceCtx;
pub type xmlSecDSigReferenceCtxPtr = *mut _xmlSecDSigReferenceCtx;
pub const xmlSecDSigStatus_xmlSecDSigStatusUnknown: xmlSecDSigStatus = 0;
pub const xmlSecDSigStatus_xmlSecDSigStatusSucceeded: xmlSecDSigStatus = 1;
pub const xmlSecDSigStatus_xmlSecDSigStatusInvalid: xmlSecDSigStatus = 2;
#[doc = " xmlSecDSigStatus:\n @xmlSecDSigStatusUnknown:    the status is unknown.\n @xmlSecDSigStatusSucceeded:  the processing succeeded.\n @xmlSecDSigStatusInvalid:    the processing failed.\n\n XML Digital signature processing status."]
pub type xmlSecDSigStatus = ::std::os::raw::c_uint;
pub const xmlSecDSigFailureReason_xmlSecDSigFailureReasonUnknown: xmlSecDSigFailureReason = 0;
pub const xmlSecDSigFailureReason_xmlSecDSigFailureReasonReference: xmlSecDSigFailureReason = 1;
pub const xmlSecDSigFailureReason_xmlSecDSigFailureReasonSignature: xmlSecDSigFailureReason = 2;
pub const xmlSecDSigFailureReason_xmlSecDSigFailureReasonKeyNotFound: xmlSecDSigFailureReason = 3;
#[doc = " xmlSecDSigFailureReason:\n @xmlSecDSigFailureReasonUnknown:         the failure reason is unknown.\n @xmlSecDSigFailureReasonReference:       the reference processing failure (e.g. digest doesn't match).\n @xmlSecDSigFailureReasonSignature:       the signature processing failure (e.g. signature doesn't match).\n @xmlSecDSigFailureReasonKeyNotFound:     the key not found.\n\n XML Digital signature processing failure reason. The application should use\n @xmlSecDSigStatus to find out the operation status first."]
pub type xmlSecDSigFailureReason = ::std::os::raw::c_uint;
#[doc = " xmlSecDSigCtx:\n @userData:                   the pointer to user data (xmlsec and xmlsec-crypto libraries\n                              never touches this).\n @flags:                      the XML Digital Signature processing flags.\n @flags2:                     the XML Digital Signature processing flags.\n @keyInfoReadCtx:             the reading key context.\n @keyInfoWriteCtx:            the writing key context (not used for signature verification).\n @transformCtx:               the &lt;dsig:SignedInfo/&gt; node processing context.\n @enabledReferenceUris:       the URI types allowed for &lt;dsig:Reference/&gt; node.\n @enabledReferenceTransforms: the list of transforms allowed in &lt;dsig:Reference/&gt; node.\n @referencePreExecuteCallback:the callback for &lt;dsig:Reference/&gt; node processing.\n @defSignMethodId:            the default signing method klass.\n @defC14NMethodId:            the default c14n method klass.\n @defDigestMethodId:          the default digest method klass.\n @signKey:                    the signature key; application may set #signKey\n                              before calling #xmlSecDSigCtxSign or #xmlSecDSigCtxVerify\n                              functions.\n @operation:                  the operation: sign or verify.\n @result:                     the pointer to signature (not valid for signature verification).\n @status:                     the &lt;dsig:Signature/&gt; processing status.\n @failureReason:              the detailed failure reason (if known); the application should check @status first.\n @signMethod:                 the pointer to signature transform.\n @c14nMethod:                 the pointer to c14n transform.\n @preSignMemBufMethod:        the pointer to binary buffer right before signature\n                              (valid only if #XMLSEC_DSIG_FLAGS_STORE_SIGNATURE flag is set).\n @signValueNode:              the pointer to &lt;dsig:SignatureValue/&gt; node.\n @id:                         the pointer to Id attribute of &lt;dsig:Signature/&gt; node.\n @signedInfoReferences:       the list of references in &lt;dsig:SignedInfo/&gt; node.\n @manifestReferences:         the list of references in &lt;dsig:Manifest/&gt; nodes.\n @reserved0:                  reserved for the future.\n @reserved1:                  reserved for the future.\n\n XML DSig processing context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecDSigCtx {
    pub userData: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_uint,
    pub flags2: ::std::os::raw::c_uint,
    pub keyInfoReadCtx: xmlSecKeyInfoCtx,
    pub keyInfoWriteCtx: xmlSecKeyInfoCtx,
    pub transformCtx: xmlSecTransformCtx,
    pub enabledReferenceUris: xmlSecTransformUriType,
    pub enabledReferenceTransforms: xmlSecPtrListPtr,
    pub referencePreExecuteCallback: xmlSecTransformCtxPreExecuteCallback,
    pub defSignMethodId: xmlSecTransformId,
    pub defC14NMethodId: xmlSecTransformId,
    pub defDigestMethodId: xmlSecTransformId,
    pub signKey: xmlSecKeyPtr,
    pub operation: xmlSecTransformOperation,
    pub result: xmlSecBufferPtr,
    pub status: xmlSecDSigStatus,
    pub failureReason: xmlSecDSigFailureReason,
    pub signMethod: xmlSecTransformPtr,
    pub c14nMethod: xmlSecTransformPtr,
    pub preSignMemBufMethod: xmlSecTransformPtr,
    pub signValueNode: xmlNodePtr,
    pub id: *mut xmlChar,
    pub signedInfoReferences: xmlSecPtrList,
    pub manifestReferences: xmlSecPtrList,
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecDSigCtx"][::std::mem::size_of::<_xmlSecDSigCtx>() - 1488usize];
    ["Alignment of _xmlSecDSigCtx"][::std::mem::align_of::<_xmlSecDSigCtx>() - 8usize];
    ["Offset of field: _xmlSecDSigCtx::userData"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, userData) - 0usize];
    ["Offset of field: _xmlSecDSigCtx::flags"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, flags) - 8usize];
    ["Offset of field: _xmlSecDSigCtx::flags2"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, flags2) - 12usize];
    ["Offset of field: _xmlSecDSigCtx::keyInfoReadCtx"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, keyInfoReadCtx) - 16usize];
    ["Offset of field: _xmlSecDSigCtx::keyInfoWriteCtx"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, keyInfoWriteCtx) - 568usize];
    ["Offset of field: _xmlSecDSigCtx::transformCtx"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, transformCtx) - 1120usize];
    ["Offset of field: _xmlSecDSigCtx::enabledReferenceUris"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, enabledReferenceUris) - 1272usize];
    ["Offset of field: _xmlSecDSigCtx::enabledReferenceTransforms"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, enabledReferenceTransforms) - 1280usize];
    ["Offset of field: _xmlSecDSigCtx::referencePreExecuteCallback"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, referencePreExecuteCallback) - 1288usize];
    ["Offset of field: _xmlSecDSigCtx::defSignMethodId"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, defSignMethodId) - 1296usize];
    ["Offset of field: _xmlSecDSigCtx::defC14NMethodId"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, defC14NMethodId) - 1304usize];
    ["Offset of field: _xmlSecDSigCtx::defDigestMethodId"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, defDigestMethodId) - 1312usize];
    ["Offset of field: _xmlSecDSigCtx::signKey"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, signKey) - 1320usize];
    ["Offset of field: _xmlSecDSigCtx::operation"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, operation) - 1328usize];
    ["Offset of field: _xmlSecDSigCtx::result"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, result) - 1336usize];
    ["Offset of field: _xmlSecDSigCtx::status"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, status) - 1344usize];
    ["Offset of field: _xmlSecDSigCtx::failureReason"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, failureReason) - 1348usize];
    ["Offset of field: _xmlSecDSigCtx::signMethod"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, signMethod) - 1352usize];
    ["Offset of field: _xmlSecDSigCtx::c14nMethod"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, c14nMethod) - 1360usize];
    ["Offset of field: _xmlSecDSigCtx::preSignMemBufMethod"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, preSignMemBufMethod) - 1368usize];
    ["Offset of field: _xmlSecDSigCtx::signValueNode"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, signValueNode) - 1376usize];
    ["Offset of field: _xmlSecDSigCtx::id"][::std::mem::offset_of!(_xmlSecDSigCtx, id) - 1384usize];
    ["Offset of field: _xmlSecDSigCtx::signedInfoReferences"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, signedInfoReferences) - 1392usize];
    ["Offset of field: _xmlSecDSigCtx::manifestReferences"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, manifestReferences) - 1432usize];
    ["Offset of field: _xmlSecDSigCtx::reserved0"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, reserved0) - 1472usize];
    ["Offset of field: _xmlSecDSigCtx::reserved1"]
        [::std::mem::offset_of!(_xmlSecDSigCtx, reserved1) - 1480usize];
};
extern "C" {
    pub fn xmlSecDSigCtxCreate(keysMngr: xmlSecKeysMngrPtr) -> xmlSecDSigCtxPtr;
}
extern "C" {
    pub fn xmlSecDSigCtxDestroy(dsigCtx: xmlSecDSigCtxPtr);
}
extern "C" {
    pub fn xmlSecDSigCtxInitialize(
        dsigCtx: xmlSecDSigCtxPtr,
        keysMngr: xmlSecKeysMngrPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecDSigCtxFinalize(dsigCtx: xmlSecDSigCtxPtr);
}
extern "C" {
    pub fn xmlSecDSigCtxSign(dsigCtx: xmlSecDSigCtxPtr, tmpl: xmlNodePtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecDSigCtxVerify(
        dsigCtx: xmlSecDSigCtxPtr,
        node: xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecDSigCtxEnableReferenceTransform(
        dsigCtx: xmlSecDSigCtxPtr,
        transformId: xmlSecTransformId,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecDSigCtxEnableSignatureTransform(
        dsigCtx: xmlSecDSigCtxPtr,
        transformId: xmlSecTransformId,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecDSigCtxGetPreSignBuffer(dsigCtx: xmlSecDSigCtxPtr) -> xmlSecBufferPtr;
}
extern "C" {
    pub fn xmlSecDSigCtxDebugDump(dsigCtx: xmlSecDSigCtxPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecDSigCtxDebugXmlDump(dsigCtx: xmlSecDSigCtxPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecDSigCtxGetStatusString(status: xmlSecDSigStatus) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmlSecDSigCtxGetFailureReasonString(
        failureReason: xmlSecDSigFailureReason,
    ) -> *const ::std::os::raw::c_char;
}
pub const xmlSecDSigReferenceOrigin_xmlSecDSigReferenceOriginSignedInfo: xmlSecDSigReferenceOrigin =
    0;
pub const xmlSecDSigReferenceOrigin_xmlSecDSigReferenceOriginManifest: xmlSecDSigReferenceOrigin =
    1;
#[doc = " xmlSecDSigReferenceCtx\n\n/\n/**\n xmlSecDSigReferenceOrigin:\n @xmlSecDSigReferenceOriginSignedInfo:reference in &lt;dsig:SignedInfo/&gt; node.\n @xmlSecDSigReferenceOriginManifest:  reference &lt;dsig:Manifest/&gt; node.\n\n The possible &lt;dsig:Reference/&gt; node locations: in the &lt;dsig:SignedInfo/&gt;\n node or in the &lt;dsig:Manifest/&gt; node."]
pub type xmlSecDSigReferenceOrigin = ::std::os::raw::c_uint;
#[doc = " xmlSecDSigReferenceCtx:\n @userData:                   the pointer to user data (xmlsec and xmlsec-crypto libraries\n                              never touches this).\n @dsigCtx:                    the pointer to \"parent\" &lt;dsig:Signature/&gt; processing context.\n @origin:                     the signature origin (&lt;dsig:SignedInfo/&gt; or &lt;dsig:Manifest/&gt;).\n @transformCtx:               the reference processing transforms context.\n @digestMethod:               the pointer to digest transform.\n @result:                     the pointer to digest result.\n @status:                     the reference processing status.\n @preDigestMemBufMethod:      the pointer to binary buffer right before digest\n                              (valid only if either\n                              #XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES or\n                              #XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES flags are set).\n @id:                         the &lt;dsig:Reference/&gt; node ID attribute.\n @uri:                        the &lt;dsig:Reference/&gt; node URI attribute.\n @type:                       the &lt;dsig:Reference/&gt; node Type attribute.\n @reserved0:                  reserved for the future.\n @reserved1:                  reserved for the future.\n\n The &lt;dsig:Reference/&gt; processing context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecDSigReferenceCtx {
    pub userData: *mut ::std::os::raw::c_void,
    pub dsigCtx: xmlSecDSigCtxPtr,
    pub origin: xmlSecDSigReferenceOrigin,
    pub transformCtx: xmlSecTransformCtx,
    pub digestMethod: xmlSecTransformPtr,
    pub result: xmlSecBufferPtr,
    pub status: xmlSecDSigStatus,
    pub preDigestMemBufMethod: xmlSecTransformPtr,
    pub id: *mut xmlChar,
    pub uri: *mut xmlChar,
    pub type_: *mut xmlChar,
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecDSigReferenceCtx"]
        [::std::mem::size_of::<_xmlSecDSigReferenceCtx>() - 248usize];
    ["Alignment of _xmlSecDSigReferenceCtx"]
        [::std::mem::align_of::<_xmlSecDSigReferenceCtx>() - 8usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::userData"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, userData) - 0usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::dsigCtx"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, dsigCtx) - 8usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::origin"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, origin) - 16usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::transformCtx"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, transformCtx) - 24usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::digestMethod"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, digestMethod) - 176usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::result"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, result) - 184usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::status"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, status) - 192usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::preDigestMemBufMethod"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, preDigestMemBufMethod) - 200usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::id"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, id) - 208usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::uri"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, uri) - 216usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::type_"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, type_) - 224usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::reserved0"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, reserved0) - 232usize];
    ["Offset of field: _xmlSecDSigReferenceCtx::reserved1"]
        [::std::mem::offset_of!(_xmlSecDSigReferenceCtx, reserved1) - 240usize];
};
extern "C" {
    pub fn xmlSecDSigReferenceCtxCreate(
        dsigCtx: xmlSecDSigCtxPtr,
        origin: xmlSecDSigReferenceOrigin,
    ) -> xmlSecDSigReferenceCtxPtr;
}
extern "C" {
    pub fn xmlSecDSigReferenceCtxDestroy(dsigRefCtx: xmlSecDSigReferenceCtxPtr);
}
extern "C" {
    pub fn xmlSecDSigReferenceCtxInitialize(
        dsigRefCtx: xmlSecDSigReferenceCtxPtr,
        dsigCtx: xmlSecDSigCtxPtr,
        origin: xmlSecDSigReferenceOrigin,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecDSigReferenceCtxFinalize(dsigRefCtx: xmlSecDSigReferenceCtxPtr);
}
extern "C" {
    pub fn xmlSecDSigReferenceCtxProcessNode(
        dsigRefCtx: xmlSecDSigReferenceCtxPtr,
        node: xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecDSigReferenceCtxGetPreDigestBuffer(
        dsigRefCtx: xmlSecDSigReferenceCtxPtr,
    ) -> xmlSecBufferPtr;
}
extern "C" {
    pub fn xmlSecDSigReferenceCtxDebugDump(
        dsigRefCtx: xmlSecDSigReferenceCtxPtr,
        output: *mut FILE,
    );
}
extern "C" {
    pub fn xmlSecDSigReferenceCtxDebugXmlDump(
        dsigRefCtx: xmlSecDSigReferenceCtxPtr,
        output: *mut FILE,
    );
}
extern "C" {
    pub fn xmlSecDSigReferenceCtxListGetKlass() -> xmlSecPtrListId;
}
pub const xmlEncCtxMode_xmlEncCtxModeEncryptedData: xmlEncCtxMode = 0;
pub const xmlEncCtxMode_xmlEncCtxModeEncryptedKey: xmlEncCtxMode = 1;
#[doc = " xmlEncCtxMode:\n @xmlEncCtxModeEncryptedData: the &lt;enc:EncryptedData/&gt; element procesing.\n @xmlEncCtxModeEncryptedKey:  the &lt;enc:EncryptedKey/&gt; element processing.\n\n The #xmlSecEncCtx mode."]
pub type xmlEncCtxMode = ::std::os::raw::c_uint;
pub const xmlSecEncFailureReason_xmlSecEncFailureReasonUnknown: xmlSecEncFailureReason = 0;
pub const xmlSecEncFailureReason_xmlSecEncFailureReasonKeyNotFound: xmlSecEncFailureReason = 1;
#[doc = " xmlSecEncFailureReason:\n @xmlSecEncFailureReasonUnknown:            the failure reason is unknown.\n @xmlSecEncFailureReasonKeyNotFound:        the key not found.\n\n XML Encryption processing failure reason. The application should use\n the returned value from the encrypt/decrypt functions first."]
pub type xmlSecEncFailureReason = ::std::os::raw::c_uint;
#[doc = " xmlSecEncCtx:\n @userData:                   the pointer to user data (xmlsec and xmlsec-crypto libraries\n                              never touches this).\n @flags:                      the XML Encryption processing flags.\n @flags2:                     the XML Encryption processing flags.\n @mode:                       the mode.\n @keyInfoReadCtx:             the reading key context.\n @keyInfoWriteCtx:            the writing key context (not used for signature verification).\n @transformCtx:               the transforms processing context.\n @defEncMethodId:             the default encryption method (used if\n                              &lt;enc:EncryptionMethod/&gt; node is not present).\n @encKey:                     the signature key; application may set #encKey\n                              before calling encryption/decryption functions.\n @operation:                  the operation: encrypt or decrypt.\n @result:                     the pointer to signature (not valid for signature verification).\n @resultBase64Encoded:        the flag: if set then result in #result is base64 encoded.\n @resultReplaced:             the flag: if set then resulted &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node is added to the document.\n @encMethod:                  the pointer to encryption transform.\n @replacedNodeList: the first node of the list of replaced nodes depending on the nodeReplacementMode\n @id:                         the ID attribute of &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node.\n @type:                       the Type attribute of &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node.\n @mimeType:                   the MimeType attribute of &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node.\n @encoding:                   the Encoding attributeof &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node.\n @recipient:                  the Recipient attribute of &lt;enc:EncryptedKey/&gt; node..\n @carriedKeyName:             the CarriedKeyName attribute of &lt;enc:EncryptedKey/&gt; node.\n @encDataNode:                the pointer to &lt;enc:EncryptedData/&gt;\n                              or &lt;enc:EncryptedKey/&gt; node.\n @encMethodNode:              the pointer to &lt;enc:EncryptionMethod/&gt; node.\n @failureReason:              the detailed failure reason.\n @keyInfoNode:                the pointer to &lt;enc:KeyInfo/&gt; node.\n @cipherValueNode:            the pointer to &lt;enc:CipherValue/&gt; node.\n @reserved1:                  reserved for the future.\n\n XML Encryption context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecEncCtx {
    pub userData: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_uint,
    pub flags2: ::std::os::raw::c_uint,
    pub mode: xmlEncCtxMode,
    pub keyInfoReadCtx: xmlSecKeyInfoCtx,
    pub keyInfoWriteCtx: xmlSecKeyInfoCtx,
    pub transformCtx: xmlSecTransformCtx,
    pub defEncMethodId: xmlSecTransformId,
    pub encKey: xmlSecKeyPtr,
    pub operation: xmlSecTransformOperation,
    pub result: xmlSecBufferPtr,
    pub resultBase64Encoded: ::std::os::raw::c_int,
    pub resultReplaced: ::std::os::raw::c_int,
    pub encMethod: xmlSecTransformPtr,
    pub failureReason: xmlSecEncFailureReason,
    pub id: *mut xmlChar,
    pub type_: *mut xmlChar,
    pub mimeType: *mut xmlChar,
    pub encoding: *mut xmlChar,
    pub recipient: *mut xmlChar,
    pub carriedKeyName: *mut xmlChar,
    pub encDataNode: xmlNodePtr,
    pub encMethodNode: xmlNodePtr,
    pub keyInfoNode: xmlNodePtr,
    pub cipherValueNode: xmlNodePtr,
    pub replacedNodeList: xmlNodePtr,
    pub reserved1: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecEncCtx"][::std::mem::size_of::<_xmlSecEncCtx>() - 1432usize];
    ["Alignment of _xmlSecEncCtx"][::std::mem::align_of::<_xmlSecEncCtx>() - 8usize];
    ["Offset of field: _xmlSecEncCtx::userData"]
        [::std::mem::offset_of!(_xmlSecEncCtx, userData) - 0usize];
    ["Offset of field: _xmlSecEncCtx::flags"]
        [::std::mem::offset_of!(_xmlSecEncCtx, flags) - 8usize];
    ["Offset of field: _xmlSecEncCtx::flags2"]
        [::std::mem::offset_of!(_xmlSecEncCtx, flags2) - 12usize];
    ["Offset of field: _xmlSecEncCtx::mode"][::std::mem::offset_of!(_xmlSecEncCtx, mode) - 16usize];
    ["Offset of field: _xmlSecEncCtx::keyInfoReadCtx"]
        [::std::mem::offset_of!(_xmlSecEncCtx, keyInfoReadCtx) - 24usize];
    ["Offset of field: _xmlSecEncCtx::keyInfoWriteCtx"]
        [::std::mem::offset_of!(_xmlSecEncCtx, keyInfoWriteCtx) - 576usize];
    ["Offset of field: _xmlSecEncCtx::transformCtx"]
        [::std::mem::offset_of!(_xmlSecEncCtx, transformCtx) - 1128usize];
    ["Offset of field: _xmlSecEncCtx::defEncMethodId"]
        [::std::mem::offset_of!(_xmlSecEncCtx, defEncMethodId) - 1280usize];
    ["Offset of field: _xmlSecEncCtx::encKey"]
        [::std::mem::offset_of!(_xmlSecEncCtx, encKey) - 1288usize];
    ["Offset of field: _xmlSecEncCtx::operation"]
        [::std::mem::offset_of!(_xmlSecEncCtx, operation) - 1296usize];
    ["Offset of field: _xmlSecEncCtx::result"]
        [::std::mem::offset_of!(_xmlSecEncCtx, result) - 1304usize];
    ["Offset of field: _xmlSecEncCtx::resultBase64Encoded"]
        [::std::mem::offset_of!(_xmlSecEncCtx, resultBase64Encoded) - 1312usize];
    ["Offset of field: _xmlSecEncCtx::resultReplaced"]
        [::std::mem::offset_of!(_xmlSecEncCtx, resultReplaced) - 1316usize];
    ["Offset of field: _xmlSecEncCtx::encMethod"]
        [::std::mem::offset_of!(_xmlSecEncCtx, encMethod) - 1320usize];
    ["Offset of field: _xmlSecEncCtx::failureReason"]
        [::std::mem::offset_of!(_xmlSecEncCtx, failureReason) - 1328usize];
    ["Offset of field: _xmlSecEncCtx::id"][::std::mem::offset_of!(_xmlSecEncCtx, id) - 1336usize];
    ["Offset of field: _xmlSecEncCtx::type_"]
        [::std::mem::offset_of!(_xmlSecEncCtx, type_) - 1344usize];
    ["Offset of field: _xmlSecEncCtx::mimeType"]
        [::std::mem::offset_of!(_xmlSecEncCtx, mimeType) - 1352usize];
    ["Offset of field: _xmlSecEncCtx::encoding"]
        [::std::mem::offset_of!(_xmlSecEncCtx, encoding) - 1360usize];
    ["Offset of field: _xmlSecEncCtx::recipient"]
        [::std::mem::offset_of!(_xmlSecEncCtx, recipient) - 1368usize];
    ["Offset of field: _xmlSecEncCtx::carriedKeyName"]
        [::std::mem::offset_of!(_xmlSecEncCtx, carriedKeyName) - 1376usize];
    ["Offset of field: _xmlSecEncCtx::encDataNode"]
        [::std::mem::offset_of!(_xmlSecEncCtx, encDataNode) - 1384usize];
    ["Offset of field: _xmlSecEncCtx::encMethodNode"]
        [::std::mem::offset_of!(_xmlSecEncCtx, encMethodNode) - 1392usize];
    ["Offset of field: _xmlSecEncCtx::keyInfoNode"]
        [::std::mem::offset_of!(_xmlSecEncCtx, keyInfoNode) - 1400usize];
    ["Offset of field: _xmlSecEncCtx::cipherValueNode"]
        [::std::mem::offset_of!(_xmlSecEncCtx, cipherValueNode) - 1408usize];
    ["Offset of field: _xmlSecEncCtx::replacedNodeList"]
        [::std::mem::offset_of!(_xmlSecEncCtx, replacedNodeList) - 1416usize];
    ["Offset of field: _xmlSecEncCtx::reserved1"]
        [::std::mem::offset_of!(_xmlSecEncCtx, reserved1) - 1424usize];
};
extern "C" {
    pub fn xmlSecEncCtxCreate(keysMngr: xmlSecKeysMngrPtr) -> xmlSecEncCtxPtr;
}
extern "C" {
    pub fn xmlSecEncCtxDestroy(encCtx: xmlSecEncCtxPtr);
}
extern "C" {
    pub fn xmlSecEncCtxInitialize(
        encCtx: xmlSecEncCtxPtr,
        keysMngr: xmlSecKeysMngrPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecEncCtxFinalize(encCtx: xmlSecEncCtxPtr);
}
extern "C" {
    pub fn xmlSecEncCtxCopyUserPref(
        dst: xmlSecEncCtxPtr,
        src: xmlSecEncCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecEncCtxReset(encCtx: xmlSecEncCtxPtr);
}
extern "C" {
    pub fn xmlSecEncCtxBinaryEncrypt(
        encCtx: xmlSecEncCtxPtr,
        tmpl: xmlNodePtr,
        data: *const xmlSecByte,
        dataSize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecEncCtxXmlEncrypt(
        encCtx: xmlSecEncCtxPtr,
        tmpl: xmlNodePtr,
        node: xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecEncCtxUriEncrypt(
        encCtx: xmlSecEncCtxPtr,
        tmpl: xmlNodePtr,
        uri: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecEncCtxDecrypt(encCtx: xmlSecEncCtxPtr, node: xmlNodePtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecEncCtxDecryptToBuffer(
        encCtx: xmlSecEncCtxPtr,
        node: xmlNodePtr,
    ) -> xmlSecBufferPtr;
}
extern "C" {
    pub fn xmlSecEncCtxDebugDump(encCtx: xmlSecEncCtxPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecEncCtxDebugXmlDump(encCtx: xmlSecEncCtxPtr, output: *mut FILE);
}
extern "C" {
    pub fn xmlSecEncCtxDerivedKeyGenerate(
        encCtx: xmlSecEncCtxPtr,
        keyId: xmlSecKeyDataId,
        node: xmlNodePtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecEncCtxAgreementMethodGenerate(
        encCtx: xmlSecEncCtxPtr,
        keyId: xmlSecKeyDataId,
        node: xmlNodePtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> xmlSecKeyPtr;
}
extern "C" {
    pub fn xmlSecEncCtxAgreementMethodXmlWrite(
        encCtx: xmlSecEncCtxPtr,
        node: xmlNodePtr,
        keyInfoCtx: xmlSecKeyInfoCtxPtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecEncCtxGetFailureReasonString(
        failureReason: xmlSecEncFailureReason,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xmlSecGetDefaultLineFeed() -> *const xmlChar;
}
extern "C" {
    pub fn xmlSecSetDefaultLineFeed(linefeed: *const xmlChar);
}
extern "C" {
    pub fn xmlSecGetNodeNsHref(cur: xmlNodePtr) -> *const xmlChar;
}
extern "C" {
    pub fn xmlSecGetNodeContentAndTrim(cur: xmlNodePtr) -> *mut xmlChar;
}
extern "C" {
    pub fn xmlSecGetNodeContentAsSize(
        cur: xmlNodePtr,
        defValue: usize,
        res: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecCheckNodeName(
        cur: xmlNodePtr,
        name: *const xmlChar,
        ns: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecGetNextElementNode(cur: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecFindSibling(
        cur: xmlNodePtr,
        name: *const xmlChar,
        ns: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecFindChild(
        parent: xmlNodePtr,
        name: *const xmlChar,
        ns: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecFindParent(
        cur: xmlNodePtr,
        name: *const xmlChar,
        ns: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecFindNode(
        parent: xmlNodePtr,
        name: *const xmlChar,
        ns: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecAddChild(
        parent: xmlNodePtr,
        name: *const xmlChar,
        ns: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecEnsureEmptyChild(
        parent: xmlNodePtr,
        name: *const xmlChar,
        ns: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecAddChildNode(parent: xmlNodePtr, child: xmlNodePtr) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecAddNextSibling(
        node: xmlNodePtr,
        name: *const xmlChar,
        ns: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecAddPrevSibling(
        node: xmlNodePtr,
        name: *const xmlChar,
        ns: *const xmlChar,
    ) -> xmlNodePtr;
}
extern "C" {
    pub fn xmlSecReplaceNode(node: xmlNodePtr, newNode: xmlNodePtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecReplaceNodeAndReturn(
        node: xmlNodePtr,
        newNode: xmlNodePtr,
        replaced: *mut xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecReplaceContent(node: xmlNodePtr, newNode: xmlNodePtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecReplaceContentAndReturn(
        node: xmlNodePtr,
        newNode: xmlNodePtr,
        replaced: *mut xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecReplaceNodeBuffer(
        node: xmlNodePtr,
        buffer: *const xmlSecByte,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecReplaceNodeBufferAndReturn(
        node: xmlNodePtr,
        buffer: *const xmlSecByte,
        size: usize,
        replaced: *mut xmlNodePtr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecNodeEncodeAndSetContent(
        node: xmlNodePtr,
        buffer: *const xmlChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecAddIDs(doc: xmlDocPtr, cur: xmlNodePtr, ids: *mut *const xmlChar);
}
extern "C" {
    pub fn xmlSecCreateTree(rootNodeName: *const xmlChar, rootNodeNs: *const xmlChar) -> xmlDocPtr;
}
extern "C" {
    pub fn xmlSecIsEmptyNode(node: xmlNodePtr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecIsEmptyString(str_: *const xmlChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecGetQName(
        node: xmlNodePtr,
        href: *const xmlChar,
        local: *const xmlChar,
    ) -> *mut xmlChar;
}
extern "C" {
    pub fn xmlSecPrintXmlString(fd: *mut FILE, str_: *const xmlChar) -> ::std::os::raw::c_int;
}
#[doc = " xmlSecQName2IntegerInfo:\n @qnameHref:          the QName href\n @qnameLocalPart:     the QName local\n @intValue:           the integer value\n\n QName <-> Integer conversion definition."]
pub type xmlSecQName2IntegerInfo = _xmlSecQName2IntegerInfo;
#[doc = " xmlSecQName2IntegerInfo:\n @qnameHref:          the QName href\n @qnameLocalPart:     the QName local\n @intValue:           the integer value\n\n QName <-> Integer conversion definition."]
pub type xmlSecQName2IntegerInfoPtr = *mut _xmlSecQName2IntegerInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecQName2IntegerInfo {
    pub qnameHref: *const xmlChar,
    pub qnameLocalPart: *const xmlChar,
    pub intValue: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecQName2IntegerInfo"]
        [::std::mem::size_of::<_xmlSecQName2IntegerInfo>() - 24usize];
    ["Alignment of _xmlSecQName2IntegerInfo"]
        [::std::mem::align_of::<_xmlSecQName2IntegerInfo>() - 8usize];
    ["Offset of field: _xmlSecQName2IntegerInfo::qnameHref"]
        [::std::mem::offset_of!(_xmlSecQName2IntegerInfo, qnameHref) - 0usize];
    ["Offset of field: _xmlSecQName2IntegerInfo::qnameLocalPart"]
        [::std::mem::offset_of!(_xmlSecQName2IntegerInfo, qnameLocalPart) - 8usize];
    ["Offset of field: _xmlSecQName2IntegerInfo::intValue"]
        [::std::mem::offset_of!(_xmlSecQName2IntegerInfo, intValue) - 16usize];
};
#[doc = " xmlSecQName2IntegerInfoConstPtr:\n\n Pointer to constant QName <-> Integer conversion definition."]
pub type xmlSecQName2IntegerInfoConstPtr = *const xmlSecQName2IntegerInfo;
extern "C" {
    pub fn xmlSecQName2IntegerGetInfo(
        info: xmlSecQName2IntegerInfoConstPtr,
        intValue: ::std::os::raw::c_int,
    ) -> xmlSecQName2IntegerInfoConstPtr;
}
extern "C" {
    pub fn xmlSecQName2IntegerGetInteger(
        info: xmlSecQName2IntegerInfoConstPtr,
        qnameHref: *const xmlChar,
        qnameLocalPart: *const xmlChar,
        intValue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecQName2IntegerGetIntegerFromString(
        info: xmlSecQName2IntegerInfoConstPtr,
        node: xmlNodePtr,
        qname: *const xmlChar,
        intValue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecQName2IntegerGetStringFromInteger(
        info: xmlSecQName2IntegerInfoConstPtr,
        node: xmlNodePtr,
        intValue: ::std::os::raw::c_int,
    ) -> *mut xmlChar;
}
extern "C" {
    pub fn xmlSecQName2IntegerNodeRead(
        info: xmlSecQName2IntegerInfoConstPtr,
        node: xmlNodePtr,
        intValue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecQName2IntegerNodeWrite(
        info: xmlSecQName2IntegerInfoConstPtr,
        node: xmlNodePtr,
        nodeName: *const xmlChar,
        nodeNs: *const xmlChar,
        intValue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecQName2IntegerAttributeRead(
        info: xmlSecQName2IntegerInfoConstPtr,
        node: xmlNodePtr,
        attrName: *const xmlChar,
        intValue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecQName2IntegerAttributeWrite(
        info: xmlSecQName2IntegerInfoConstPtr,
        node: xmlNodePtr,
        attrName: *const xmlChar,
        intValue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecQName2IntegerDebugDump(
        info: xmlSecQName2IntegerInfoConstPtr,
        intValue: ::std::os::raw::c_int,
        name: *const xmlChar,
        output: *mut FILE,
    );
}
extern "C" {
    pub fn xmlSecQName2IntegerDebugXmlDump(
        info: xmlSecQName2IntegerInfoConstPtr,
        intValue: ::std::os::raw::c_int,
        name: *const xmlChar,
        output: *mut FILE,
    );
}
#[doc = " xmlSecBitMask:\n\n Bitmask datatype."]
pub type xmlSecBitMask = ::std::os::raw::c_uint;
#[doc = " xmlSecQName2BitMaskInfo:\n @qnameHref:          the QName href\n @qnameLocalPart:     the QName local\n @mask:               the bitmask value\n\n QName <-> Bitmask conversion definition."]
pub type xmlSecQName2BitMaskInfo = _xmlSecQName2BitMaskInfo;
#[doc = " xmlSecQName2BitMaskInfo:\n @qnameHref:          the QName href\n @qnameLocalPart:     the QName local\n @mask:               the bitmask value\n\n QName <-> Bitmask conversion definition."]
pub type xmlSecQName2BitMaskInfoPtr = *mut _xmlSecQName2BitMaskInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlSecQName2BitMaskInfo {
    pub qnameHref: *const xmlChar,
    pub qnameLocalPart: *const xmlChar,
    pub mask: xmlSecBitMask,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _xmlSecQName2BitMaskInfo"]
        [::std::mem::size_of::<_xmlSecQName2BitMaskInfo>() - 24usize];
    ["Alignment of _xmlSecQName2BitMaskInfo"]
        [::std::mem::align_of::<_xmlSecQName2BitMaskInfo>() - 8usize];
    ["Offset of field: _xmlSecQName2BitMaskInfo::qnameHref"]
        [::std::mem::offset_of!(_xmlSecQName2BitMaskInfo, qnameHref) - 0usize];
    ["Offset of field: _xmlSecQName2BitMaskInfo::qnameLocalPart"]
        [::std::mem::offset_of!(_xmlSecQName2BitMaskInfo, qnameLocalPart) - 8usize];
    ["Offset of field: _xmlSecQName2BitMaskInfo::mask"]
        [::std::mem::offset_of!(_xmlSecQName2BitMaskInfo, mask) - 16usize];
};
#[doc = " xmlSecQName2BitMaskInfoConstPtr:\n\n Pointer to constant QName <-> Bitmask conversion definition."]
pub type xmlSecQName2BitMaskInfoConstPtr = *const xmlSecQName2BitMaskInfo;
extern "C" {
    pub fn xmlSecQName2BitMaskGetInfo(
        info: xmlSecQName2BitMaskInfoConstPtr,
        mask: xmlSecBitMask,
    ) -> xmlSecQName2BitMaskInfoConstPtr;
}
extern "C" {
    pub fn xmlSecQName2BitMaskGetBitMask(
        info: xmlSecQName2BitMaskInfoConstPtr,
        qnameLocalPart: *const xmlChar,
        qnameHref: *const xmlChar,
        mask: *mut xmlSecBitMask,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecQName2BitMaskNodesRead(
        info: xmlSecQName2BitMaskInfoConstPtr,
        node: *mut xmlNodePtr,
        nodeName: *const xmlChar,
        nodeNs: *const xmlChar,
        stopOnUnknown: ::std::os::raw::c_int,
        mask: *mut xmlSecBitMask,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecQName2BitMaskGetBitMaskFromString(
        info: xmlSecQName2BitMaskInfoConstPtr,
        node: xmlNodePtr,
        qname: *const xmlChar,
        mask: *mut xmlSecBitMask,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecQName2BitMaskGetStringFromBitMask(
        info: xmlSecQName2BitMaskInfoConstPtr,
        node: xmlNodePtr,
        mask: xmlSecBitMask,
    ) -> *mut xmlChar;
}
extern "C" {
    pub fn xmlSecQName2BitMaskNodesWrite(
        info: xmlSecQName2BitMaskInfoConstPtr,
        node: xmlNodePtr,
        nodeName: *const xmlChar,
        nodeNs: *const xmlChar,
        mask: xmlSecBitMask,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmlSecQName2BitMaskDebugDump(
        info: xmlSecQName2BitMaskInfoConstPtr,
        mask: xmlSecBitMask,
        name: *const xmlChar,
        output: *mut FILE,
    );
}
extern "C" {
    pub fn xmlSecQName2BitMaskDebugXmlDump(
        info: xmlSecQName2BitMaskInfoConstPtr,
        mask: xmlSecBitMask,
        name: *const xmlChar,
        output: *mut FILE,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmlDict {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _uconv_t {
    pub _address: u8,
}
